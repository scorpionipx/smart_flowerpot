
SmartFlowerpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00001814  000018a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  0080011a  0080011a  00001962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dd5  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001205  00000000  00000000  000059dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001757  00000000  00000000  00006be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  0000833c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093d  00000000  00000000  0000876c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fd  00000000  00000000  000090a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000099a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_7>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_13>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	9c 02       	muls	r25, r28
      56:	d3 02       	muls	r29, r19
      58:	0a 03       	fmul	r16, r18
      5a:	41 03       	mulsu	r20, r17
      5c:	78 03       	fmul	r23, r16
      5e:	af 03       	fmulsu	r18, r23
      60:	e6 03       	fmuls	r22, r22
      62:	08 00       	.word	0x0008	; ????
      64:	00 00       	nop
      66:	be 92       	st	-X, r11
      68:	24 49       	sbci	r18, 0x94	; 148
      6a:	12 3e       	cpi	r17, 0xE2	; 226
      6c:	ab aa       	std	Y+51, r10	; 0x33
      6e:	aa 2a       	or	r10, r26
      70:	be cd       	rjmp	.-1156   	; 0xfffffbee <__eeprom_end+0xff7efbee>
      72:	cc cc       	rjmp	.-1640   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>
      74:	4c 3e       	cpi	r20, 0xEC	; 236
      76:	00 00       	nop
      78:	00 80       	ld	r0, Z
      7a:	be ab       	std	Y+54, r27	; 0x36
      7c:	aa aa       	std	Y+50, r10	; 0x32
      7e:	aa 3e       	cpi	r26, 0xEA	; 234
      80:	00 00       	nop
      82:	00 00       	nop
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 08       	sbc	r0, r0
      90:	41 78       	andi	r20, 0x81	; 129
      92:	d3 bb       	out	0x13, r29	; 19
      94:	43 87       	std	Z+11, r20	; 0x0b
      96:	d1 13       	cpse	r29, r17
      98:	3d 19       	sub	r19, r13
      9a:	0e 3c       	cpi	r16, 0xCE	; 206
      9c:	c3 bd       	out	0x23, r28	; 35
      9e:	42 82       	std	Z+2, r4	; 0x02
      a0:	ad 2b       	or	r26, r29
      a2:	3e 68       	ori	r19, 0x8E	; 142
      a4:	ec 82       	std	Y+4, r14	; 0x04
      a6:	76 be       	out	0x36, r7	; 54
      a8:	d9 8f       	std	Y+25, r29	; 0x19
      aa:	e1 a9       	ldd	r30, Z+49	; 0x31
      ac:	3e 4c       	sbci	r19, 0xCE	; 206
      ae:	80 ef       	ldi	r24, 0xF0	; 240
      b0:	ff be       	out	0x3f, r15	; 63
      b2:	01 c4       	rjmp	.+2050   	; 0x8b6 <init_custom_characters+0xe>
      b4:	ff 7f       	andi	r31, 0xFF	; 255
      b6:	3f 00       	.word	0x003f	; ????
      b8:	00 00       	nop
	...

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf e5       	ldi	r28, 0x5F	; 95
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e6       	ldi	r26, 0x60	; 96
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e4 e1       	ldi	r30, 0x14	; 20
      d0:	f8 e1       	ldi	r31, 0x18	; 24
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 31       	cpi	r26, 0x1A	; 26
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	aa e1       	ldi	r26, 0x1A	; 26
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a2 35       	cpi	r26, 0x52	; 82
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 0c 08 	call	0x1018	; 0x1018 <main>
      f2:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <ADC_Init>:
#define K_TO_C_100 27315// conversion factor
#define TEMP_OFFSET_100 -120 // temperature offset * 10000

void ADC_Init(void)
{
		DDRA = 0x00;
      fa:	1a ba       	out	0x1a, r1	; 26
	    // AREF = AVcc
	    ADMUX = (1<<REFS0);
      fc:	80 e4       	ldi	r24, 0x40	; 64
      fe:	87 b9       	out	0x07, r24	; 7
	    
	    // ADC Enable and prescaler of 128
	    // 16000000/128 = 125000
	    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     100:	87 e8       	ldi	r24, 0x87	; 135
     102:	86 b9       	out	0x06, r24	; 6
     104:	08 95       	ret

00000106 <ADC_GetValue>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     106:	97 b1       	in	r25, 0x07	; 7
uint16_t ADC_GetValue(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     108:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     10a:	98 7f       	andi	r25, 0xF8	; 248
     10c:	89 2b       	or	r24, r25
     10e:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     110:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     112:	36 99       	sbic	0x06, 6	; 6
     114:	fe cf       	rjmp	.-4      	; 0x112 <ADC_GetValue+0xc>
	
	return (ADC);
     116:	84 b1       	in	r24, 0x04	; 4
     118:	95 b1       	in	r25, 0x05	; 5
}
     11a:	08 95       	ret

0000011c <read_temperature>:

// temperature is read as a 5 digit positive number, 2 decimals precission
void read_temperature()
{
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
	unsigned int NTC_RESISTANCE;
	long int LN_NTC_RT25_10000; // (ln(NTC_res / RT_25)) * 10000
	long int LN_B25_100_10000; // ((ln(NTC_res / RT_25)) * 10000) / B_25_100
	long int RECIPROCAL_TEMPERATURE; // 1 / TEMPERATURE
	
	VOLTAGE = (((uint32_t)ADC_GetValue(2) * 5000) / 1023);
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     12a:	9c 01       	movw	r18, r24
     12c:	a8 e8       	ldi	r26, 0x88	; 136
     12e:	b3 e1       	ldi	r27, 0x13	; 19
     130:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__umulhisi3>
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	33 e0       	ldi	r19, 0x03	; 3
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	0e 94 93 0b 	call	0x1726	; 0x1726 <__udivmodsi4>
     140:	69 01       	movw	r12, r18
     142:	7a 01       	movw	r14, r20
	NTC_RESISTANCE = (uint32_t) SERIES_RESISTOR * VOLTAGE / (5000 - VOLTAGE);
     144:	44 27       	eor	r20, r20
     146:	55 27       	eor	r21, r21
     148:	a0 e1       	ldi	r26, 0x10	; 16
     14a:	b7 e2       	ldi	r27, 0x27	; 39
     14c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__muluhisi3>
     150:	28 e8       	ldi	r18, 0x88	; 136
     152:	33 e1       	ldi	r19, 0x13	; 19
     154:	2c 19       	sub	r18, r12
     156:	3d 09       	sbc	r19, r13
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	0e 94 93 0b 	call	0x1726	; 0x1726 <__udivmodsi4>
	
	LN_NTC_RT25_10000 = (sint32) (log((double) NTC_RESISTANCE / RT_25) * 10000);
     160:	b9 01       	movw	r22, r18
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 92 09 	call	0x1324	; 0x1324 <__floatunsisf>
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e4       	ldi	r19, 0x40	; 64
     16e:	4c e1       	ldi	r20, 0x1C	; 28
     170:	56 e4       	ldi	r21, 0x46	; 70
     172:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__divsf3>
     176:	0e 94 28 0a 	call	0x1450	; 0x1450 <log>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e4       	ldi	r19, 0x40	; 64
     17e:	4c e1       	ldi	r20, 0x1C	; 28
     180:	56 e4       	ldi	r21, 0x46	; 70
     182:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__mulsf3>
     186:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__fixsfsi>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
	LN_B25_100_10000 = (sint32) LN_NTC_RT25_10000 * 100 / B_25_100;
     18e:	a4 e6       	ldi	r26, 0x64	; 100
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__muluhisi3>
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	30 e1       	ldi	r19, 0x10	; 16
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
	RECIPROCAL_TEMPERATURE = (sint32) LN_B25_100_10000 + RECIPROCAL_T25_10000;
     1a2:	26 5e       	subi	r18, 0xE6	; 230
     1a4:	32 4f       	sbci	r19, 0xF2	; 242
     1a6:	4f 4f       	sbci	r20, 0xFF	; 255
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
	TEMPERATURE = (sint32) 100000000 / RECIPROCAL_TEMPERATURE;
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	71 ee       	ldi	r23, 0xE1	; 225
     1ae:	85 ef       	ldi	r24, 0xF5	; 245
     1b0:	95 e0       	ldi	r25, 0x05	; 5
     1b2:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
	TEMPERATURE -= K_TO_C_100;
	TEMPERATURE += TEMP_OFFSET_100;
     1b6:	da 01       	movw	r26, r20
     1b8:	c9 01       	movw	r24, r18
     1ba:	8b 52       	subi	r24, 0x2B	; 43
     1bc:	9b 46       	sbci	r25, 0x6B	; 107
     1be:	a1 09       	sbc	r26, r1
     1c0:	b1 09       	sbc	r27, r1
     1c2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <TEMPERATURE>
     1c6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <TEMPERATURE+0x1>
     1ca:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <TEMPERATURE+0x2>
     1ce:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <TEMPERATURE+0x3>
}
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	08 95       	ret

000001dc <read_humidity_level>:

void read_humidity_level(int sensor)
{
	switch(sensor)
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	91 05       	cpc	r25, r1
     1e0:	19 f0       	breq	.+6      	; 0x1e8 <read_humidity_level+0xc>
     1e2:	02 97       	sbiw	r24, 0x02	; 2
     1e4:	a1 f0       	breq	.+40     	; 0x20e <read_humidity_level+0x32>
     1e6:	08 95       	ret
	{
		case 1:
		{
			humidity_level_sensor_1 = (((uint32_t)ADC_GetValue(0) * 100) / 1023);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     1ee:	9c 01       	movw	r18, r24
     1f0:	a4 e6       	ldi	r26, 0x64	; 100
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__umulhisi3>
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	33 e0       	ldi	r19, 0x03	; 3
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	0e 94 93 0b 	call	0x1726	; 0x1726 <__udivmodsi4>
     204:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <humidity_level_sensor_1+0x1>
     208:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <humidity_level_sensor_1>
			break;
     20c:	08 95       	ret
		}
		case 2:
		{
			humidity_level_sensor_2 = (((uint32_t)ADC_GetValue(1) * 100) / 1023);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     214:	9c 01       	movw	r18, r24
     216:	a4 e6       	ldi	r26, 0x64	; 100
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__umulhisi3>
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	33 e0       	ldi	r19, 0x03	; 3
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	0e 94 93 0b 	call	0x1726	; 0x1726 <__udivmodsi4>
     22a:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <humidity_level_sensor_2+0x1>
     22e:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <humidity_level_sensor_2>
     232:	08 95       	ret

00000234 <init_buttons>:

// INITIALIZE uC PORT FOR BUTTONS READING AND SET BUTTONS DEFAULT VALUE TO FALSE (RELEASED)
void init_buttons()
{
	// SET PORT DIRECTION
	BUTTONS_DDR &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN);
     234:	81 b3       	in	r24, 0x11	; 17
     236:	8f 73       	andi	r24, 0x3F	; 63
     238:	81 bb       	out	0x11, r24	; 17
	
	// SET DEFAULT VALUE
	BUTTONS_PORT &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN);
     23a:	82 b3       	in	r24, 0x12	; 18
     23c:	8f 73       	andi	r24, 0x3F	; 63
     23e:	82 bb       	out	0x12, r24	; 18
	
	// GLOBAL BUTTONS STATE TRACKING INITIALIZING
	BUTTON_1_PRESSED = FALSE;
     240:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
	BUTTON_2_PRESSED = FALSE;
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	8d 7f       	andi	r24, 0xFD	; 253
     248:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
     24c:	08 95       	ret

0000024e <read_buttons>:
||   BUTTON_2   ||         NEXT MENU           ||
  ============================================
*/
void read_buttons()
{
	BUTTON_1_PRESSED = BUTTON_1_VALUE;
     24e:	90 b3       	in	r25, 0x10	; 16
     250:	92 95       	swap	r25
     252:	96 95       	lsr	r25
     254:	96 95       	lsr	r25
     256:	93 70       	andi	r25, 0x03	; 3
     258:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     25c:	90 fb       	bst	r25, 0
     25e:	80 f9       	bld	r24, 0
     260:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
	if(BUTTON_1_PRESSED)
     264:	80 ff       	sbrs	r24, 0
     266:	09 c0       	rjmp	.+18     	; 0x27a <read_buttons+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     268:	8f e1       	ldi	r24, 0x1F	; 31
     26a:	9e e4       	ldi	r25, 0x4E	; 78
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <read_buttons+0x1e>
     270:	00 c0       	rjmp	.+0      	; 0x272 <read_buttons+0x24>
     272:	00 00       	nop
	{
		_delay_ms(5);
		next_menu();
     274:	0e 94 99 08 	call	0x1132	; 0x1132 <next_menu>
		return;
     278:	08 95       	ret
	}
	
	BUTTON_2_PRESSED = BUTTON_2_VALUE;
     27a:	80 b3       	in	r24, 0x10	; 16
     27c:	88 1f       	adc	r24, r24
     27e:	88 27       	eor	r24, r24
     280:	88 1f       	adc	r24, r24
     282:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <GLOBAL_BOOL>
     286:	80 fb       	bst	r24, 0
     288:	91 f9       	bld	r25, 1
     28a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <GLOBAL_BOOL>
     28e:	08 95       	ret

00000290 <increment_clock>:
#include "IPX_Clock.h"

// INCREASE TIME BY ONE SECOND
void increment_clock()
{
	CLOCK.S ++;
     290:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <CLOCK+0x4>
     294:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <CLOCK+0x5>
     298:	01 96       	adiw	r24, 0x01	; 1
	if(CLOCK.S >= 60)
     29a:	8c 33       	cpi	r24, 0x3C	; 60
     29c:	91 05       	cpc	r25, r1
     29e:	2c f4       	brge	.+10     	; 0x2aa <increment_clock+0x1a>
#include "IPX_Clock.h"

// INCREASE TIME BY ONE SECOND
void increment_clock()
{
	CLOCK.S ++;
     2a0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <CLOCK+0x5>
     2a4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <CLOCK+0x4>
     2a8:	08 95       	ret
	if(CLOCK.S >= 60)
	{
		CLOCK.S = 0;
     2aa:	e6 e3       	ldi	r30, 0x36	; 54
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	15 82       	std	Z+5, r1	; 0x05
     2b0:	14 82       	std	Z+4, r1	; 0x04
		CLOCK.M ++;
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	93 81       	ldd	r25, Z+3	; 0x03
     2b6:	01 96       	adiw	r24, 0x01	; 1
		if(CLOCK.M >= 60)
     2b8:	8c 33       	cpi	r24, 0x3C	; 60
     2ba:	91 05       	cpc	r25, r1
     2bc:	2c f4       	brge	.+10     	; 0x2c8 <increment_clock+0x38>
{
	CLOCK.S ++;
	if(CLOCK.S >= 60)
	{
		CLOCK.S = 0;
		CLOCK.M ++;
     2be:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <CLOCK+0x3>
     2c2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <CLOCK+0x2>
     2c6:	08 95       	ret
		if(CLOCK.M >= 60)
		{
			CLOCK.M = 0;
     2c8:	e6 e3       	ldi	r30, 0x36	; 54
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	13 82       	std	Z+3, r1	; 0x03
     2ce:	12 82       	std	Z+2, r1	; 0x02
			CLOCK.H ++;
     2d0:	80 81       	ld	r24, Z
     2d2:	91 81       	ldd	r25, Z+1	; 0x01
     2d4:	01 96       	adiw	r24, 0x01	; 1
			if(CLOCK.H >= 24)
     2d6:	88 31       	cpi	r24, 0x18	; 24
     2d8:	91 05       	cpc	r25, r1
     2da:	2c f4       	brge	.+10     	; 0x2e6 <increment_clock+0x56>
		CLOCK.S = 0;
		CLOCK.M ++;
		if(CLOCK.M >= 60)
		{
			CLOCK.M = 0;
			CLOCK.H ++;
     2dc:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <CLOCK+0x1>
     2e0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CLOCK>
     2e4:	08 95       	ret
			if(CLOCK.H >= 24)
			{
				CLOCK.H = 0;
     2e6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <CLOCK+0x1>
     2ea:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <CLOCK>
     2ee:	08 95       	ret

000002f0 <init_interrupt_200ms>:

// 200 ms timer
void init_interrupt_200ms()
{
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
     2f0:	8e b5       	in	r24, 0x2e	; 46
     2f2:	8b 60       	ori	r24, 0x0B	; 11
     2f4:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
     2f6:	1d bc       	out	0x2d, r1	; 45
     2f8:	1c bc       	out	0x2c, r1	; 44
	
	// initialize compare value
	OCR1A = 49999;
     2fa:	8f e4       	ldi	r24, 0x4F	; 79
     2fc:	93 ec       	ldi	r25, 0xC3	; 195
     2fe:	9b bd       	out	0x2b, r25	; 43
     300:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
     302:	89 b7       	in	r24, 0x39	; 57
     304:	80 61       	ori	r24, 0x10	; 16
     306:	89 bf       	out	0x39, r24	; 57
     308:	08 95       	ret

0000030a <__vector_7>:
}

// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
	// toggle led here
	display_values();
     32c:	0e 94 60 07 	call	0xec0	; 0xec0 <display_values>
	seconds_counter ++;
     330:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <seconds_counter>
     334:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <seconds_counter+0x1>
     338:	01 96       	adiw	r24, 0x01	; 1
	
	if(seconds_counter >= SECOND)
     33a:	85 30       	cpi	r24, 0x05	; 5
     33c:	91 05       	cpc	r25, r1
     33e:	28 f4       	brcc	.+10     	; 0x34a <__vector_7+0x40>
// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
	// toggle led here
	display_values();
	seconds_counter ++;
     340:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <seconds_counter+0x1>
     344:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <seconds_counter>
     348:	2b c0       	rjmp	.+86     	; 0x3a0 <__vector_7+0x96>
	
	if(seconds_counter >= SECOND)
	{
		seconds_counter = 0;
     34a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <seconds_counter+0x1>
     34e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <seconds_counter>
		increment_clock();
     352:	0e 94 48 01 	call	0x290	; 0x290 <increment_clock>
		TOGGLE_PWR_LED;
     356:	98 b3       	in	r25, 0x18	; 24
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	89 27       	eor	r24, r25
     35c:	88 bb       	out	0x18, r24	; 24
		send_uart_data_tank_water_level();
     35e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <WATER_LEVEL>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e 94 ad 07 	call	0xf5a	; 0xf5a <send_uart_8bits_data>
		send_uart_data_humidity_sensor_1();
     368:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <humidity_level_sensor_1>
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <send_uart_8bits_data>
		send_uart_data_humidity_sensor_2();
     372:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <humidity_level_sensor_2>
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	0e 94 ad 07 	call	0xf5a	; 0xf5a <send_uart_8bits_data>
		send_uart_data_temperature();
     37c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <TEMPERATURE>
     380:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <TEMPERATURE+0x1>
     384:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TEMPERATURE+0x2>
     388:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <TEMPERATURE+0x3>
     38c:	24 e6       	ldi	r18, 0x64	; 100
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     398:	62 2f       	mov	r22, r18
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <send_uart_8bits_data>
	}
	
	read_humidity_counter ++;
     3a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <read_humidity_counter>
     3a4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <read_humidity_counter+0x1>
     3a8:	01 96       	adiw	r24, 0x01	; 1
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	91 05       	cpc	r25, r1
     3ae:	28 f4       	brcc	.+10     	; 0x3ba <__vector_7+0xb0>
		send_uart_data_humidity_sensor_1();
		send_uart_data_humidity_sensor_2();
		send_uart_data_temperature();
	}
	
	read_humidity_counter ++;
     3b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <read_humidity_counter+0x1>
     3b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <read_humidity_counter>
     3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <__vector_7+0xc8>
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
	{
		read_humidity_counter = 0;
     3ba:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <read_humidity_counter+0x1>
     3be:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <read_humidity_counter>
		read_humidity_level(SENSOR_1);
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <read_humidity_level>
		read_humidity_level(SENSOR_2);
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 ee 00 	call	0x1dc	; 0x1dc <read_humidity_level>
	}
	read_tank_water_level_counter ++;
     3d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     3d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     3da:	01 96       	adiw	r24, 0x01	; 1
	if (read_tank_water_level_counter >= READ_TANK_WATER_LEVEL_PERIOD)
     3dc:	83 30       	cpi	r24, 0x03	; 3
     3de:	91 05       	cpc	r25, r1
     3e0:	28 f4       	brcc	.+10     	; 0x3ec <__vector_7+0xe2>
	{
		read_humidity_counter = 0;
		read_humidity_level(SENSOR_1);
		read_humidity_level(SENSOR_2);
	}
	read_tank_water_level_counter ++;
     3e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     3e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
	if (read_tank_water_level_counter >= READ_TANK_WATER_LEVEL_PERIOD)
	{
		read_tank_water_level_counter = 0;
     3ec:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     3f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		read_buttons();
     3f4:	0e 94 27 01 	call	0x24e	; 0x24e <read_buttons>
		
		read_tank_water_level();
     3f8:	0e 94 c3 08 	call	0x1186	; 0x1186 <read_tank_water_level>
		read_temperature();
     3fc:	0e 94 8e 00 	call	0x11c	; 0x11c <read_temperature>
	}
	
	if(humidity_level_sensor_1 < HUMIDITY_THRESHOLD && humidity_level_sensor_2 < HUMIDITY_THRESHOLD && !WATER_PUMP_IS_ON)
     400:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <humidity_level_sensor_1>
     404:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <humidity_level_sensor_1+0x1>
     408:	44 97       	sbiw	r24, 0x14	; 20
     40a:	00 f5       	brcc	.+64     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     40c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <humidity_level_sensor_2>
     410:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <humidity_level_sensor_2+0x1>
     414:	44 97       	sbiw	r24, 0x14	; 20
     416:	d0 f4       	brcc	.+52     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     418:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     41c:	83 fd       	sbrc	r24, 3
     41e:	16 c0       	rjmp	.+44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		water_needed_counter ++;
     420:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <water_needed_counter>
     424:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <water_needed_counter+0x1>
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <water_needed_counter+0x1>
     42e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <water_needed_counter>
		if(water_needed_counter >= HUMIDITY_TEST_CYCLES)
     432:	84 36       	cpi	r24, 0x64	; 100
     434:	91 05       	cpc	r25, r1
     436:	70 f0       	brcs	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		{
			WATER_NEEDED = TRUE;
     438:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     43c:	84 60       	ori	r24, 0x04	; 4
     43e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
			water_needed_counter = 0;
     442:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <water_needed_counter+0x1>
     446:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <water_needed_counter>
     44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	}
	else
	{
		water_needed_counter = 0;
     44c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <water_needed_counter+0x1>
     450:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <water_needed_counter>
	}
	if(WATER_NEEDED && !WATER_PUMP_IS_ON)
     454:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     458:	8c 70       	andi	r24, 0x0C	; 12
     45a:	84 30       	cpi	r24, 0x04	; 4
     45c:	39 f4       	brne	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		WATER_PUMP_TURN_ON;
     45e:	95 9a       	sbi	0x12, 5	; 18
		WATER_PUMP_IS_ON = TRUE;
     460:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
		WATER_NEEDED = FALSE;
     464:	88 60       	ori	r24, 0x08	; 8
     466:	8b 7f       	andi	r24, 0xFB	; 251
     468:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
	}
	if(WATER_PUMP_IS_ON)
     46c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     470:	83 ff       	sbrs	r24, 3
     472:	15 c0       	rjmp	.+42     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
	{
		water_pump_counter ++;
     474:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     478:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     482:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		if(water_pump_counter >= WATERING_CYCLES)
     486:	44 97       	sbiw	r24, 0x14	; 20
     488:	50 f0       	brcs	.+20     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		{
			WATER_PUMP_TURN_OFF;
     48a:	95 98       	cbi	0x12, 5	; 18
			WATER_PUMP_IS_ON = FALSE;
     48c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
     490:	87 7f       	andi	r24, 0xF7	; 247
     492:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
			water_pump_counter = 0;
     496:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
     49a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		}
	}
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <put_Char_LCD_Display>:
#define MAX_CHARS_PER_ROW 16


void put_Char_LCD_Display(int ch, int type)
{
	PORTC = (PORTC&0x0F)|(ch&0xF0);
     4c0:	25 b3       	in	r18, 0x15	; 21
     4c2:	38 2f       	mov	r19, r24
     4c4:	30 7f       	andi	r19, 0xF0	; 240
     4c6:	2f 70       	andi	r18, 0x0F	; 15
     4c8:	23 2b       	or	r18, r19
     4ca:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
     4cc:	25 b3       	in	r18, 0x15	; 21
     4ce:	61 70       	andi	r22, 0x01	; 1
     4d0:	2e 7f       	andi	r18, 0xFE	; 254
     4d2:	26 2b       	or	r18, r22
     4d4:	25 bb       	out	0x15, r18	; 21
	PORTC = PORTC|0x02;
     4d6:	a9 9a       	sbi	0x15, 1	; 21
     4d8:	ef ed       	ldi	r30, 0xDF	; 223
     4da:	fe e2       	ldi	r31, 0x2E	; 46
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <put_Char_LCD_Display+0x1c>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <put_Char_LCD_Display+0x22>
     4e2:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTC &= 0xFC;
     4e4:	25 b3       	in	r18, 0x15	; 21
     4e6:	2c 7f       	andi	r18, 0xFC	; 252
     4e8:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0x0F)|((ch<<4)&0xF0);
     4ea:	25 b3       	in	r18, 0x15	; 21
     4ec:	82 95       	swap	r24
     4ee:	92 95       	swap	r25
     4f0:	90 7f       	andi	r25, 0xF0	; 240
     4f2:	98 27       	eor	r25, r24
     4f4:	80 7f       	andi	r24, 0xF0	; 240
     4f6:	98 27       	eor	r25, r24
     4f8:	92 2f       	mov	r25, r18
     4fa:	9f 70       	andi	r25, 0x0F	; 15
     4fc:	89 2b       	or	r24, r25
     4fe:	85 bb       	out	0x15, r24	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
     500:	85 b3       	in	r24, 0x15	; 21
     502:	8e 7f       	andi	r24, 0xFE	; 254
     504:	68 2b       	or	r22, r24
     506:	65 bb       	out	0x15, r22	; 21
	PORTC = PORTC|0x02;
     508:	a9 9a       	sbi	0x15, 1	; 21
     50a:	8f ed       	ldi	r24, 0xDF	; 223
     50c:	9e e2       	ldi	r25, 0x2E	; 46
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <put_Char_LCD_Display+0x4e>
     512:	00 c0       	rjmp	.+0      	; 0x514 <put_Char_LCD_Display+0x54>
     514:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTC &= 0xFC;
     516:	85 b3       	in	r24, 0x15	; 21
     518:	8c 7f       	andi	r24, 0xFC	; 252
     51a:	85 bb       	out	0x15, r24	; 21
     51c:	08 95       	ret

0000051e <init_custom_character_level>:
	init_custom_characters();
}

void init_custom_character_level()
{
	switch(WATER_LEVEL)
     51e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <WATER_LEVEL>
     522:	8e 2f       	mov	r24, r30
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	87 30       	cpi	r24, 0x07	; 7
     528:	91 05       	cpc	r25, r1
     52a:	08 f0       	brcs	.+2      	; 0x52e <init_custom_character_level+0x10>
     52c:	86 c1       	rjmp	.+780    	; 0x83a <init_custom_character_level+0x31c>
     52e:	fc 01       	movw	r30, r24
     530:	e6 5d       	subi	r30, 0xD6	; 214
     532:	ff 4f       	sbci	r31, 0xFF	; 255
     534:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__tablejump2__>
	{
		case 0:
		{
			// tank water level 0
			put_Char_LCD_Display(80, 0);
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	80 e5       	ldi	r24, 0x50	; 80
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	8f e1       	ldi	r24, 0x1F	; 31
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     5a4:	08 95       	ret
		}
		case 1:
		{
			// tank water level 1
			put_Char_LCD_Display(80, 0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	80 e5       	ldi	r24, 0x50	; 80
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	8f e1       	ldi	r24, 0x1F	; 31
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	8f e1       	ldi	r24, 0x1F	; 31
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     612:	08 95       	ret
		}
		case 2:
		{
			// tank water level 2
			put_Char_LCD_Display(80, 0);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e5       	ldi	r24, 0x50	; 80
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	8f e1       	ldi	r24, 0x1F	; 31
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	8f e1       	ldi	r24, 0x1F	; 31
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	8f e1       	ldi	r24, 0x1F	; 31
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     680:	08 95       	ret
		}
		case 3:
		{
			// tank water level 3
			put_Char_LCD_Display(80, 0);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e5       	ldi	r24, 0x50	; 80
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	8f e1       	ldi	r24, 0x1F	; 31
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	8f e1       	ldi	r24, 0x1F	; 31
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	8f e1       	ldi	r24, 0x1F	; 31
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	8f e1       	ldi	r24, 0x1F	; 31
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     6ee:	08 95       	ret
		}
		case 4:
		{
			// tank water level 4
			put_Char_LCD_Display(80, 0);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e5       	ldi	r24, 0x50	; 80
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	8f e1       	ldi	r24, 0x1F	; 31
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	8f e1       	ldi	r24, 0x1F	; 31
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	8f e1       	ldi	r24, 0x1F	; 31
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8f e1       	ldi	r24, 0x1F	; 31
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8f e1       	ldi	r24, 0x1F	; 31
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     75c:	08 95       	ret
		}
		case 5:
		{
			// tank water level 5
			put_Char_LCD_Display(80, 0);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e5       	ldi	r24, 0x50	; 80
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	8f e1       	ldi	r24, 0x1F	; 31
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	8f e1       	ldi	r24, 0x1F	; 31
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	8f e1       	ldi	r24, 0x1F	; 31
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	8f e1       	ldi	r24, 0x1F	; 31
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	8f e1       	ldi	r24, 0x1F	; 31
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     7ca:	08 95       	ret
		}
		case 6:
		{
			// tank water level 6
			put_Char_LCD_Display(80, 0);
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e5       	ldi	r24, 0x50	; 80
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	8f e1       	ldi	r24, 0x1F	; 31
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	8f e1       	ldi	r24, 0x1F	; 31
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	8f e1       	ldi	r24, 0x1F	; 31
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	8f e1       	ldi	r24, 0x1F	; 31
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	8f e1       	ldi	r24, 0x1F	; 31
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8f e1       	ldi	r24, 0x1F	; 31
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	8f e1       	ldi	r24, 0x1F	; 31
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			break;
     838:	08 95       	ret
		}
		default:
		{
			// tank water level 0
			put_Char_LCD_Display(80, 0);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e5       	ldi	r24, 0x50	; 80
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	8f e1       	ldi	r24, 0x1F	; 31
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     8a6:	08 95       	ret

000008a8 <init_custom_characters>:
}

void init_custom_characters()
{
	// tank water level start character
	put_Char_LCD_Display(64, 0);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e4       	ldi	r24, 0x40	; 64
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00011, 1);
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00111, 1);
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	87 e0       	ldi	r24, 0x07	; 7
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b01101, 1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	8d e0       	ldi	r24, 0x0D	; 13
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11001, 1);
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	89 e1       	ldi	r24, 0x19	; 25
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	// tank water level end character
	put_Char_LCD_Display(72, 0);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	88 e4       	ldi	r24, 0x48	; 72
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 e1       	ldi	r24, 0x10	; 16
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e1       	ldi	r24, 0x10	; 16
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e1       	ldi	r24, 0x10	; 16
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11000, 1);
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	88 e1       	ldi	r24, 0x18	; 24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11100, 1);
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	8c e1       	ldi	r24, 0x1C	; 28
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10110, 1);
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	86 e1       	ldi	r24, 0x16	; 22
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10011, 1);
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	83 e1       	ldi	r24, 0x13	; 19
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     980:	08 95       	ret

00000982 <init_LCD_Display>:
	PORTC &= 0xFC;
}

void init_LCD_Display(void)
{
	DDRC = 0xFF;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	84 bb       	out	0x14, r24	; 20
	put_Char_LCD_Display(0x03,0);
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	9c e7       	ldi	r25, 0x7C	; 124
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	f1 f7       	brne	.-4      	; 0x996 <init_LCD_Display+0x14>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <init_LCD_Display+0x1a>
     99c:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x03,0);
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	83 e0       	ldi	r24, 0x03	; 3
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	9c e7       	ldi	r25, 0x7C	; 124
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <init_LCD_Display+0x2c>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <init_LCD_Display+0x32>
     9b4:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x03,0);
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	9c e7       	ldi	r25, 0x7C	; 124
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <init_LCD_Display+0x44>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <init_LCD_Display+0x4a>
     9cc:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	9c e7       	ldi	r25, 0x7C	; 124
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <init_LCD_Display+0x5c>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <init_LCD_Display+0x62>
     9e4:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	8c e0       	ldi	r24, 0x0C	; 12
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	9c e7       	ldi	r25, 0x7C	; 124
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <init_LCD_Display+0x74>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <init_LCD_Display+0x7a>
     9fc:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	9c e7       	ldi	r25, 0x7C	; 124
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <init_LCD_Display+0x8c>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <init_LCD_Display+0x92>
     a14:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9c e7       	ldi	r25, 0x7C	; 124
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <init_LCD_Display+0xa4>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <init_LCD_Display+0xaa>
     a2c:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	init_custom_characters();
     a3a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <init_custom_characters>
     a3e:	08 95       	ret

00000a40 <put_string>:
	put_Char_LCD_Display(0b10011, 1);
}

// display string
void put_string(const char *_string)
{
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	8c 01       	movw	r16, r24
     a4e:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
     a50:	c0 e0       	ldi	r28, 0x00	; 0
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	09 c0       	rjmp	.+18     	; 0xa68 <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
     a56:	f7 01       	movw	r30, r14
     a58:	81 91       	ld	r24, Z+
     a5a:	7f 01       	movw	r14, r30
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
     a66:	21 96       	adiw	r28, 0x01	; 1
     a68:	f8 01       	movw	r30, r16
     a6a:	01 90       	ld	r0, Z+
     a6c:	00 20       	and	r0, r0
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <put_string+0x2a>
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	e0 1b       	sub	r30, r16
     a74:	f1 0b       	sbc	r31, r17
     a76:	ce 17       	cp	r28, r30
     a78:	df 07       	cpc	r29, r31
     a7a:	68 f3       	brcs	.-38     	; 0xa56 <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	08 95       	ret

00000a8a <display_umidity_level_title>:

// displays humidity percentage title
void display_umidity_level_title()
{
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
	int index;
	
	put_Char_LCD_Display(0x01,0); // clear LCD
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(SENSOR_1_TITLE);
     aa6:	82 e6       	ldi	r24, 0x62	; 98
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     aae:	c5 e0       	ldi	r28, 0x05	; 5
     ab0:	d0 e0       	ldi	r29, 0x00	; 0
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e2       	ldi	r24, 0x20	; 32
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     abe:	21 97       	sbiw	r28, 0x01	; 1
	
	put_Char_LCD_Display(0x01,0); // clear LCD
	
	put_Char_LCD_Display(0x80, 0);
	put_string(SENSOR_1_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
     ac0:	c1 f7       	brne	.-16     	; 0xab2 <display_umidity_level_title+0x28>
     ac2:	09 c0       	rjmp	.+18     	; 0xad6 <display_umidity_level_title+0x4c>
	
	put_Char_LCD_Display(0xC0, 0);
	put_string(SENSOR_2_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     ad0:	21 97       	sbiw	r28, 0x01	; 1
		put_Char_LCD_Display(' ', 1);
	}
	
	put_Char_LCD_Display(0xC0, 0);
	put_string(SENSOR_2_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
     ad2:	c1 f7       	brne	.-16     	; 0xac4 <display_umidity_level_title+0x3a>
     ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <display_umidity_level_title+0x66>
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
	}
	
	put_Char_LCD_Display(0xC0, 0);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 ec       	ldi	r24, 0xC0	; 192
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(SENSOR_2_TITLE);
     ae2:	8d e6       	ldi	r24, 0x6D	; 109
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     aea:	c5 e0       	ldi	r28, 0x05	; 5
     aec:	d0 e0       	ldi	r29, 0x00	; 0
     aee:	ea cf       	rjmp	.-44     	; 0xac4 <display_umidity_level_title+0x3a>
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <display_error_title>:

// displays error title
void display_error_title()
{	
	put_Char_LCD_Display(0x01,0); // clear LCD
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 e8       	ldi	r24, 0x80	; 128
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(ERROR_TITLE);
     b0e:	88 e7       	ldi	r24, 0x78	; 120
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     b16:	08 95       	ret

00000b18 <display_temperature_title>:
}

// displays temperature title
void display_temperature_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e8       	ldi	r24, 0x80	; 128
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(TEMPERATURE_TITLE);
     b30:	89 e8       	ldi	r24, 0x89	; 137
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	put_Char_LCD_Display(0xC0 + 4, 0);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	84 ec       	ldi	r24, 0xC4	; 196
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(0xDF, 1);
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	8f ed       	ldi	r24, 0xDF	; 223
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('C', 1);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	83 e4       	ldi	r24, 0x43	; 67
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     b5c:	08 95       	ret

00000b5e <display_battery_title>:
}

// displays battery level title
void display_battery_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(BATTERY_TITLE);
     b76:	85 e9       	ldi	r24, 0x95	; 149
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     b7e:	08 95       	ret

00000b80 <display_error>:
}

void display_error()
{
	put_Char_LCD_Display(0xC0, 0);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	80 ec       	ldi	r24, 0xC0	; 192
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(ERROR);
     b8c:	81 e4       	ldi	r24, 0x41	; 65
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     b94:	08 95       	ret

00000b96 <display_tank_water_level_title>:
}

// display tank water level title
void display_tank_water_level_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0); // go to row 0, column 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(TANK_WATER_LEVEL_TITLE);
     bae:	83 ea       	ldi	r24, 0xA3	; 163
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     bb6:	08 95       	ret

00000bb8 <display_tank_water_level>:
}

void display_tank_water_level()
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
	init_custom_character_level(WATER_LEVEL);
     bbc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <WATER_LEVEL>
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 8f 02 	call	0x51e	; 0x51e <init_custom_character_level>
	put_Char_LCD_Display(0xC0, 0);
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 ec       	ldi	r24, 0xC0	; 192
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_START, 1);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     bde:	c8 e0       	ldi	r28, 0x08	; 8
     be0:	d0 e0       	ldi	r29, 0x00	; 0
	for(short i = 0; i < 8; i++)
	{
		put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_WATER_LEVEL, 1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
     bee:	21 97       	sbiw	r28, 0x01	; 1
void display_tank_water_level()
{
	init_custom_character_level(WATER_LEVEL);
	put_Char_LCD_Display(0xC0, 0);
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_START, 1);
	for(short i = 0; i < 8; i++)
     bf0:	c1 f7       	brne	.-16     	; 0xbe2 <display_tank_water_level+0x2a>
	{
		put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_WATER_LEVEL, 1);
	}
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_END, 1);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <humidity_level_int_value_to_string>:

// self made itoa
const char * humidity_level_int_value_to_string(int value)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	9c 01       	movw	r18, r24
	char digit_3 = '\0';
	char digit_4 = '\0';
	
	static char humidity_level[4];
	
	first_digit = (value/100)%10;
     c0a:	64 e6       	ldi	r22, 0x64	; 100
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     c12:	cb 01       	movw	r24, r22
     c14:	ca e0       	ldi	r28, 0x0A	; 10
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	be 01       	movw	r22, r28
     c1a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     c1e:	fc 01       	movw	r30, r24
	second_digit = (value/10)%10;
     c20:	c9 01       	movw	r24, r18
     c22:	be 01       	movw	r22, r28
     c24:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     c28:	38 2f       	mov	r19, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	be 01       	movw	r22, r28
     c2e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     c32:	28 2f       	mov	r18, r24
	third_digit = value%10;
	
	if(first_digit == 0)
     c34:	30 97       	sbiw	r30, 0x00	; 0
     c36:	69 f4       	brne	.+26     	; 0xc52 <humidity_level_int_value_to_string+0x4e>
	{
		if(second_digit == 0)
     c38:	89 2b       	or	r24, r25
     c3a:	29 f4       	brne	.+10     	; 0xc46 <humidity_level_int_value_to_string+0x42>
		{
			digit_1 = third_digit + '0';
     c3c:	90 e3       	ldi	r25, 0x30	; 48
     c3e:	93 0f       	add	r25, r19
	int second_digit;
	int third_digit;
	
	char digit_1 = '\0';
	char digit_2 = '\0';
	char digit_3 = '\0';
     c40:	30 e0       	ldi	r19, 0x00	; 0
	if(first_digit == 0)
	{
		if(second_digit == 0)
		{
			digit_1 = third_digit + '0';
			digit_2 = '\0';
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	0a c0       	rjmp	.+20     	; 0xc5a <humidity_level_int_value_to_string+0x56>
		}
		else
		{
			digit_1 = second_digit + '0';
     c46:	90 e3       	ldi	r25, 0x30	; 48
     c48:	92 0f       	add	r25, r18
			digit_2 = third_digit + '0';
     c4a:	20 e3       	ldi	r18, 0x30	; 48
     c4c:	23 0f       	add	r18, r19
			digit_3 = '\0';
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <humidity_level_int_value_to_string+0x56>
		}
	}
	else
	{
		digit_1 = first_digit + '0';
     c52:	90 e3       	ldi	r25, 0x30	; 48
     c54:	9e 0f       	add	r25, r30
		digit_2 = second_digit + '0';
     c56:	20 5d       	subi	r18, 0xD0	; 208
		digit_3 = third_digit + '0';
     c58:	30 5d       	subi	r19, 0xD0	; 208
		digit_4 = '\0';
	}
	
	humidity_level[0] = digit_1;
     c5a:	e2 e2       	ldi	r30, 0x22	; 34
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	90 83       	st	Z, r25
	humidity_level[1] = digit_2;
     c60:	21 83       	std	Z+1, r18	; 0x01
	humidity_level[2] = digit_3;
     c62:	32 83       	std	Z+2, r19	; 0x02
	humidity_level[3] = digit_4;
     c64:	13 82       	std	Z+3, r1	; 0x03
	
	return humidity_level;
}
     c66:	cf 01       	movw	r24, r30
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <display_umidity_level_values>:
void display_umidity_level_values()
{
	int sensor_1_display_offset = strlen(SENSOR_1_TITLE);
	int sensor_2_display_offset = strlen(SENSOR_2_TITLE);
	
	put_Char_LCD_Display(0x80 + sensor_1_display_offset, 0);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	8a e8       	ldi	r24, 0x8A	; 138
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(humidity_level_sensor_1));
     c7a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <humidity_level_sensor_1>
     c7e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <humidity_level_sensor_1+0x1>
     c82:	0e 94 02 06 	call	0xc04	; 0xc04 <humidity_level_int_value_to_string>
     c86:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
     c8a:	84 eb       	ldi	r24, 0xB4	; 180
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	put_string("  ");
     c92:	86 eb       	ldi	r24, 0xB6	; 182
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	
	put_Char_LCD_Display(0xC0 + sensor_2_display_offset, 0);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	8a ec       	ldi	r24, 0xCA	; 202
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(humidity_level_sensor_2));
     ca6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <humidity_level_sensor_2>
     caa:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <humidity_level_sensor_2+0x1>
     cae:	0e 94 02 06 	call	0xc04	; 0xc04 <humidity_level_int_value_to_string>
     cb2:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
     cb6:	84 eb       	ldi	r24, 0xB4	; 180
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	put_string("  ");
     cbe:	86 eb       	ldi	r24, 0xB6	; 182
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     cc6:	08 95       	ret

00000cc8 <display_temperature_values>:
}

void display_temperature_values()
{
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
	put_Char_LCD_Display(0xC0, 0);
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 ec       	ldi	r24, 0xC0	; 192
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	//put_Char_LCD_Display((TEMPERATURE / 10000)%10 + '0', 1);
	put_Char_LCD_Display((TEMPERATURE / 1000)%10 + '0', 1);
     cdc:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <TEMPERATURE>
     ce0:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <TEMPERATURE+0x1>
     ce4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TEMPERATURE+0x2>
     ce8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <TEMPERATURE+0x3>
     cec:	28 ee       	ldi	r18, 0xE8	; 232
     cee:	33 e0       	ldi	r19, 0x03	; 3
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     cf8:	0f 2e       	mov	r0, r31
     cfa:	fa e0       	ldi	r31, 0x0A	; 10
     cfc:	cf 2e       	mov	r12, r31
     cfe:	d1 2c       	mov	r13, r1
     d00:	e1 2c       	mov	r14, r1
     d02:	f1 2c       	mov	r15, r1
     d04:	f0 2d       	mov	r31, r0
     d06:	ca 01       	movw	r24, r20
     d08:	b9 01       	movw	r22, r18
     d0a:	a7 01       	movw	r20, r14
     d0c:	96 01       	movw	r18, r12
     d0e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     d12:	cb 01       	movw	r24, r22
     d14:	c0 96       	adiw	r24, 0x30	; 48
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display((TEMPERATURE / 100)%10 + '0', 1);
     d1e:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <TEMPERATURE>
     d22:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <TEMPERATURE+0x1>
     d26:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TEMPERATURE+0x2>
     d2a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <TEMPERATURE+0x3>
     d2e:	24 e6       	ldi	r18, 0x64	; 100
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     d3a:	ca 01       	movw	r24, r20
     d3c:	b9 01       	movw	r22, r18
     d3e:	a7 01       	movw	r20, r14
     d40:	96 01       	movw	r18, r12
     d42:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     d46:	cb 01       	movw	r24, r22
     d48:	c0 96       	adiw	r24, 0x30	; 48
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('.', 1);
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	8e e2       	ldi	r24, 0x2E	; 46
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display((TEMPERATURE / 10)%10 + '0', 1);
     d5e:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <TEMPERATURE>
     d62:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <TEMPERATURE+0x1>
     d66:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <TEMPERATURE+0x2>
     d6a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <TEMPERATURE+0x3>
     d6e:	a7 01       	movw	r20, r14
     d70:	96 01       	movw	r18, r12
     d72:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     d76:	ca 01       	movw	r24, r20
     d78:	b9 01       	movw	r22, r18
     d7a:	a7 01       	movw	r20, r14
     d7c:	96 01       	movw	r18, r12
     d7e:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divmodsi4>
     d82:	cb 01       	movw	r24, r22
     d84:	c0 96       	adiw	r24, 0x30	; 48
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	//put_Char_LCD_Display(TEMPERATURE % 10 + '0', 1);
}
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	cf 90       	pop	r12
     d96:	08 95       	ret

00000d98 <display_clock_title>:

void display_clock_title()
{	
	put_Char_LCD_Display(0x01,0);
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(CLOCK_DATE_TITLE);
     db0:	89 eb       	ldi	r24, 0xB9	; 185
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	80 ec       	ldi	r24, 0xC0	; 192
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(CLOCK_TIME_TITLE);
     dc4:	8e eb       	ldi	r24, 0xBE	; 190
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     dcc:	08 95       	ret

00000dce <display_initializing_message>:
}

void display_initializing_message()
{
	put_Char_LCD_Display(0x01,0);
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e8       	ldi	r24, 0x80	; 128
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string("Initializing...");
     de6:	83 ec       	ldi	r24, 0xC3	; 195
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     dee:	08 95       	ret

00000df0 <display_clock_values>:
}

void display_clock_values()
{
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
	int clock_date_display_offset = strlen(CLOCK_DATE_TITLE);
	int clock_time_display_offset = strlen(CLOCK_TIME_TITLE) + 1;
	
	put_Char_LCD_Display(0x80 + clock_date_display_offset, 0);
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	84 e8       	ldi	r24, 0x84	; 132
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_string(" 01 MAY 2017");
     e04:	83 ed       	ldi	r24, 0xD3	; 211
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
	
	put_Char_LCD_Display(0xC0 + clock_time_display_offset, 0);
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	85 ec       	ldi	r24, 0xC5	; 197
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
     e18:	c6 e3       	ldi	r28, 0x36	; 54
     e1a:	d1 e0       	ldi	r29, 0x01	; 1
     e1c:	88 81       	ld	r24, Y
     e1e:	99 81       	ldd	r25, Y+1	; 0x01
     e20:	0a e0       	ldi	r16, 0x0A	; 10
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	b8 01       	movw	r22, r16
     e26:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     e2a:	cb 01       	movw	r24, r22
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	c0 96       	adiw	r24, 0x30	; 48
     e32:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
     e36:	88 81       	ld	r24, Y
     e38:	99 81       	ldd	r25, Y+1	; 0x01
     e3a:	b8 01       	movw	r22, r16
     e3c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	c0 96       	adiw	r24, 0x30	; 48
     e46:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8a e3       	ldi	r24, 0x3A	; 58
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	b8 01       	movw	r22, r16
     e5c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     e60:	cb 01       	movw	r24, r22
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	c0 96       	adiw	r24, 0x30	; 48
     e68:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	b8 01       	movw	r22, r16
     e72:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	c0 96       	adiw	r24, 0x30	; 48
     e7c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	8a e3       	ldi	r24, 0x3A	; 58
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	b8 01       	movw	r22, r16
     e92:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     e96:	cb 01       	movw	r24, r22
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	c0 96       	adiw	r24, 0x30	; 48
     e9e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	b8 01       	movw	r22, r16
     ea8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__divmodhi4>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	c0 96       	adiw	r24, 0x30	; 48
     eb2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <display_values>:

void display_values()
{
	switch(MENU)
     ec0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <MENU>
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	61 f0       	breq	.+24     	; 0xee0 <display_values+0x20>
     ec8:	28 f4       	brcc	.+10     	; 0xed4 <display_values+0x14>
     eca:	88 23       	and	r24, r24
     ecc:	e9 f0       	breq	.+58     	; 0xf08 <display_values+0x48>
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	c1 f0       	breq	.+48     	; 0xf02 <display_values+0x42>
     ed2:	20 c0       	rjmp	.+64     	; 0xf14 <display_values+0x54>
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	51 f0       	breq	.+20     	; 0xeec <display_values+0x2c>
     ed8:	d0 f0       	brcs	.+52     	; 0xf0e <display_values+0x4e>
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	21 f0       	breq	.+8      	; 0xee6 <display_values+0x26>
     ede:	1a c0       	rjmp	.+52     	; 0xf14 <display_values+0x54>
	{
		case CLOCK_MENU:
		{
			display_clock_values();
     ee0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <display_clock_values>
			break;
     ee4:	08 95       	ret
		}
		case TEMPERATURE_MENU:
		{
			display_temperature_values();
     ee6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <display_temperature_values>
			break;
     eea:	08 95       	ret
		}
		case BATTERY_LEVEL_MENU:
		{
			put_Char_LCD_Display(0xC0, 0);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_string("battery");
     ef8:	80 ee       	ldi	r24, 0xE0	; 224
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
			break;
     f00:	08 95       	ret
		}
		case SENSOR_VALUES_MENU:
		{
			display_umidity_level_values();
     f02:	0e 94 37 06 	call	0xc6e	; 0xc6e <display_umidity_level_values>
			break;
     f06:	08 95       	ret
		}
		case ERROR_MENU:
		{
			display_error();
     f08:	0e 94 c0 05 	call	0xb80	; 0xb80 <display_error>
			break;
     f0c:	08 95       	ret
		}
		case TANK_WATER_LEVEL_MENU:
		{
			display_tank_water_level();
     f0e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <display_tank_water_level>
			break;
     f12:	08 95       	ret
		}
		default:
		{
			put_Char_LCD_Display(0xC0, 0);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <put_Char_LCD_Display>
			put_string("fatal error");
     f20:	88 ee       	ldi	r24, 0xE8	; 232
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 20 05 	call	0xa40	; 0xa40 <put_string>
     f28:	08 95       	ret

00000f2a <init_UART>:

unsigned char received_command;

void init_UART(void)
{
	UCSRB = (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
     f2a:	88 e1       	ldi	r24, 0x18	; 24
     f2c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
     f2e:	86 e8       	ldi	r24, 0x86	; 134
     f30:	80 bd       	out	0x20, r24	; 32

	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
     f32:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
     f34:	87 e6       	ldi	r24, 0x67	; 103
     f36:	89 b9       	out	0x09, r24	; 9

	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
     f38:	57 9a       	sbi	0x0a, 7	; 10
     f3a:	08 95       	ret

00000f3c <__vector_13>:
}

ISR(USART_RXC_vect)
{
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	8f 93       	push	r24
	received_command = UDR; // Fetch the received byte value into the variable "ByteReceived"
     f48:	8c b1       	in	r24, 0x0c	; 12
     f4a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <received_command>
	//UDR = received_command; // Echo back the received byte back to the computer
}
     f4e:	8f 91       	pop	r24
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <send_uart_8bits_data>:

void send_uart_8bits_data(unsigned char ID, unsigned char data)
{
	// mark start of transmission
	UDR = 0;
     f5a:	1c b8       	out	0x0c, r1	; 12
     f5c:	ef ed       	ldi	r30, 0xDF	; 223
     f5e:	fe e2       	ldi	r31, 0x2E	; 46
     f60:	31 97       	sbiw	r30, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <send_uart_8bits_data+0x6>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <send_uart_8bits_data+0xc>
     f66:	00 00       	nop
	_delay_ms(UART_DELAY);
	UDR = 0;
     f68:	1c b8       	out	0x0c, r1	; 12
     f6a:	ef ed       	ldi	r30, 0xDF	; 223
     f6c:	fe e2       	ldi	r31, 0x2E	; 46
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <send_uart_8bits_data+0x14>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <send_uart_8bits_data+0x1a>
     f74:	00 00       	nop
	_delay_ms(UART_DELAY);
	
	UDR = ID;
     f76:	8c b9       	out	0x0c, r24	; 12
     f78:	8f ed       	ldi	r24, 0xDF	; 223
     f7a:	9e e2       	ldi	r25, 0x2E	; 46
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <send_uart_8bits_data+0x22>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <send_uart_8bits_data+0x28>
     f82:	00 00       	nop
	_delay_ms(UART_DELAY);
	UDR = data;
     f84:	6c b9       	out	0x0c, r22	; 12
     f86:	ef ed       	ldi	r30, 0xDF	; 223
     f88:	fe e2       	ldi	r31, 0x2E	; 46
     f8a:	31 97       	sbiw	r30, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <send_uart_8bits_data+0x30>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <send_uart_8bits_data+0x36>
     f90:	00 00       	nop
     f92:	08 95       	ret

00000f94 <init_water_pump_control>:
#include <avr/io.h>
#include "IPX_WaterPump.h"

void init_water_pump_control()
{
	WATER_PUMP_DDR |= 1 << WATER_PUMP_PIN;
     f94:	8d 9a       	sbi	0x11, 5	; 17
	WATER_PUMP_TURN_OFF;
     f96:	95 98       	cbi	0x12, 5	; 18
     f98:	08 95       	ret

00000f9a <init_uC>:
	init_globals();
}

void init_uC(void)
{
	DDRB |= (1 << 0);
     f9a:	b8 9a       	sbi	0x17, 0	; 23
     f9c:	08 95       	ret

00000f9e <init_globals>:
}

void init_globals()
{
	MENUs[0] = ERROR_MENU;
     f9e:	e6 e2       	ldi	r30, 0x26	; 38
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	10 82       	st	Z, r1
	MENUs[1] = SENSOR_VALUES_MENU;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	81 83       	std	Z+1, r24	; 0x01
	MENUs[2] = CLOCK_MENU;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	82 83       	std	Z+2, r24	; 0x02
	MENUs[3] = TANK_WATER_LEVEL_MENU;
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	83 83       	std	Z+3, r24	; 0x03
	MENUs[4] = BATTERY_LEVEL_MENU;
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	84 83       	std	Z+4, r24	; 0x04
	MENUs[5] = TEMPERATURE_MENU;
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	85 83       	std	Z+5, r24	; 0x05
	MENUs[6] = UNDEFINED_MENU;
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	86 83       	std	Z+6, r24	; 0x06
	MENUs[7] = UNDEFINED_MENU;
     fbc:	87 83       	std	Z+7, r24	; 0x07
	MENUs[8] = UNDEFINED_MENU;
     fbe:	80 87       	std	Z+8, r24	; 0x08
	MENUs[9] = UNDEFINED_MENU;
     fc0:	81 87       	std	Z+9, r24	; 0x09
	
	strcpy(ERROR, ERROR_NO_ERROR);
     fc2:	8a e0       	ldi	r24, 0x0A	; 10
     fc4:	e4 ef       	ldi	r30, 0xF4	; 244
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	a1 e4       	ldi	r26, 0x41	; 65
     fca:	b1 e0       	ldi	r27, 0x01	; 1
     fcc:	01 90       	ld	r0, Z+
     fce:	0d 92       	st	X+, r0
     fd0:	8a 95       	dec	r24
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <init_globals+0x2e>
	
	humidity_level_sensor_1 = 0;
     fd4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <humidity_level_sensor_1+0x1>
     fd8:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <humidity_level_sensor_1>
	humidity_level_sensor_2 = 0;
     fdc:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <humidity_level_sensor_2+0x1>
     fe0:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <humidity_level_sensor_2>
	WATER_LEVEL = 0;
     fe4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <WATER_LEVEL>
	TEMPERATURE = 27;
     fe8:	8b e1       	ldi	r24, 0x1B	; 27
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <TEMPERATURE>
     ff4:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <TEMPERATURE+0x1>
     ff8:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <TEMPERATURE+0x2>
     ffc:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <TEMPERATURE+0x3>
	WATER_NEEDED = FALSE;
    1000:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <GLOBAL_BOOL>
	WATER_PUMP_IS_ON = FALSE;
    1004:	8b 7f       	andi	r24, 0xFB	; 251
    1006:	87 7f       	andi	r24, 0xF7	; 247
    1008:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <GLOBAL_BOOL>
    100c:	08 95       	ret

0000100e <general_init>:
	}
}

void general_init()
{
	init_uC();
    100e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <init_uC>
	init_globals();
    1012:	0e 94 cf 07 	call	0xf9e	; 0xf9e <init_globals>
    1016:	08 95       	ret

00001018 <main>:
void init_globals();
void init_uC(void);

int main(void)
{
	general_init();
    1018:	0e 94 07 08 	call	0x100e	; 0x100e <general_init>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	83 e2       	ldi	r24, 0x23	; 35
    1020:	94 ef       	ldi	r25, 0xF4	; 244
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	80 40       	sbci	r24, 0x00	; 0
    1026:	90 40       	sbci	r25, 0x00	; 0
    1028:	e1 f7       	brne	.-8      	; 0x1022 <main+0xa>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <main+0x14>
    102c:	00 00       	nop
	
	_delay_ms(5000);
	
	init_UART();
    102e:	0e 94 95 07 	call	0xf2a	; 0xf2a <init_UART>
	init_interrupt_200ms();
    1032:	0e 94 78 01 	call	0x2f0	; 0x2f0 <init_interrupt_200ms>
	ADC_Init();
    1036:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_Init>
	init_LCD_Display();
    103a:	0e 94 c1 04 	call	0x982	; 0x982 <init_LCD_Display>
    103e:	2f ef       	ldi	r18, 0xFF	; 255
    1040:	89 e6       	ldi	r24, 0x69	; 105
    1042:	98 e1       	ldi	r25, 0x18	; 24
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	90 40       	sbci	r25, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <main+0x2c>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <main+0x36>
    104e:	00 00       	nop
	_delay_ms(500);
	init_ipx_water_level_sensor();
    1050:	0e 94 bc 08 	call	0x1178	; 0x1178 <init_ipx_water_level_sensor>
	init_buttons();
    1054:	0e 94 1a 01 	call	0x234	; 0x234 <init_buttons>
	init_water_pump_control();
    1058:	0e 94 ca 07 	call	0xf94	; 0xf94 <init_water_pump_control>
	
	
	
	display_initializing_message();
    105c:	0e 94 e7 06 	call	0xdce	; 0xdce <display_initializing_message>
    1060:	2f ef       	ldi	r18, 0xFF	; 255
    1062:	83 ed       	ldi	r24, 0xD3	; 211
    1064:	90 e3       	ldi	r25, 0x30	; 48
    1066:	21 50       	subi	r18, 0x01	; 1
    1068:	80 40       	sbci	r24, 0x00	; 0
    106a:	90 40       	sbci	r25, 0x00	; 0
    106c:	e1 f7       	brne	.-8      	; 0x1066 <main+0x4e>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <main+0x58>
    1070:	00 00       	nop
	_delay_ms(1000);
	change_menu(SENSOR_VALUES_MENU);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
	sei();
    1078:	78 94       	sei
	
    while (1) 
    {
	}
    107a:	ff cf       	rjmp	.-2      	; 0x107a <main+0x62>

0000107c <set_menu_title>:
	_delay_ms(15);
}

void set_menu_title(char menu)
{
	switch(menu)
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	c1 f0       	breq	.+48     	; 0x10b0 <set_menu_title+0x34>
    1080:	28 f4       	brcc	.+10     	; 0x108c <set_menu_title+0x10>
    1082:	88 23       	and	r24, r24
    1084:	49 f0       	breq	.+18     	; 0x1098 <set_menu_title+0x1c>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	81 f0       	breq	.+32     	; 0x10aa <set_menu_title+0x2e>
    108a:	18 c0       	rjmp	.+48     	; 0x10bc <set_menu_title+0x40>
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	51 f0       	breq	.+20     	; 0x10a4 <set_menu_title+0x28>
    1090:	90 f0       	brcs	.+36     	; 0x10b6 <set_menu_title+0x3a>
    1092:	85 30       	cpi	r24, 0x05	; 5
    1094:	21 f0       	breq	.+8      	; 0x109e <set_menu_title+0x22>
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <set_menu_title+0x40>
	{
		case ERROR_MENU:
		{
			display_error_title();
    1098:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <display_error_title>
			break;
    109c:	08 95       	ret
		}
		case TEMPERATURE_MENU:
		{
			display_temperature_title();
    109e:	0e 94 8c 05 	call	0xb18	; 0xb18 <display_temperature_title>
			break;
    10a2:	08 95       	ret
		}
		case BATTERY_LEVEL_MENU:
		{
			display_battery_title();
    10a4:	0e 94 af 05 	call	0xb5e	; 0xb5e <display_battery_title>
			break;
    10a8:	08 95       	ret
		}
		case SENSOR_VALUES_MENU:
		{
			display_umidity_level_title();
    10aa:	0e 94 45 05 	call	0xa8a	; 0xa8a <display_umidity_level_title>
			break;
    10ae:	08 95       	ret
		}
		case CLOCK_MENU:
		{
			display_clock_title();
    10b0:	0e 94 cc 06 	call	0xd98	; 0xd98 <display_clock_title>
			break;
    10b4:	08 95       	ret
		}
		case TANK_WATER_LEVEL_MENU:
		{
			display_tank_water_level_title();
    10b6:	0e 94 cb 05 	call	0xb96	; 0xb96 <display_tank_water_level_title>
			break;
    10ba:	08 95       	ret
		}
		default:
		{
			strcpy(ERROR, ERROR_WRONG_MENU_TITLE);
    10bc:	81 e1       	ldi	r24, 0x11	; 17
    10be:	ee ef       	ldi	r30, 0xFE	; 254
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	a1 e4       	ldi	r26, 0x41	; 65
    10c4:	b1 e0       	ldi	r27, 0x01	; 1
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	8a 95       	dec	r24
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <set_menu_title+0x4a>
			display_error_title();
    10ce:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <display_error_title>
    10d2:	08 95       	ret

000010d4 <change_menu>:
	}
}

void change_menu(char menu)
{
	if(menu == MENU)
    10d4:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <MENU>
    10d8:	89 17       	cp	r24, r25
    10da:	51 f1       	breq	.+84     	; 0x1130 <change_menu+0x5c>
	
	short int i;
	char menu_ok = FALSE;
	for(i = 0;i < 10; i++)
	{
		if (menu == MENUs[i])
    10dc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <MENUs>
    10e0:	98 17       	cp	r25, r24
    10e2:	39 f0       	breq	.+14     	; 0x10f2 <change_menu+0x1e>
    10e4:	e7 e2       	ldi	r30, 0x27	; 39
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	20 e3       	ldi	r18, 0x30	; 48
    10ea:	31 e0       	ldi	r19, 0x01	; 1
    10ec:	91 91       	ld	r25, Z+
    10ee:	98 13       	cpse	r25, r24
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <change_menu+0x28>
		{
			menu_ok = TRUE;
			MENU = MENUs[i];
    10f2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <MENU>
			break;
		}
	}
	if(menu_ok)
	{
		set_menu_title(MENU);
    10f6:	0e 94 3e 08 	call	0x107c	; 0x107c <set_menu_title>
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <change_menu+0x30>
		return;
	}
	
	short int i;
	char menu_ok = FALSE;
	for(i = 0;i < 10; i++)
    10fc:	e2 17       	cp	r30, r18
    10fe:	f3 07       	cpc	r31, r19
    1100:	a9 f7       	brne	.-22     	; 0x10ec <change_menu+0x18>
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <change_menu+0x3e>
    1104:	8f e5       	ldi	r24, 0x5F	; 95
    1106:	9a ee       	ldi	r25, 0xEA	; 234
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <change_menu+0x34>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <change_menu+0x3a>
    110e:	00 00       	nop
    1110:	08 95       	ret
	{
		set_menu_title(MENU);
	}
	else
	{
		strcpy(ERROR, ERROR_WRONG_MENU);
    1112:	8b e0       	ldi	r24, 0x0B	; 11
    1114:	ef e0       	ldi	r30, 0x0F	; 15
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	a1 e4       	ldi	r26, 0x41	; 65
    111a:	b1 e0       	ldi	r27, 0x01	; 1
    111c:	01 90       	ld	r0, Z+
    111e:	0d 92       	st	X+, r0
    1120:	8a 95       	dec	r24
    1122:	e1 f7       	brne	.-8      	; 0x111c <change_menu+0x48>
		MENU = ERROR_MENU;
    1124:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <MENU>
		set_menu_title(MENU);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	0e 94 3e 08 	call	0x107c	; 0x107c <set_menu_title>
    112e:	ea cf       	rjmp	.-44     	; 0x1104 <change_menu+0x30>
    1130:	08 95       	ret

00001132 <next_menu>:
#include "IPX_LCD_Display.h"
#include "Menu.h"

void next_menu()
{
	switch(MENU)
    1132:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <MENU>
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	99 f0       	breq	.+38     	; 0x1160 <next_menu+0x2e>
    113a:	28 f4       	brcc	.+10     	; 0x1146 <next_menu+0x14>
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	41 f0       	breq	.+16     	; 0x1150 <next_menu+0x1e>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	51 f0       	breq	.+20     	; 0x1158 <next_menu+0x26>
    1144:	08 95       	ret
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	79 f0       	breq	.+30     	; 0x1168 <next_menu+0x36>
    114a:	85 30       	cpi	r24, 0x05	; 5
    114c:	89 f0       	breq	.+34     	; 0x1170 <next_menu+0x3e>
    114e:	08 95       	ret
	{
		case SENSOR_VALUES_MENU:
		{
			change_menu(CLOCK_MENU);
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
			break;
    1156:	08 95       	ret
		}
		
		case CLOCK_MENU:
		{
			change_menu(TANK_WATER_LEVEL_MENU);
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
			break;
    115e:	08 95       	ret
		}
		
		case TANK_WATER_LEVEL_MENU:
		{
			change_menu(BATTERY_LEVEL_MENU);
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
			break;
    1166:	08 95       	ret
		}

		case BATTERY_LEVEL_MENU:
		{
			change_menu(TEMPERATURE_MENU);
    1168:	85 e0       	ldi	r24, 0x05	; 5
    116a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
			break;
    116e:	08 95       	ret
		}
		case TEMPERATURE_MENU:
		{
			change_menu(SENSOR_VALUES_MENU);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <change_menu>
    1176:	08 95       	ret

00001178 <init_ipx_water_level_sensor>:


void init_ipx_water_level_sensor()
{
	// set pins PB2-PB7 as input pins
	WATER_LEVEL_SENSOR_DDR &= ~((1 << WATER_SENSOR_LEVEL_1) | (1 << WATER_SENSOR_LEVEL_2) | (1 << WATER_SENSOR_LEVEL_3) | (1 << WATER_SENSOR_LEVEL_4) | (1 << WATER_SENSOR_LEVEL_5) | (1 << WATER_SENSOR_LEVEL_6));
    1178:	87 b3       	in	r24, 0x17	; 23
    117a:	83 70       	andi	r24, 0x03	; 3
    117c:	87 bb       	out	0x17, r24	; 23
	// activate pull up resistor
	WATER_LEVEL_SENSOR_PORT |= (1 << WATER_SENSOR_LEVEL_1) | (1 << WATER_SENSOR_LEVEL_2) | (1 << WATER_SENSOR_LEVEL_3) | (1 << WATER_SENSOR_LEVEL_4) | (1 << WATER_SENSOR_LEVEL_5) | (1 << WATER_SENSOR_LEVEL_6);
    117e:	88 b3       	in	r24, 0x18	; 24
    1180:	8c 6f       	ori	r24, 0xFC	; 252
    1182:	88 bb       	out	0x18, r24	; 24
    1184:	08 95       	ret

00001186 <read_tank_water_level>:

void read_tank_water_level()
{
	unsigned char level = 1;
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_6) & 1;
	if(level == 0)
    1186:	b2 99       	sbic	0x16, 2	; 22
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <read_tank_water_level+0xc>
	{
		WATER_LEVEL = 6;
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    1190:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_5) & 1;
	if(level == 0)
    1192:	b3 99       	sbic	0x16, 3	; 22
    1194:	04 c0       	rjmp	.+8      	; 0x119e <read_tank_water_level+0x18>
	{
		WATER_LEVEL = 5;
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    119c:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_4) & 1;
	if(level == 0)
    119e:	b4 99       	sbic	0x16, 4	; 22
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <read_tank_water_level+0x24>
	{
		WATER_LEVEL = 4;
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    11a8:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_3) & 1;
	if(level == 0)
    11aa:	b5 99       	sbic	0x16, 5	; 22
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <read_tank_water_level+0x30>
	{
		WATER_LEVEL = 3;
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    11b4:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_2) & 1;
	if(level == 0)
    11b6:	b6 99       	sbic	0x16, 6	; 22
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <read_tank_water_level+0x3c>
	{
		WATER_LEVEL = 2;
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    11c0:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_1) & 1;
	if(level == 0)
    11c2:	b7 99       	sbic	0x16, 7	; 22
    11c4:	04 c0       	rjmp	.+8      	; 0x11ce <read_tank_water_level+0x48>
	{
		WATER_LEVEL = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WATER_LEVEL>
		return;
    11cc:	08 95       	ret
	}
	WATER_LEVEL = 0;
    11ce:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <WATER_LEVEL>
    11d2:	08 95       	ret

000011d4 <__divsf3>:
    11d4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__divsf3x>
    11d8:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
    11dc:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
    11e0:	58 f0       	brcs	.+22     	; 0x11f8 <__divsf3+0x24>
    11e2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
    11e6:	40 f0       	brcs	.+16     	; 0x11f8 <__divsf3+0x24>
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <__divsf3+0x20>
    11ea:	5f 3f       	cpi	r21, 0xFF	; 255
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <__divsf3+0x24>
    11ee:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>
    11f2:	51 11       	cpse	r21, r1
    11f4:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    11f8:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_nan>

000011fc <__divsf3x>:
    11fc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
    1200:	68 f3       	brcs	.-38     	; 0x11dc <__divsf3+0x8>

00001202 <__divsf3_pse>:
    1202:	99 23       	and	r25, r25
    1204:	b1 f3       	breq	.-20     	; 0x11f2 <__divsf3+0x1e>
    1206:	55 23       	and	r21, r21
    1208:	91 f3       	breq	.-28     	; 0x11ee <__divsf3+0x1a>
    120a:	95 1b       	sub	r25, r21
    120c:	55 0b       	sbc	r21, r21
    120e:	bb 27       	eor	r27, r27
    1210:	aa 27       	eor	r26, r26
    1212:	62 17       	cp	r22, r18
    1214:	73 07       	cpc	r23, r19
    1216:	84 07       	cpc	r24, r20
    1218:	38 f0       	brcs	.+14     	; 0x1228 <__divsf3_pse+0x26>
    121a:	9f 5f       	subi	r25, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	44 1f       	adc	r20, r20
    1224:	aa 1f       	adc	r26, r26
    1226:	a9 f3       	breq	.-22     	; 0x1212 <__divsf3_pse+0x10>
    1228:	35 d0       	rcall	.+106    	; 0x1294 <__divsf3_pse+0x92>
    122a:	0e 2e       	mov	r0, r30
    122c:	3a f0       	brmi	.+14     	; 0x123c <__divsf3_pse+0x3a>
    122e:	e0 e8       	ldi	r30, 0x80	; 128
    1230:	32 d0       	rcall	.+100    	; 0x1296 <__divsf3_pse+0x94>
    1232:	91 50       	subi	r25, 0x01	; 1
    1234:	50 40       	sbci	r21, 0x00	; 0
    1236:	e6 95       	lsr	r30
    1238:	00 1c       	adc	r0, r0
    123a:	ca f7       	brpl	.-14     	; 0x122e <__divsf3_pse+0x2c>
    123c:	2b d0       	rcall	.+86     	; 0x1294 <__divsf3_pse+0x92>
    123e:	fe 2f       	mov	r31, r30
    1240:	29 d0       	rcall	.+82     	; 0x1294 <__divsf3_pse+0x92>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	bb 1f       	adc	r27, r27
    124a:	26 17       	cp	r18, r22
    124c:	37 07       	cpc	r19, r23
    124e:	48 07       	cpc	r20, r24
    1250:	ab 07       	cpc	r26, r27
    1252:	b0 e8       	ldi	r27, 0x80	; 128
    1254:	09 f0       	breq	.+2      	; 0x1258 <__divsf3_pse+0x56>
    1256:	bb 0b       	sbc	r27, r27
    1258:	80 2d       	mov	r24, r0
    125a:	bf 01       	movw	r22, r30
    125c:	ff 27       	eor	r31, r31
    125e:	93 58       	subi	r25, 0x83	; 131
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	3a f0       	brmi	.+14     	; 0x1272 <__divsf3_pse+0x70>
    1264:	9e 3f       	cpi	r25, 0xFE	; 254
    1266:	51 05       	cpc	r21, r1
    1268:	78 f0       	brcs	.+30     	; 0x1288 <__divsf3_pse+0x86>
    126a:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>
    126e:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    1272:	5f 3f       	cpi	r21, 0xFF	; 255
    1274:	e4 f3       	brlt	.-8      	; 0x126e <__divsf3_pse+0x6c>
    1276:	98 3e       	cpi	r25, 0xE8	; 232
    1278:	d4 f3       	brlt	.-12     	; 0x126e <__divsf3_pse+0x6c>
    127a:	86 95       	lsr	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b7 95       	ror	r27
    1282:	f7 95       	ror	r31
    1284:	9f 5f       	subi	r25, 0xFF	; 255
    1286:	c9 f7       	brne	.-14     	; 0x127a <__divsf3_pse+0x78>
    1288:	88 0f       	add	r24, r24
    128a:	91 1d       	adc	r25, r1
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	97 f9       	bld	r25, 7
    1292:	08 95       	ret
    1294:	e1 e0       	ldi	r30, 0x01	; 1
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	bb 1f       	adc	r27, r27
    129e:	62 17       	cp	r22, r18
    12a0:	73 07       	cpc	r23, r19
    12a2:	84 07       	cpc	r24, r20
    12a4:	ba 07       	cpc	r27, r26
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <__divsf3_pse+0xae>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	ba 0b       	sbc	r27, r26
    12b0:	ee 1f       	adc	r30, r30
    12b2:	88 f7       	brcc	.-30     	; 0x1296 <__divsf3_pse+0x94>
    12b4:	e0 95       	com	r30
    12b6:	08 95       	ret

000012b8 <__fixsfsi>:
    12b8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__fixunssfsi>
    12bc:	68 94       	set
    12be:	b1 11       	cpse	r27, r1
    12c0:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    12c4:	08 95       	ret

000012c6 <__fixunssfsi>:
    12c6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_splitA>
    12ca:	88 f0       	brcs	.+34     	; 0x12ee <__fixunssfsi+0x28>
    12cc:	9f 57       	subi	r25, 0x7F	; 127
    12ce:	98 f0       	brcs	.+38     	; 0x12f6 <__fixunssfsi+0x30>
    12d0:	b9 2f       	mov	r27, r25
    12d2:	99 27       	eor	r25, r25
    12d4:	b7 51       	subi	r27, 0x17	; 23
    12d6:	b0 f0       	brcs	.+44     	; 0x1304 <__fixunssfsi+0x3e>
    12d8:	e1 f0       	breq	.+56     	; 0x1312 <__fixunssfsi+0x4c>
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	1a f0       	brmi	.+6      	; 0x12ea <__fixunssfsi+0x24>
    12e4:	ba 95       	dec	r27
    12e6:	c9 f7       	brne	.-14     	; 0x12da <__fixunssfsi+0x14>
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <__fixunssfsi+0x4c>
    12ea:	b1 30       	cpi	r27, 0x01	; 1
    12ec:	91 f0       	breq	.+36     	; 0x1312 <__fixunssfsi+0x4c>
    12ee:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fp_zero>
    12f2:	b1 e0       	ldi	r27, 0x01	; 1
    12f4:	08 95       	ret
    12f6:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_zero>
    12fa:	67 2f       	mov	r22, r23
    12fc:	78 2f       	mov	r23, r24
    12fe:	88 27       	eor	r24, r24
    1300:	b8 5f       	subi	r27, 0xF8	; 248
    1302:	39 f0       	breq	.+14     	; 0x1312 <__fixunssfsi+0x4c>
    1304:	b9 3f       	cpi	r27, 0xF9	; 249
    1306:	cc f3       	brlt	.-14     	; 0x12fa <__fixunssfsi+0x34>
    1308:	86 95       	lsr	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b3 95       	inc	r27
    1310:	d9 f7       	brne	.-10     	; 0x1308 <__fixunssfsi+0x42>
    1312:	3e f4       	brtc	.+14     	; 0x1322 <__fixunssfsi+0x5c>
    1314:	90 95       	com	r25
    1316:	80 95       	com	r24
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__floatunsisf>:
    1324:	e8 94       	clt
    1326:	09 c0       	rjmp	.+18     	; 0x133a <__floatsisf+0x12>

00001328 <__floatsisf>:
    1328:	97 fb       	bst	r25, 7
    132a:	3e f4       	brtc	.+14     	; 0x133a <__floatsisf+0x12>
    132c:	90 95       	com	r25
    132e:	80 95       	com	r24
    1330:	70 95       	com	r23
    1332:	61 95       	neg	r22
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	99 23       	and	r25, r25
    133c:	a9 f0       	breq	.+42     	; 0x1368 <__floatsisf+0x40>
    133e:	f9 2f       	mov	r31, r25
    1340:	96 e9       	ldi	r25, 0x96	; 150
    1342:	bb 27       	eor	r27, r27
    1344:	93 95       	inc	r25
    1346:	f6 95       	lsr	r31
    1348:	87 95       	ror	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f1 11       	cpse	r31, r1
    1352:	f8 cf       	rjmp	.-16     	; 0x1344 <__floatsisf+0x1c>
    1354:	fa f4       	brpl	.+62     	; 0x1394 <__floatsisf+0x6c>
    1356:	bb 0f       	add	r27, r27
    1358:	11 f4       	brne	.+4      	; 0x135e <__floatsisf+0x36>
    135a:	60 ff       	sbrs	r22, 0
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <__floatsisf+0x6c>
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <__floatsisf+0x6c>
    1368:	88 23       	and	r24, r24
    136a:	11 f0       	breq	.+4      	; 0x1370 <__floatsisf+0x48>
    136c:	96 e9       	ldi	r25, 0x96	; 150
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <__floatsisf+0x6a>
    1370:	77 23       	and	r23, r23
    1372:	21 f0       	breq	.+8      	; 0x137c <__floatsisf+0x54>
    1374:	9e e8       	ldi	r25, 0x8E	; 142
    1376:	87 2f       	mov	r24, r23
    1378:	76 2f       	mov	r23, r22
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <__floatsisf+0x5e>
    137c:	66 23       	and	r22, r22
    137e:	71 f0       	breq	.+28     	; 0x139c <__floatsisf+0x74>
    1380:	96 e8       	ldi	r25, 0x86	; 134
    1382:	86 2f       	mov	r24, r22
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	2a f0       	brmi	.+10     	; 0x1394 <__floatsisf+0x6c>
    138a:	9a 95       	dec	r25
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <__floatsisf+0x62>
    1394:	88 0f       	add	r24, r24
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__fp_inf>:
    139e:	97 f9       	bld	r25, 7
    13a0:	9f 67       	ori	r25, 0x7F	; 127
    13a2:	80 e8       	ldi	r24, 0x80	; 128
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	08 95       	ret

000013aa <__fp_nan>:
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	80 ec       	ldi	r24, 0xC0	; 192
    13ae:	08 95       	ret

000013b0 <__fp_pscA>:
    13b0:	00 24       	eor	r0, r0
    13b2:	0a 94       	dec	r0
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	18 06       	cpc	r1, r24
    13ba:	09 06       	cpc	r0, r25
    13bc:	08 95       	ret

000013be <__fp_pscB>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	14 06       	cpc	r1, r20
    13c8:	05 06       	cpc	r0, r21
    13ca:	08 95       	ret

000013cc <__fp_round>:
    13cc:	09 2e       	mov	r0, r25
    13ce:	03 94       	inc	r0
    13d0:	00 0c       	add	r0, r0
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0xc>
    13d4:	88 23       	and	r24, r24
    13d6:	52 f0       	brmi	.+20     	; 0x13ec <__fp_round+0x20>
    13d8:	bb 0f       	add	r27, r27
    13da:	40 f4       	brcc	.+16     	; 0x13ec <__fp_round+0x20>
    13dc:	bf 2b       	or	r27, r31
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__fp_round+0x18>
    13e0:	60 ff       	sbrs	r22, 0
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__fp_round+0x20>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__fp_split3>:
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	90 58       	subi	r25, 0x80	; 128
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	59 f0       	breq	.+22     	; 0x140e <__fp_splitA+0x10>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	71 f0       	breq	.+28     	; 0x1418 <__fp_splitA+0x1a>
    13fc:	47 95       	ror	r20

000013fe <__fp_splitA>:
    13fe:	88 0f       	add	r24, r24
    1400:	97 fb       	bst	r25, 7
    1402:	99 1f       	adc	r25, r25
    1404:	61 f0       	breq	.+24     	; 0x141e <__fp_splitA+0x20>
    1406:	9f 3f       	cpi	r25, 0xFF	; 255
    1408:	79 f0       	breq	.+30     	; 0x1428 <__fp_splitA+0x2a>
    140a:	87 95       	ror	r24
    140c:	08 95       	ret
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	55 1f       	adc	r21, r21
    1416:	f2 cf       	rjmp	.-28     	; 0x13fc <__fp_split3+0xe>
    1418:	46 95       	lsr	r20
    141a:	f1 df       	rcall	.-30     	; 0x13fe <__fp_splitA>
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__fp_splitA+0x30>
    141e:	16 16       	cp	r1, r22
    1420:	17 06       	cpc	r1, r23
    1422:	18 06       	cpc	r1, r24
    1424:	99 1f       	adc	r25, r25
    1426:	f1 cf       	rjmp	.-30     	; 0x140a <__fp_splitA+0xc>
    1428:	86 95       	lsr	r24
    142a:	71 05       	cpc	r23, r1
    142c:	61 05       	cpc	r22, r1
    142e:	08 94       	sec
    1430:	08 95       	ret

00001432 <__fp_zero>:
    1432:	e8 94       	clt

00001434 <__fp_szero>:
    1434:	bb 27       	eor	r27, r27
    1436:	66 27       	eor	r22, r22
    1438:	77 27       	eor	r23, r23
    143a:	cb 01       	movw	r24, r22
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret
    1440:	16 f0       	brts	.+4      	; 0x1446 <__fp_szero+0x12>
    1442:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__fp_mpack>
    1446:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_nan>
    144a:	68 94       	set
    144c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>

00001450 <log>:
    1450:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_splitA>
    1454:	a8 f3       	brcs	.-22     	; 0x1440 <__fp_szero+0xc>
    1456:	99 23       	and	r25, r25
    1458:	c1 f3       	breq	.-16     	; 0x144a <__fp_szero+0x16>
    145a:	ae f3       	brts	.-22     	; 0x1446 <__fp_szero+0x12>
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	1f 93       	push	r17
    1462:	0f 93       	push	r16
    1464:	ff 92       	push	r15
    1466:	c9 2f       	mov	r28, r25
    1468:	dd 27       	eor	r29, r29
    146a:	88 23       	and	r24, r24
    146c:	2a f0       	brmi	.+10     	; 0x1478 <log+0x28>
    146e:	21 97       	sbiw	r28, 0x01	; 1
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	da f7       	brpl	.-10     	; 0x146e <log+0x1e>
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f eb       	ldi	r21, 0xBF	; 191
    1480:	9f e3       	ldi	r25, 0x3F	; 63
    1482:	88 39       	cpi	r24, 0x98	; 152
    1484:	20 f0       	brcs	.+8      	; 0x148e <log+0x3e>
    1486:	80 3e       	cpi	r24, 0xE0	; 224
    1488:	38 f0       	brcs	.+14     	; 0x1498 <log+0x48>
    148a:	21 96       	adiw	r28, 0x01	; 1
    148c:	8f 77       	andi	r24, 0x7F	; 127
    148e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__addsf3>
    1492:	e2 e6       	ldi	r30, 0x62	; 98
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <log+0x50>
    1498:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__addsf3>
    149c:	ef e8       	ldi	r30, 0x8F	; 143
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_powser>
    14a4:	8b 01       	movw	r16, r22
    14a6:	be 01       	movw	r22, r28
    14a8:	ec 01       	movw	r28, r24
    14aa:	fb 2e       	mov	r15, r27
    14ac:	6f 57       	subi	r22, 0x7F	; 127
    14ae:	71 09       	sbc	r23, r1
    14b0:	75 95       	asr	r23
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 0b       	sbc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatsisf>
    14bc:	28 e1       	ldi	r18, 0x18	; 24
    14be:	32 e7       	ldi	r19, 0x72	; 114
    14c0:	41 e3       	ldi	r20, 0x31	; 49
    14c2:	5f e3       	ldi	r21, 0x3F	; 63
    14c4:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulsf3x>
    14c8:	af 2d       	mov	r26, r15
    14ca:	98 01       	movw	r18, r16
    14cc:	ae 01       	movw	r20, r28
    14ce:	ff 90       	pop	r15
    14d0:	0f 91       	pop	r16
    14d2:	1f 91       	pop	r17
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3x>
    14dc:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>

000014e0 <__mulsf3>:
    14e0:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulsf3x>
    14e4:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
    14e8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <__mulsf3+0x1c>
    14ee:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__mulsf3+0x1c>
    14f4:	95 23       	and	r25, r21
    14f6:	11 f0       	breq	.+4      	; 0x14fc <__mulsf3+0x1c>
    14f8:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>
    14fc:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_nan>
    1500:	11 24       	eor	r1, r1
    1502:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>

00001506 <__mulsf3x>:
    1506:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
    150a:	70 f3       	brcs	.-36     	; 0x14e8 <__mulsf3+0x8>

0000150c <__mulsf3_pse>:
    150c:	95 9f       	mul	r25, r21
    150e:	c1 f3       	breq	.-16     	; 0x1500 <__mulsf3+0x20>
    1510:	95 0f       	add	r25, r21
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	55 1f       	adc	r21, r21
    1516:	62 9f       	mul	r22, r18
    1518:	f0 01       	movw	r30, r0
    151a:	72 9f       	mul	r23, r18
    151c:	bb 27       	eor	r27, r27
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	63 9f       	mul	r22, r19
    1524:	aa 27       	eor	r26, r26
    1526:	f0 0d       	add	r31, r0
    1528:	b1 1d       	adc	r27, r1
    152a:	aa 1f       	adc	r26, r26
    152c:	64 9f       	mul	r22, r20
    152e:	66 27       	eor	r22, r22
    1530:	b0 0d       	add	r27, r0
    1532:	a1 1d       	adc	r26, r1
    1534:	66 1f       	adc	r22, r22
    1536:	82 9f       	mul	r24, r18
    1538:	22 27       	eor	r18, r18
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	73 9f       	mul	r23, r19
    1542:	b0 0d       	add	r27, r0
    1544:	a1 1d       	adc	r26, r1
    1546:	62 1f       	adc	r22, r18
    1548:	83 9f       	mul	r24, r19
    154a:	a0 0d       	add	r26, r0
    154c:	61 1d       	adc	r22, r1
    154e:	22 1f       	adc	r18, r18
    1550:	74 9f       	mul	r23, r20
    1552:	33 27       	eor	r19, r19
    1554:	a0 0d       	add	r26, r0
    1556:	61 1d       	adc	r22, r1
    1558:	23 1f       	adc	r18, r19
    155a:	84 9f       	mul	r24, r20
    155c:	60 0d       	add	r22, r0
    155e:	21 1d       	adc	r18, r1
    1560:	82 2f       	mov	r24, r18
    1562:	76 2f       	mov	r23, r22
    1564:	6a 2f       	mov	r22, r26
    1566:	11 24       	eor	r1, r1
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	50 40       	sbci	r21, 0x00	; 0
    156c:	9a f0       	brmi	.+38     	; 0x1594 <__mulsf3_pse+0x88>
    156e:	f1 f0       	breq	.+60     	; 0x15ac <__mulsf3_pse+0xa0>
    1570:	88 23       	and	r24, r24
    1572:	4a f0       	brmi	.+18     	; 0x1586 <__mulsf3_pse+0x7a>
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	bb 1f       	adc	r27, r27
    157a:	66 1f       	adc	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__mulsf3_pse+0x64>
    1586:	9e 3f       	cpi	r25, 0xFE	; 254
    1588:	51 05       	cpc	r21, r1
    158a:	80 f0       	brcs	.+32     	; 0x15ac <__mulsf3_pse+0xa0>
    158c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>
    1590:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	e4 f3       	brlt	.-8      	; 0x1590 <__mulsf3_pse+0x84>
    1598:	98 3e       	cpi	r25, 0xE8	; 232
    159a:	d4 f3       	brlt	.-12     	; 0x1590 <__mulsf3_pse+0x84>
    159c:	86 95       	lsr	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f7 95       	ror	r31
    15a6:	e7 95       	ror	r30
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	c1 f7       	brne	.-16     	; 0x159c <__mulsf3_pse+0x90>
    15ac:	fe 2b       	or	r31, r30
    15ae:	88 0f       	add	r24, r24
    15b0:	91 1d       	adc	r25, r1
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret

000015ba <__subsf3>:
    15ba:	50 58       	subi	r21, 0x80	; 128

000015bc <__addsf3>:
    15bc:	bb 27       	eor	r27, r27
    15be:	aa 27       	eor	r26, r26
    15c0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3x>
    15c4:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
    15c8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
    15cc:	38 f0       	brcs	.+14     	; 0x15dc <__addsf3+0x20>
    15ce:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <__addsf3+0x20>
    15d4:	39 f4       	brne	.+14     	; 0x15e4 <__addsf3+0x28>
    15d6:	9f 3f       	cpi	r25, 0xFF	; 255
    15d8:	19 f4       	brne	.+6      	; 0x15e0 <__addsf3+0x24>
    15da:	26 f4       	brtc	.+8      	; 0x15e4 <__addsf3+0x28>
    15dc:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_nan>
    15e0:	0e f4       	brtc	.+2      	; 0x15e4 <__addsf3+0x28>
    15e2:	e0 95       	com	r30
    15e4:	e7 fb       	bst	r30, 7
    15e6:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_inf>

000015ea <__addsf3x>:
    15ea:	e9 2f       	mov	r30, r25
    15ec:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
    15f0:	58 f3       	brcs	.-42     	; 0x15c8 <__addsf3+0xc>
    15f2:	ba 17       	cp	r27, r26
    15f4:	62 07       	cpc	r22, r18
    15f6:	73 07       	cpc	r23, r19
    15f8:	84 07       	cpc	r24, r20
    15fa:	95 07       	cpc	r25, r21
    15fc:	20 f0       	brcs	.+8      	; 0x1606 <__addsf3x+0x1c>
    15fe:	79 f4       	brne	.+30     	; 0x161e <__addsf3x+0x34>
    1600:	a6 f5       	brtc	.+104    	; 0x166a <__addsf3x+0x80>
    1602:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_zero>
    1606:	0e f4       	brtc	.+2      	; 0x160a <__addsf3x+0x20>
    1608:	e0 95       	com	r30
    160a:	0b 2e       	mov	r0, r27
    160c:	ba 2f       	mov	r27, r26
    160e:	a0 2d       	mov	r26, r0
    1610:	0b 01       	movw	r0, r22
    1612:	b9 01       	movw	r22, r18
    1614:	90 01       	movw	r18, r0
    1616:	0c 01       	movw	r0, r24
    1618:	ca 01       	movw	r24, r20
    161a:	a0 01       	movw	r20, r0
    161c:	11 24       	eor	r1, r1
    161e:	ff 27       	eor	r31, r31
    1620:	59 1b       	sub	r21, r25
    1622:	99 f0       	breq	.+38     	; 0x164a <__addsf3x+0x60>
    1624:	59 3f       	cpi	r21, 0xF9	; 249
    1626:	50 f4       	brcc	.+20     	; 0x163c <__addsf3x+0x52>
    1628:	50 3e       	cpi	r21, 0xE0	; 224
    162a:	68 f1       	brcs	.+90     	; 0x1686 <__addsf3x+0x9c>
    162c:	1a 16       	cp	r1, r26
    162e:	f0 40       	sbci	r31, 0x00	; 0
    1630:	a2 2f       	mov	r26, r18
    1632:	23 2f       	mov	r18, r19
    1634:	34 2f       	mov	r19, r20
    1636:	44 27       	eor	r20, r20
    1638:	58 5f       	subi	r21, 0xF8	; 248
    163a:	f3 cf       	rjmp	.-26     	; 0x1622 <__addsf3x+0x38>
    163c:	46 95       	lsr	r20
    163e:	37 95       	ror	r19
    1640:	27 95       	ror	r18
    1642:	a7 95       	ror	r26
    1644:	f0 40       	sbci	r31, 0x00	; 0
    1646:	53 95       	inc	r21
    1648:	c9 f7       	brne	.-14     	; 0x163c <__addsf3x+0x52>
    164a:	7e f4       	brtc	.+30     	; 0x166a <__addsf3x+0x80>
    164c:	1f 16       	cp	r1, r31
    164e:	ba 0b       	sbc	r27, r26
    1650:	62 0b       	sbc	r22, r18
    1652:	73 0b       	sbc	r23, r19
    1654:	84 0b       	sbc	r24, r20
    1656:	ba f0       	brmi	.+46     	; 0x1686 <__addsf3x+0x9c>
    1658:	91 50       	subi	r25, 0x01	; 1
    165a:	a1 f0       	breq	.+40     	; 0x1684 <__addsf3x+0x9a>
    165c:	ff 0f       	add	r31, r31
    165e:	bb 1f       	adc	r27, r27
    1660:	66 1f       	adc	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	c2 f7       	brpl	.-16     	; 0x1658 <__addsf3x+0x6e>
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <__addsf3x+0x9c>
    166a:	ba 0f       	add	r27, r26
    166c:	62 1f       	adc	r22, r18
    166e:	73 1f       	adc	r23, r19
    1670:	84 1f       	adc	r24, r20
    1672:	48 f4       	brcc	.+18     	; 0x1686 <__addsf3x+0x9c>
    1674:	87 95       	ror	r24
    1676:	77 95       	ror	r23
    1678:	67 95       	ror	r22
    167a:	b7 95       	ror	r27
    167c:	f7 95       	ror	r31
    167e:	9e 3f       	cpi	r25, 0xFE	; 254
    1680:	08 f0       	brcs	.+2      	; 0x1684 <__addsf3x+0x9a>
    1682:	b0 cf       	rjmp	.-160    	; 0x15e4 <__addsf3+0x28>
    1684:	93 95       	inc	r25
    1686:	88 0f       	add	r24, r24
    1688:	08 f0       	brcs	.+2      	; 0x168c <__addsf3x+0xa2>
    168a:	99 27       	eor	r25, r25
    168c:	ee 0f       	add	r30, r30
    168e:	97 95       	ror	r25
    1690:	87 95       	ror	r24
    1692:	08 95       	ret

00001694 <__fp_mpack>:
    1694:	9f 3f       	cpi	r25, 0xFF	; 255
    1696:	31 f0       	breq	.+12     	; 0x16a4 <__fp_mpack_finite+0xc>

00001698 <__fp_mpack_finite>:
    1698:	91 50       	subi	r25, 0x01	; 1
    169a:	20 f4       	brcc	.+8      	; 0x16a4 <__fp_mpack_finite+0xc>
    169c:	87 95       	ror	r24
    169e:	77 95       	ror	r23
    16a0:	67 95       	ror	r22
    16a2:	b7 95       	ror	r27
    16a4:	88 0f       	add	r24, r24
    16a6:	91 1d       	adc	r25, r1
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	97 f9       	bld	r25, 7
    16ae:	08 95       	ret

000016b0 <__fp_powser>:
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	1f 93       	push	r17
    16b6:	0f 93       	push	r16
    16b8:	ff 92       	push	r15
    16ba:	ef 92       	push	r14
    16bc:	df 92       	push	r13
    16be:	7b 01       	movw	r14, r22
    16c0:	8c 01       	movw	r16, r24
    16c2:	68 94       	set
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <__fp_powser+0x22>
    16c6:	da 2e       	mov	r13, r26
    16c8:	ef 01       	movw	r28, r30
    16ca:	0e 94 83 0a 	call	0x1506	; 0x1506 <__mulsf3x>
    16ce:	fe 01       	movw	r30, r28
    16d0:	e8 94       	clt
    16d2:	a5 91       	lpm	r26, Z+
    16d4:	25 91       	lpm	r18, Z+
    16d6:	35 91       	lpm	r19, Z+
    16d8:	45 91       	lpm	r20, Z+
    16da:	55 91       	lpm	r21, Z+
    16dc:	a6 f3       	brts	.-24     	; 0x16c6 <__fp_powser+0x16>
    16de:	ef 01       	movw	r28, r30
    16e0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__addsf3x>
    16e4:	fe 01       	movw	r30, r28
    16e6:	97 01       	movw	r18, r14
    16e8:	a8 01       	movw	r20, r16
    16ea:	da 94       	dec	r13
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <__fp_powser+0x18>
    16ee:	df 90       	pop	r13
    16f0:	ef 90       	pop	r14
    16f2:	ff 90       	pop	r15
    16f4:	0f 91       	pop	r16
    16f6:	1f 91       	pop	r17
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <__divmodhi4>:
    16fe:	97 fb       	bst	r25, 7
    1700:	07 2e       	mov	r0, r23
    1702:	16 f4       	brtc	.+4      	; 0x1708 <__divmodhi4+0xa>
    1704:	00 94       	com	r0
    1706:	07 d0       	rcall	.+14     	; 0x1716 <__divmodhi4_neg1>
    1708:	77 fd       	sbrc	r23, 7
    170a:	09 d0       	rcall	.+18     	; 0x171e <__divmodhi4_neg2>
    170c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__udivmodhi4>
    1710:	07 fc       	sbrc	r0, 7
    1712:	05 d0       	rcall	.+10     	; 0x171e <__divmodhi4_neg2>
    1714:	3e f4       	brtc	.+14     	; 0x1724 <__divmodhi4_exit>

00001716 <__divmodhi4_neg1>:
    1716:	90 95       	com	r25
    1718:	81 95       	neg	r24
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	08 95       	ret

0000171e <__divmodhi4_neg2>:
    171e:	70 95       	com	r23
    1720:	61 95       	neg	r22
    1722:	7f 4f       	sbci	r23, 0xFF	; 255

00001724 <__divmodhi4_exit>:
    1724:	08 95       	ret

00001726 <__udivmodsi4>:
    1726:	a1 e2       	ldi	r26, 0x21	; 33
    1728:	1a 2e       	mov	r1, r26
    172a:	aa 1b       	sub	r26, r26
    172c:	bb 1b       	sub	r27, r27
    172e:	fd 01       	movw	r30, r26
    1730:	0d c0       	rjmp	.+26     	; 0x174c <__udivmodsi4_ep>

00001732 <__udivmodsi4_loop>:
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	ee 1f       	adc	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	a2 17       	cp	r26, r18
    173c:	b3 07       	cpc	r27, r19
    173e:	e4 07       	cpc	r30, r20
    1740:	f5 07       	cpc	r31, r21
    1742:	20 f0       	brcs	.+8      	; 0x174c <__udivmodsi4_ep>
    1744:	a2 1b       	sub	r26, r18
    1746:	b3 0b       	sbc	r27, r19
    1748:	e4 0b       	sbc	r30, r20
    174a:	f5 0b       	sbc	r31, r21

0000174c <__udivmodsi4_ep>:
    174c:	66 1f       	adc	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	88 1f       	adc	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	1a 94       	dec	r1
    1756:	69 f7       	brne	.-38     	; 0x1732 <__udivmodsi4_loop>
    1758:	60 95       	com	r22
    175a:	70 95       	com	r23
    175c:	80 95       	com	r24
    175e:	90 95       	com	r25
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	bd 01       	movw	r22, r26
    1766:	cf 01       	movw	r24, r30
    1768:	08 95       	ret

0000176a <__divmodsi4>:
    176a:	05 2e       	mov	r0, r21
    176c:	97 fb       	bst	r25, 7
    176e:	1e f4       	brtc	.+6      	; 0x1776 <__divmodsi4+0xc>
    1770:	00 94       	com	r0
    1772:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__negsi2>
    1776:	57 fd       	sbrc	r21, 7
    1778:	07 d0       	rcall	.+14     	; 0x1788 <__divmodsi4_neg2>
    177a:	0e 94 93 0b 	call	0x1726	; 0x1726 <__udivmodsi4>
    177e:	07 fc       	sbrc	r0, 7
    1780:	03 d0       	rcall	.+6      	; 0x1788 <__divmodsi4_neg2>
    1782:	4e f4       	brtc	.+18     	; 0x1796 <__divmodsi4_exit>
    1784:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__negsi2>

00001788 <__divmodsi4_neg2>:
    1788:	50 95       	com	r21
    178a:	40 95       	com	r20
    178c:	30 95       	com	r19
    178e:	21 95       	neg	r18
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	4f 4f       	sbci	r20, 0xFF	; 255
    1794:	5f 4f       	sbci	r21, 0xFF	; 255

00001796 <__divmodsi4_exit>:
    1796:	08 95       	ret

00001798 <__negsi2>:
    1798:	90 95       	com	r25
    179a:	80 95       	com	r24
    179c:	70 95       	com	r23
    179e:	61 95       	neg	r22
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	08 95       	ret

000017a8 <__tablejump2__>:
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	05 90       	lpm	r0, Z+
    17ae:	f4 91       	lpm	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	09 94       	ijmp

000017b4 <__umulhisi3>:
    17b4:	a2 9f       	mul	r26, r18
    17b6:	b0 01       	movw	r22, r0
    17b8:	b3 9f       	mul	r27, r19
    17ba:	c0 01       	movw	r24, r0
    17bc:	a3 9f       	mul	r26, r19
    17be:	70 0d       	add	r23, r0
    17c0:	81 1d       	adc	r24, r1
    17c2:	11 24       	eor	r1, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	b2 9f       	mul	r27, r18
    17c8:	70 0d       	add	r23, r0
    17ca:	81 1d       	adc	r24, r1
    17cc:	11 24       	eor	r1, r1
    17ce:	91 1d       	adc	r25, r1
    17d0:	08 95       	ret

000017d2 <__muluhisi3>:
    17d2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__umulhisi3>
    17d6:	a5 9f       	mul	r26, r21
    17d8:	90 0d       	add	r25, r0
    17da:	b4 9f       	mul	r27, r20
    17dc:	90 0d       	add	r25, r0
    17de:	a4 9f       	mul	r26, r20
    17e0:	80 0d       	add	r24, r0
    17e2:	91 1d       	adc	r25, r1
    17e4:	11 24       	eor	r1, r1
    17e6:	08 95       	ret

000017e8 <__udivmodhi4>:
    17e8:	aa 1b       	sub	r26, r26
    17ea:	bb 1b       	sub	r27, r27
    17ec:	51 e1       	ldi	r21, 0x11	; 17
    17ee:	07 c0       	rjmp	.+14     	; 0x17fe <__udivmodhi4_ep>

000017f0 <__udivmodhi4_loop>:
    17f0:	aa 1f       	adc	r26, r26
    17f2:	bb 1f       	adc	r27, r27
    17f4:	a6 17       	cp	r26, r22
    17f6:	b7 07       	cpc	r27, r23
    17f8:	10 f0       	brcs	.+4      	; 0x17fe <__udivmodhi4_ep>
    17fa:	a6 1b       	sub	r26, r22
    17fc:	b7 0b       	sbc	r27, r23

000017fe <__udivmodhi4_ep>:
    17fe:	88 1f       	adc	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	5a 95       	dec	r21
    1804:	a9 f7       	brne	.-22     	; 0x17f0 <__udivmodhi4_loop>
    1806:	80 95       	com	r24
    1808:	90 95       	com	r25
    180a:	bc 01       	movw	r22, r24
    180c:	cd 01       	movw	r24, r26
    180e:	08 95       	ret

00001810 <_exit>:
    1810:	f8 94       	cli

00001812 <__stop_program>:
    1812:	ff cf       	rjmp	.-2      	; 0x1812 <__stop_program>
