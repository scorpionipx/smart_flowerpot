
SmartFlowerpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000054e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a4  008000a4  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001227  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e8  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f7  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  000031ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  8a:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "driverAdc.h"

void ADC_Init(void)
{
		DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	    // AREF = AVcc
	    ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	    
	    // ADC Enable and prescaler of 128
	    // 16000000/128 = 125000
	    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_GetValue>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
uint16_t ADC_GetValue(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  a0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_GetValue+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
}
  b2:	08 95       	ret

000000b4 <read_humidity_level>:

void read_humidity_level(int sensor)
{
	switch(sensor)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	19 f0       	breq	.+6      	; 0xc0 <read_humidity_level+0xc>
  ba:	02 97       	sbiw	r24, 0x02	; 2
  bc:	a1 f0       	breq	.+40     	; 0xe6 <read_humidity_level+0x32>
  be:	08 95       	ret
	{
		case 1:
		{
			humidity_level_sensor_1 = (((uint32_t)ADC_GetValue(0) * 100) / 1023);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  c6:	9c 01       	movw	r18, r24
  c8:	a4 e6       	ldi	r26, 0x64	; 100
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	0e 94 82 02 	call	0x504	; 0x504 <__umulhisi3>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	33 e0       	ldi	r19, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__udivmodsi4>
  dc:	30 93 ab 00 	sts	0x00AB, r19	; 0x8000ab <humidity_level_sensor_1+0x1>
  e0:	20 93 aa 00 	sts	0x00AA, r18	; 0x8000aa <humidity_level_sensor_1>
			break;
  e4:	08 95       	ret
		}
		case 2:
		{
			humidity_level_sensor_2 = (((uint32_t)ADC_GetValue(1) * 100) / 1023);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  ec:	9c 01       	movw	r18, r24
  ee:	a4 e6       	ldi	r26, 0x64	; 100
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	0e 94 82 02 	call	0x504	; 0x504 <__umulhisi3>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__udivmodsi4>
 102:	30 93 ad 00 	sts	0x00AD, r19	; 0x8000ad <humidity_level_sensor_2+0x1>
 106:	20 93 ac 00 	sts	0x00AC, r18	; 0x8000ac <humidity_level_sensor_2>
 10a:	08 95       	ret

0000010c <init_Interrupt>:
unsigned int display_refresh_counter = 500;
unsigned int read_humidity_counter = 0;

void init_Interrupt(void)
{
	TCCR0 = 0x0b;
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 110:	12 be       	out	0x32, r1	; 50
	OCR0 = 250;
 112:	8a ef       	ldi	r24, 0xFA	; 250
 114:	8c bf       	out	0x3c, r24	; 60
	TIMSK = TIMSK | 0X02;
 116:	89 b7       	in	r24, 0x39	; 57
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	89 bf       	out	0x39, r24	; 57
	TIFR = 0X02;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	88 bf       	out	0x38, r24	; 56
 120:	08 95       	ret

00000122 <__vector_10>:
}


ISR(TIMER0_COMP_vect) /*RUNS EVERY .5MS*/
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	display_refresh_counter ++;
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 148:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
	if (display_refresh_counter >= DISPLAY_REFRESH_RATE)
 14e:	8c 3d       	cpi	r24, 0xDC	; 220
 150:	25 e0       	ldi	r18, 0x05	; 5
 152:	92 07       	cpc	r25, r18
 154:	28 f4       	brcc	.+10     	; 0x160 <__vector_10+0x3e>
}


ISR(TIMER0_COMP_vect) /*RUNS EVERY .5MS*/
{
	display_refresh_counter ++;
 156:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 15a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 15e:	1b c0       	rjmp	.+54     	; 0x196 <__vector_10+0x74>
	if (display_refresh_counter >= DISPLAY_REFRESH_RATE)
	{
		display_refresh_counter = 0;
 160:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 164:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		switch(MENU)
 168:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <MENU>
 16c:	88 23       	and	r24, r24
 16e:	19 f0       	breq	.+6      	; 0x176 <__vector_10+0x54>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	51 f0       	breq	.+20     	; 0x188 <__vector_10+0x66>
 174:	0c c0       	rjmp	.+24     	; 0x18e <__vector_10+0x6c>
		{
			case SENSOR_VALUES_MENU:
			{
				display_umidity_level_values(MENU, humidity_level_sensor_2);
 176:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <humidity_level_sensor_2>
 17a:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <humidity_level_sensor_2+0x1>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 d6 01 	call	0x3ac	; 0x3ac <display_umidity_level_values>
				break;
 186:	07 c0       	rjmp	.+14     	; 0x196 <__vector_10+0x74>
			}
			case CLOCK_MENU:
			{
				display_clock_values();
 188:	0e 94 22 02 	call	0x444	; 0x444 <display_clock_values>
				break;
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__vector_10+0x74>
			}
			default:
			{
				put_string("error");
 18e:	82 e6       	ldi	r24, 0x62	; 98
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
				break;
			}
		}
	}
	read_humidity_counter ++;
 196:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
 19a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
 1a4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
	if(read_humidity_counter >= SENSORS_READ_INTERVAL)
 1a8:	88 3e       	cpi	r24, 0xE8	; 232
 1aa:	93 40       	sbci	r25, 0x03	; 3
 1ac:	40 f0       	brcs	.+16     	; 0x1be <__vector_10+0x9c>
	{
		read_humidity_level(SENSOR_1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
		read_humidity_level(SENSOR_2);
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
	}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <put_Char_LCD_Display>:
	put_string(SENSOR_2_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
	}
}
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	38 2f       	mov	r19, r24
 1e4:	30 7f       	andi	r19, 0xF0	; 240
 1e6:	2f 70       	andi	r18, 0x0F	; 15
 1e8:	23 2b       	or	r18, r19
 1ea:	25 bb       	out	0x15, r18	; 21
 1ec:	25 b3       	in	r18, 0x15	; 21
 1ee:	61 70       	andi	r22, 0x01	; 1
 1f0:	2e 7f       	andi	r18, 0xFE	; 254
 1f2:	26 2b       	or	r18, r22
 1f4:	25 bb       	out	0x15, r18	; 21
 1f6:	a9 9a       	sbi	0x15, 1	; 21
 1f8:	ef e1       	ldi	r30, 0x1F	; 31
 1fa:	fe e4       	ldi	r31, 0x4E	; 78
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <put_Char_LCD_Display+0x1c>
 200:	00 c0       	rjmp	.+0      	; 0x202 <put_Char_LCD_Display+0x22>
 202:	00 00       	nop
 204:	25 b3       	in	r18, 0x15	; 21
 206:	2c 7f       	andi	r18, 0xFC	; 252
 208:	25 bb       	out	0x15, r18	; 21
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	82 95       	swap	r24
 20e:	92 95       	swap	r25
 210:	90 7f       	andi	r25, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	98 27       	eor	r25, r24
 218:	92 2f       	mov	r25, r18
 21a:	9f 70       	andi	r25, 0x0F	; 15
 21c:	89 2b       	or	r24, r25
 21e:	85 bb       	out	0x15, r24	; 21
 220:	85 b3       	in	r24, 0x15	; 21
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	68 2b       	or	r22, r24
 226:	65 bb       	out	0x15, r22	; 21
 228:	a9 9a       	sbi	0x15, 1	; 21
 22a:	8f e1       	ldi	r24, 0x1F	; 31
 22c:	9e e4       	ldi	r25, 0x4E	; 78
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <put_Char_LCD_Display+0x4e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <put_Char_LCD_Display+0x54>
 234:	00 00       	nop
 236:	85 b3       	in	r24, 0x15	; 21
 238:	8c 7f       	andi	r24, 0xFC	; 252
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	08 95       	ret

0000023e <init_LCD_Display>:
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	84 bb       	out	0x14, r24	; 20
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <init_LCD_Display+0x14>
 256:	00 c0       	rjmp	.+0      	; 0x258 <init_LCD_Display+0x1a>
 258:	00 00       	nop
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <init_LCD_Display+0x2c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <init_LCD_Display+0x32>
 270:	00 00       	nop
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	9e e4       	ldi	r25, 0x4E	; 78
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <init_LCD_Display+0x44>
 286:	00 c0       	rjmp	.+0      	; 0x288 <init_LCD_Display+0x4a>
 288:	00 00       	nop
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	9e e4       	ldi	r25, 0x4E	; 78
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <init_LCD_Display+0x5c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <init_LCD_Display+0x62>
 2a0:	00 00       	nop
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 2ae:	8f e1       	ldi	r24, 0x1F	; 31
 2b0:	9e e4       	ldi	r25, 0x4E	; 78
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <init_LCD_Display+0x74>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <init_LCD_Display+0x7a>
 2b8:	00 00       	nop
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 2c6:	8f e1       	ldi	r24, 0x1F	; 31
 2c8:	9e e4       	ldi	r25, 0x4E	; 78
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <init_LCD_Display+0x8c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <init_LCD_Display+0x92>
 2d0:	00 00       	nop
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	9e e4       	ldi	r25, 0x4E	; 78
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <init_LCD_Display+0xa4>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <init_LCD_Display+0xaa>
 2e8:	00 00       	nop
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 2f6:	08 95       	ret

000002f8 <put_string>:
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	8c 01       	movw	r16, r24
 306:	7c 01       	movw	r14, r24
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	d0 e0       	ldi	r29, 0x00	; 0
 30c:	09 c0       	rjmp	.+18     	; 0x320 <put_string+0x28>
 30e:	f7 01       	movw	r30, r14
 310:	81 91       	ld	r24, Z+
 312:	7f 01       	movw	r14, r30
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
 31e:	21 96       	adiw	r28, 0x01	; 1
 320:	f8 01       	movw	r30, r16
 322:	01 90       	ld	r0, Z+
 324:	00 20       	and	r0, r0
 326:	e9 f7       	brne	.-6      	; 0x322 <put_string+0x2a>
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	e0 1b       	sub	r30, r16
 32c:	f1 0b       	sbc	r31, r17
 32e:	ce 17       	cp	r28, r30
 330:	df 07       	cpc	r29, r31
 332:	68 f3       	brcs	.-38     	; 0x30e <put_string+0x16>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <humidity_level_int_value_to_string>:

// self made itoa
const char * humidity_level_int_value_to_string(int value)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	9c 01       	movw	r18, r24
	char digit_3 = '\0';
	char digit_4 = '\0';
	
	static char humidity_level[4];
	
	first_digit = (value/100)%10;
 348:	64 e6       	ldi	r22, 0x64	; 100
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodhi4>
 350:	cb 01       	movw	r24, r22
 352:	ca e0       	ldi	r28, 0x0A	; 10
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	be 01       	movw	r22, r28
 358:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodhi4>
 35c:	fc 01       	movw	r30, r24
	second_digit = (value/10)%10;
 35e:	c9 01       	movw	r24, r18
 360:	be 01       	movw	r22, r28
 362:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodhi4>
 366:	38 2f       	mov	r19, r24
 368:	cb 01       	movw	r24, r22
 36a:	be 01       	movw	r22, r28
 36c:	0e 94 4c 02 	call	0x498	; 0x498 <__divmodhi4>
 370:	28 2f       	mov	r18, r24
	third_digit = value%10;
	
	if(first_digit == 0)
 372:	30 97       	sbiw	r30, 0x00	; 0
 374:	69 f4       	brne	.+26     	; 0x390 <humidity_level_int_value_to_string+0x4e>
	{
		if(second_digit == 0)
 376:	89 2b       	or	r24, r25
 378:	29 f4       	brne	.+10     	; 0x384 <humidity_level_int_value_to_string+0x42>
		{
			digit_1 = third_digit + '0';
 37a:	90 e3       	ldi	r25, 0x30	; 48
 37c:	93 0f       	add	r25, r19
	int second_digit;
	int third_digit;
	
	char digit_1 = '\0';
	char digit_2 = '\0';
	char digit_3 = '\0';
 37e:	30 e0       	ldi	r19, 0x00	; 0
	if(first_digit == 0)
	{
		if(second_digit == 0)
		{
			digit_1 = third_digit + '0';
			digit_2 = '\0';
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	0a c0       	rjmp	.+20     	; 0x398 <humidity_level_int_value_to_string+0x56>
		}
		else
		{
			digit_1 = second_digit + '0';
 384:	90 e3       	ldi	r25, 0x30	; 48
 386:	92 0f       	add	r25, r18
			digit_2 = third_digit + '0';
 388:	20 e3       	ldi	r18, 0x30	; 48
 38a:	23 0f       	add	r18, r19
			digit_3 = '\0';
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	04 c0       	rjmp	.+8      	; 0x398 <humidity_level_int_value_to_string+0x56>
		}
	}
	else
	{
		digit_1 = first_digit + '0';
 390:	90 e3       	ldi	r25, 0x30	; 48
 392:	9e 0f       	add	r25, r30
		digit_2 = second_digit + '0';
 394:	20 5d       	subi	r18, 0xD0	; 208
		digit_3 = third_digit + '0';
 396:	30 5d       	subi	r19, 0xD0	; 208
		digit_4 = '\0';
	}
	
	humidity_level[0] = digit_1;
 398:	e6 ea       	ldi	r30, 0xA6	; 166
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	90 83       	st	Z, r25
	humidity_level[1] = digit_2;
 39e:	21 83       	std	Z+1, r18	; 0x01
	humidity_level[2] = digit_3;
 3a0:	32 83       	std	Z+2, r19	; 0x02
	humidity_level[3] = digit_4;
 3a2:	13 82       	std	Z+3, r1	; 0x03
	
	return humidity_level;
}
 3a4:	cf 01       	movw	r24, r30
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <display_umidity_level_values>:

// displays humidity percentage level read from every sensor
void display_umidity_level_values(int umidity_level_sensor_1, int umidity_level_sensor_2)
{
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	8c 01       	movw	r16, r24
 3b6:	eb 01       	movw	r28, r22
	int sensor_1_display_offset = strlen(SENSOR_1_TITLE);
	int sensor_2_display_offset = strlen(SENSOR_2_TITLE);
	
	put_Char_LCD_Display(0x80 + sensor_1_display_offset, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	8a e8       	ldi	r24, 0x8A	; 138
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(umidity_level_sensor_1));
 3c4:	c8 01       	movw	r24, r16
 3c6:	0e 94 a1 01 	call	0x342	; 0x342 <humidity_level_int_value_to_string>
 3ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
 3ce:	8e e7       	ldi	r24, 0x7E	; 126
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	put_string("  ");
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	
	put_Char_LCD_Display(0xC0 + sensor_2_display_offset, 0);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	8a ec       	ldi	r24, 0xCA	; 202
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(umidity_level_sensor_2));
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 a1 01 	call	0x342	; 0x342 <humidity_level_int_value_to_string>
 3f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
 3f4:	8e e7       	ldi	r24, 0x7E	; 126
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	put_string("  ");
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <display_clock_title>:


void display_clock_title()
{	
	put_Char_LCD_Display(0x01,0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(CLOCK_DATE_TITLE);
 426:	83 e8       	ldi	r24, 0x83	; 131
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(CLOCK_TIME_TITLE);
 43a:	88 e8       	ldi	r24, 0x88	; 136
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
 442:	08 95       	ret

00000444 <display_clock_values>:
void display_clock_values()
{
	int clock_date_display_offset = strlen(CLOCK_DATE_TITLE);
	int clock_time_display_offset = strlen(CLOCK_TIME_TITLE);
	
	put_Char_LCD_Display(0x80 + clock_date_display_offset, 0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	84 e8       	ldi	r24, 0x84	; 132
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(" 01 APR 2017");
 450:	8d e8       	ldi	r24, 0x8D	; 141
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
	
	put_Char_LCD_Display(0xC0 + clock_time_display_offset, 0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	84 ec       	ldi	r24, 0xC4	; 196
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <put_Char_LCD_Display>
	put_string(" 23:42:51");
 464:	8a e9       	ldi	r24, 0x9A	; 154
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <put_string>
 46c:	08 95       	ret

0000046e <main>:


int main(void)
{
	MENU = SENSOR_VALUES_MENU;
	MENU = CLOCK_MENU;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <MENU>
	
	humidity_level_sensor_1 = 0;
 474:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <humidity_level_sensor_1+0x1>
 478:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <humidity_level_sensor_1>
	humidity_level_sensor_2 = 0;
 47c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <humidity_level_sensor_2+0x1>
 480:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <humidity_level_sensor_2>
	
	sei();
 484:	78 94       	sei
	init_Interrupt();
 486:	0e 94 86 00 	call	0x10c	; 0x10c <init_Interrupt>
	ADC_Init();
 48a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	init_LCD_Display();
 48e:	0e 94 1f 01 	call	0x23e	; 0x23e <init_LCD_Display>
	
	display_clock_title();
 492:	0e 94 07 02 	call	0x40e	; 0x40e <display_clock_title>
	
    while (1) 
    {
    }
 496:	ff cf       	rjmp	.-2      	; 0x496 <main+0x28>

00000498 <__divmodhi4>:
 498:	97 fb       	bst	r25, 7
 49a:	07 2e       	mov	r0, r23
 49c:	16 f4       	brtc	.+4      	; 0x4a2 <__divmodhi4+0xa>
 49e:	00 94       	com	r0
 4a0:	07 d0       	rcall	.+14     	; 0x4b0 <__divmodhi4_neg1>
 4a2:	77 fd       	sbrc	r23, 7
 4a4:	09 d0       	rcall	.+18     	; 0x4b8 <__divmodhi4_neg2>
 4a6:	0e 94 91 02 	call	0x522	; 0x522 <__udivmodhi4>
 4aa:	07 fc       	sbrc	r0, 7
 4ac:	05 d0       	rcall	.+10     	; 0x4b8 <__divmodhi4_neg2>
 4ae:	3e f4       	brtc	.+14     	; 0x4be <__divmodhi4_exit>

000004b0 <__divmodhi4_neg1>:
 4b0:	90 95       	com	r25
 4b2:	81 95       	neg	r24
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__divmodhi4_neg2>:
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255

000004be <__divmodhi4_exit>:
 4be:	08 95       	ret

000004c0 <__udivmodsi4>:
 4c0:	a1 e2       	ldi	r26, 0x21	; 33
 4c2:	1a 2e       	mov	r1, r26
 4c4:	aa 1b       	sub	r26, r26
 4c6:	bb 1b       	sub	r27, r27
 4c8:	fd 01       	movw	r30, r26
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__udivmodsi4_ep>

000004cc <__udivmodsi4_loop>:
 4cc:	aa 1f       	adc	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	ee 1f       	adc	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	a2 17       	cp	r26, r18
 4d6:	b3 07       	cpc	r27, r19
 4d8:	e4 07       	cpc	r30, r20
 4da:	f5 07       	cpc	r31, r21
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__udivmodsi4_ep>
 4de:	a2 1b       	sub	r26, r18
 4e0:	b3 0b       	sbc	r27, r19
 4e2:	e4 0b       	sbc	r30, r20
 4e4:	f5 0b       	sbc	r31, r21

000004e6 <__udivmodsi4_ep>:
 4e6:	66 1f       	adc	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	1a 94       	dec	r1
 4f0:	69 f7       	brne	.-38     	; 0x4cc <__udivmodsi4_loop>
 4f2:	60 95       	com	r22
 4f4:	70 95       	com	r23
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	bd 01       	movw	r22, r26
 500:	cf 01       	movw	r24, r30
 502:	08 95       	ret

00000504 <__umulhisi3>:
 504:	a2 9f       	mul	r26, r18
 506:	b0 01       	movw	r22, r0
 508:	b3 9f       	mul	r27, r19
 50a:	c0 01       	movw	r24, r0
 50c:	a3 9f       	mul	r26, r19
 50e:	70 0d       	add	r23, r0
 510:	81 1d       	adc	r24, r1
 512:	11 24       	eor	r1, r1
 514:	91 1d       	adc	r25, r1
 516:	b2 9f       	mul	r27, r18
 518:	70 0d       	add	r23, r0
 51a:	81 1d       	adc	r24, r1
 51c:	11 24       	eor	r1, r1
 51e:	91 1d       	adc	r25, r1
 520:	08 95       	ret

00000522 <__udivmodhi4>:
 522:	aa 1b       	sub	r26, r26
 524:	bb 1b       	sub	r27, r27
 526:	51 e1       	ldi	r21, 0x11	; 17
 528:	07 c0       	rjmp	.+14     	; 0x538 <__udivmodhi4_ep>

0000052a <__udivmodhi4_loop>:
 52a:	aa 1f       	adc	r26, r26
 52c:	bb 1f       	adc	r27, r27
 52e:	a6 17       	cp	r26, r22
 530:	b7 07       	cpc	r27, r23
 532:	10 f0       	brcs	.+4      	; 0x538 <__udivmodhi4_ep>
 534:	a6 1b       	sub	r26, r22
 536:	b7 0b       	sbc	r27, r23

00000538 <__udivmodhi4_ep>:
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	5a 95       	dec	r21
 53e:	a9 f7       	brne	.-22     	; 0x52a <__udivmodhi4_loop>
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	bc 01       	movw	r22, r24
 546:	cd 01       	movw	r24, r26
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
