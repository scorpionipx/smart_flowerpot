
SmartFlowerpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00001700  00001794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080011a  0080011a  0000184e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a56  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001105  00000000  00000000  0000552a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001563  00000000  00000000  0000662f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00007b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e8  00000000  00000000  00007fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b5  00000000  00000000  00008888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000913d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_7>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_13>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	35 02       	muls	r19, r21
      56:	6c 02       	muls	r22, r28
      58:	a3 02       	muls	r26, r19
      5a:	da 02       	muls	r29, r26
      5c:	11 03       	mulsu	r17, r17
      5e:	48 03       	fmul	r20, r16
      60:	7f 03       	fmul	r23, r23
      62:	08 00       	.word	0x0008	; ????
      64:	00 00       	nop
      66:	be 92       	st	-X, r11
      68:	24 49       	sbci	r18, 0x94	; 148
      6a:	12 3e       	cpi	r17, 0xE2	; 226
      6c:	ab aa       	std	Y+51, r10	; 0x33
      6e:	aa 2a       	or	r10, r26
      70:	be cd       	rjmp	.-1156   	; 0xfffffbee <__eeprom_end+0xff7efbee>
      72:	cc cc       	rjmp	.-1640   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>
      74:	4c 3e       	cpi	r20, 0xEC	; 236
      76:	00 00       	nop
      78:	00 80       	ld	r0, Z
      7a:	be ab       	std	Y+54, r27	; 0x36
      7c:	aa aa       	std	Y+50, r10	; 0x32
      7e:	aa 3e       	cpi	r26, 0xEA	; 234
      80:	00 00       	nop
      82:	00 00       	nop
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 08       	sbc	r0, r0
      90:	41 78       	andi	r20, 0x81	; 129
      92:	d3 bb       	out	0x13, r29	; 19
      94:	43 87       	std	Z+11, r20	; 0x0b
      96:	d1 13       	cpse	r29, r17
      98:	3d 19       	sub	r19, r13
      9a:	0e 3c       	cpi	r16, 0xCE	; 206
      9c:	c3 bd       	out	0x23, r28	; 35
      9e:	42 82       	std	Z+2, r4	; 0x02
      a0:	ad 2b       	or	r26, r29
      a2:	3e 68       	ori	r19, 0x8E	; 142
      a4:	ec 82       	std	Y+4, r14	; 0x04
      a6:	76 be       	out	0x36, r7	; 54
      a8:	d9 8f       	std	Y+25, r29	; 0x19
      aa:	e1 a9       	ldd	r30, Z+49	; 0x31
      ac:	3e 4c       	sbci	r19, 0xCE	; 206
      ae:	80 ef       	ldi	r24, 0xF0	; 240
      b0:	ff be       	out	0x3f, r15	; 63
      b2:	01 c4       	rjmp	.+2050   	; 0x8b6 <init_LCD_Display+0x2>
      b4:	ff 7f       	andi	r31, 0xFF	; 255
      b6:	3f 00       	.word	0x003f	; ????
      b8:	00 00       	nop
	...

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf e5       	ldi	r28, 0x5F	; 95
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e6       	ldi	r26, 0x60	; 96
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e0 e0       	ldi	r30, 0x00	; 0
      d0:	f7 e1       	ldi	r31, 0x17	; 23
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 31       	cpi	r26, 0x1A	; 26
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	aa e1       	ldi	r26, 0x1A	; 26
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ae 34       	cpi	r26, 0x4E	; 78
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 9c 07 	call	0xf38	; 0xf38 <main>
      f2:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <ADC_Init>:
#define K_TO_C_100 27315// conversion factor
#define TEMP_OFFSET_100 -120 // temperature offset * 10000

void ADC_Init(void)
{
		DDRA = 0x00;
      fa:	1a ba       	out	0x1a, r1	; 26
	    // AREF = AVcc
	    ADMUX = (1<<REFS0);
      fc:	80 e4       	ldi	r24, 0x40	; 64
      fe:	87 b9       	out	0x07, r24	; 7
	    
	    // ADC Enable and prescaler of 128
	    // 16000000/128 = 125000
	    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     100:	87 e8       	ldi	r24, 0x87	; 135
     102:	86 b9       	out	0x06, r24	; 6
     104:	08 95       	ret

00000106 <ADC_GetValue>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     106:	97 b1       	in	r25, 0x07	; 7
uint16_t ADC_GetValue(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
     108:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     10a:	98 7f       	andi	r25, 0xF8	; 248
     10c:	89 2b       	or	r24, r25
     10e:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     110:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
     112:	36 99       	sbic	0x06, 6	; 6
     114:	fe cf       	rjmp	.-4      	; 0x112 <ADC_GetValue+0xc>
	
	return (ADC);
     116:	84 b1       	in	r24, 0x04	; 4
     118:	95 b1       	in	r25, 0x05	; 5
}
     11a:	08 95       	ret

0000011c <read_temperature>:

// temperature is read as a 5 digit positive number, 2 decimals precission
void read_temperature()
{
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
	unsigned int NTC_RESISTANCE;
	long int LN_NTC_RT25_10000; // (ln(NTC_res / RT_25)) * 10000
	long int LN_B25_100_10000; // ((ln(NTC_res / RT_25)) * 10000) / B_25_100
	long int RECIPROCAL_TEMPERATURE; // 1 / TEMPERATURE
	
	VOLTAGE = (((uint32_t)ADC_GetValue(2) * 5000) / 1023);
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     12a:	9c 01       	movw	r18, r24
     12c:	a8 e8       	ldi	r26, 0x88	; 136
     12e:	b3 e1       	ldi	r27, 0x13	; 19
     130:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__umulhisi3>
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	33 e0       	ldi	r19, 0x03	; 3
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     140:	69 01       	movw	r12, r18
     142:	7a 01       	movw	r14, r20
	NTC_RESISTANCE = (uint32_t) SERIES_RESISTOR * VOLTAGE / (5000 - VOLTAGE);
     144:	44 27       	eor	r20, r20
     146:	55 27       	eor	r21, r21
     148:	a0 e1       	ldi	r26, 0x10	; 16
     14a:	b7 e2       	ldi	r27, 0x27	; 39
     14c:	0e 94 5f 0b 	call	0x16be	; 0x16be <__muluhisi3>
     150:	28 e8       	ldi	r18, 0x88	; 136
     152:	33 e1       	ldi	r19, 0x13	; 19
     154:	2c 19       	sub	r18, r12
     156:	3d 09       	sbc	r19, r13
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
	
	LN_NTC_RT25_10000 = (sint32) (log((double) NTC_RESISTANCE / RT_25) * 10000);
     160:	b9 01       	movw	r22, r18
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 08 09 	call	0x1210	; 0x1210 <__floatunsisf>
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e4       	ldi	r19, 0x40	; 64
     16e:	4c e1       	ldi	r20, 0x1C	; 28
     170:	56 e4       	ldi	r21, 0x46	; 70
     172:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divsf3>
     176:	0e 94 9e 09 	call	0x133c	; 0x133c <log>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e4       	ldi	r19, 0x40	; 64
     17e:	4c e1       	ldi	r20, 0x1C	; 28
     180:	56 e4       	ldi	r21, 0x46	; 70
     182:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     186:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__fixsfsi>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
	LN_B25_100_10000 = (sint32) LN_NTC_RT25_10000 * 100 / B_25_100;
     18e:	a4 e6       	ldi	r26, 0x64	; 100
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	0e 94 5f 0b 	call	0x16be	; 0x16be <__muluhisi3>
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	30 e1       	ldi	r19, 0x10	; 16
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
	RECIPROCAL_TEMPERATURE = (sint32) LN_B25_100_10000 + RECIPROCAL_T25_10000;
     1a2:	26 5e       	subi	r18, 0xE6	; 230
     1a4:	32 4f       	sbci	r19, 0xF2	; 242
     1a6:	4f 4f       	sbci	r20, 0xFF	; 255
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
	TEMPERATURE = (sint32) 100000000 / RECIPROCAL_TEMPERATURE;
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	71 ee       	ldi	r23, 0xE1	; 225
     1ae:	85 ef       	ldi	r24, 0xF5	; 245
     1b0:	95 e0       	ldi	r25, 0x05	; 5
     1b2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
	TEMPERATURE -= K_TO_C_100;
	TEMPERATURE += TEMP_OFFSET_100;
     1b6:	da 01       	movw	r26, r20
     1b8:	c9 01       	movw	r24, r18
     1ba:	8b 52       	subi	r24, 0x2B	; 43
     1bc:	9b 46       	sbci	r25, 0x6B	; 107
     1be:	a1 09       	sbc	r26, r1
     1c0:	b1 09       	sbc	r27, r1
     1c2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TEMPERATURE>
     1c6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <TEMPERATURE+0x1>
     1ca:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <TEMPERATURE+0x2>
     1ce:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <TEMPERATURE+0x3>
}
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	08 95       	ret

000001dc <read_humidity_level>:

void read_humidity_level(int sensor)
{
	switch(sensor)
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	91 05       	cpc	r25, r1
     1e0:	19 f0       	breq	.+6      	; 0x1e8 <read_humidity_level+0xc>
     1e2:	02 97       	sbiw	r24, 0x02	; 2
     1e4:	a1 f0       	breq	.+40     	; 0x20e <read_humidity_level+0x32>
     1e6:	08 95       	ret
	{
		case 1:
		{
			humidity_level_sensor_1 = (((uint32_t)ADC_GetValue(0) * 100) / 1023);
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     1ee:	9c 01       	movw	r18, r24
     1f0:	a4 e6       	ldi	r26, 0x64	; 100
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__umulhisi3>
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	33 e0       	ldi	r19, 0x03	; 3
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     204:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <humidity_level_sensor_1+0x1>
     208:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <humidity_level_sensor_1>
			break;
     20c:	08 95       	ret
		}
		case 2:
		{
			humidity_level_sensor_2 = (((uint32_t)ADC_GetValue(1) * 100) / 1023);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 83 00 	call	0x106	; 0x106 <ADC_GetValue>
     214:	9c 01       	movw	r18, r24
     216:	a4 e6       	ldi	r26, 0x64	; 100
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__umulhisi3>
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	33 e0       	ldi	r19, 0x03	; 3
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     22a:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <humidity_level_sensor_2+0x1>
     22e:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <humidity_level_sensor_2>
     232:	08 95       	ret

00000234 <init_buttons>:

// INITIALIZE uC PORT FOR BUTTONS READING AND SET BUTTONS DEFAULT VALUE TO FALSE (RELEASED)
void init_buttons()
{
	// SET PORT DIRECTION
	BUTTONS_DDR &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN);
     234:	81 b3       	in	r24, 0x11	; 17
     236:	8f 73       	andi	r24, 0x3F	; 63
     238:	81 bb       	out	0x11, r24	; 17
	
	// SET DEFAULT VALUE
	BUTTONS_PORT &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN);
     23a:	82 b3       	in	r24, 0x12	; 18
     23c:	8f 73       	andi	r24, 0x3F	; 63
     23e:	82 bb       	out	0x12, r24	; 18
	
	// GLOBAL BUTTONS STATE TRACKING INITIALIZING
	BUTTON_1_PRESSED = FALSE;
     240:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <GLOBAL_BOOL>
	BUTTON_2_PRESSED = FALSE;
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	8d 7f       	andi	r24, 0xFD	; 253
     248:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <GLOBAL_BOOL>
     24c:	08 95       	ret

0000024e <read_buttons>:
||   BUTTON_2   ||         NEXT MENU           ||
  ============================================
*/
void read_buttons()
{
	BUTTON_1_PRESSED = BUTTON_1_VALUE;
     24e:	90 b3       	in	r25, 0x10	; 16
     250:	92 95       	swap	r25
     252:	96 95       	lsr	r25
     254:	96 95       	lsr	r25
     256:	93 70       	andi	r25, 0x03	; 3
     258:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <GLOBAL_BOOL>
     25c:	90 fb       	bst	r25, 0
     25e:	80 f9       	bld	r24, 0
     260:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <GLOBAL_BOOL>
	if(BUTTON_1_PRESSED)
     264:	80 ff       	sbrs	r24, 0
     266:	03 c0       	rjmp	.+6      	; 0x26e <read_buttons+0x20>
	{
		next_menu();
     268:	0e 94 15 08 	call	0x102a	; 0x102a <next_menu>
		return;
     26c:	08 95       	ret
	}
	
	BUTTON_2_PRESSED = BUTTON_2_VALUE;
     26e:	80 b3       	in	r24, 0x10	; 16
     270:	88 1f       	adc	r24, r24
     272:	88 27       	eor	r24, r24
     274:	88 1f       	adc	r24, r24
     276:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <GLOBAL_BOOL>
     27a:	80 fb       	bst	r24, 0
     27c:	91 f9       	bld	r25, 1
     27e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <GLOBAL_BOOL>
     282:	08 95       	ret

00000284 <increment_clock>:
#include "IPX_Clock.h"

// INCREASE TIME BY ONE SECOND
void increment_clock()
{
	CLOCK.S ++;
     284:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <CLOCK+0x4>
     288:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <CLOCK+0x5>
     28c:	01 96       	adiw	r24, 0x01	; 1
	if(CLOCK.S >= 60)
     28e:	8c 33       	cpi	r24, 0x3C	; 60
     290:	91 05       	cpc	r25, r1
     292:	2c f4       	brge	.+10     	; 0x29e <increment_clock+0x1a>
#include "IPX_Clock.h"

// INCREASE TIME BY ONE SECOND
void increment_clock()
{
	CLOCK.S ++;
     294:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <CLOCK+0x5>
     298:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <CLOCK+0x4>
     29c:	08 95       	ret
	if(CLOCK.S >= 60)
	{
		CLOCK.S = 0;
     29e:	e2 e3       	ldi	r30, 0x32	; 50
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
     2a2:	15 82       	std	Z+5, r1	; 0x05
     2a4:	14 82       	std	Z+4, r1	; 0x04
		CLOCK.M ++;
     2a6:	82 81       	ldd	r24, Z+2	; 0x02
     2a8:	93 81       	ldd	r25, Z+3	; 0x03
     2aa:	01 96       	adiw	r24, 0x01	; 1
		if(CLOCK.M >= 60)
     2ac:	8c 33       	cpi	r24, 0x3C	; 60
     2ae:	91 05       	cpc	r25, r1
     2b0:	2c f4       	brge	.+10     	; 0x2bc <increment_clock+0x38>
{
	CLOCK.S ++;
	if(CLOCK.S >= 60)
	{
		CLOCK.S = 0;
		CLOCK.M ++;
     2b2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <CLOCK+0x3>
     2b6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <CLOCK+0x2>
     2ba:	08 95       	ret
		if(CLOCK.M >= 60)
		{
			CLOCK.M = 0;
     2bc:	e2 e3       	ldi	r30, 0x32	; 50
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	13 82       	std	Z+3, r1	; 0x03
     2c2:	12 82       	std	Z+2, r1	; 0x02
			CLOCK.H ++;
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	01 96       	adiw	r24, 0x01	; 1
			if(CLOCK.H >= 24)
     2ca:	88 31       	cpi	r24, 0x18	; 24
     2cc:	91 05       	cpc	r25, r1
     2ce:	2c f4       	brge	.+10     	; 0x2da <increment_clock+0x56>
		CLOCK.S = 0;
		CLOCK.M ++;
		if(CLOCK.M >= 60)
		{
			CLOCK.M = 0;
			CLOCK.H ++;
     2d0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <CLOCK+0x1>
     2d4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <CLOCK>
     2d8:	08 95       	ret
			if(CLOCK.H >= 24)
			{
				CLOCK.H = 0;
     2da:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <CLOCK+0x1>
     2de:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <CLOCK>
     2e2:	08 95       	ret

000002e4 <init_interrupt_200ms>:

// 200 ms timer
void init_interrupt_200ms()
{
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
     2e4:	8e b5       	in	r24, 0x2e	; 46
     2e6:	8b 60       	ori	r24, 0x0B	; 11
     2e8:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
     2ea:	1d bc       	out	0x2d, r1	; 45
     2ec:	1c bc       	out	0x2c, r1	; 44
	
	// initialize compare value
	OCR1A = 49999;
     2ee:	8f e4       	ldi	r24, 0x4F	; 79
     2f0:	93 ec       	ldi	r25, 0xC3	; 195
     2f2:	9b bd       	out	0x2b, r25	; 43
     2f4:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
     2f6:	89 b7       	in	r24, 0x39	; 57
     2f8:	80 61       	ori	r24, 0x10	; 16
     2fa:	89 bf       	out	0x39, r24	; 57
     2fc:	08 95       	ret

000002fe <__vector_7>:
}

// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
     2fe:	1f 92       	push	r1
     300:	0f 92       	push	r0
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	0f 92       	push	r0
     306:	11 24       	eor	r1, r1
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
	// toggle led here
	display_values();
     320:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <display_values>
	seconds_counter ++;
     324:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     328:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
     32c:	01 96       	adiw	r24, 0x01	; 1
	
	if(seconds_counter >= SECOND)
     32e:	85 30       	cpi	r24, 0x05	; 5
     330:	91 05       	cpc	r25, r1
     332:	28 f4       	brcc	.+10     	; 0x33e <__vector_7+0x40>
// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
	// toggle led here
	display_values();
	seconds_counter ++;
     334:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
     338:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
     33c:	0a c0       	rjmp	.+20     	; 0x352 <__vector_7+0x54>
	
	if(seconds_counter >= SECOND)
	{
		seconds_counter = 0;
     33e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
     342:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		increment_clock();
     346:	0e 94 42 01 	call	0x284	; 0x284 <increment_clock>
		TOGGLE_PWR_LED;
     34a:	98 b3       	in	r25, 0x18	; 24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	89 27       	eor	r24, r25
     350:	88 bb       	out	0x18, r24	; 24
	}
	
	read_humidity_counter ++;
     352:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <read_humidity_counter>
     356:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <read_humidity_counter+0x1>
     35a:	01 96       	adiw	r24, 0x01	; 1
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	91 05       	cpc	r25, r1
     360:	28 f4       	brcc	.+10     	; 0x36c <__vector_7+0x6e>
		seconds_counter = 0;
		increment_clock();
		TOGGLE_PWR_LED;
	}
	
	read_humidity_counter ++;
     362:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <read_humidity_counter+0x1>
     366:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <read_humidity_counter>
     36a:	0c c0       	rjmp	.+24     	; 0x384 <__vector_7+0x86>
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
	{
		read_humidity_counter = 0;
     36c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <read_humidity_counter+0x1>
     370:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <read_humidity_counter>
		read_humidity_level(SENSOR_1);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 ee 00 	call	0x1dc	; 0x1dc <read_humidity_level>
		read_humidity_level(SENSOR_2);
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 ee 00 	call	0x1dc	; 0x1dc <read_humidity_level>
	}
	read_tank_water_level_counter ++;
     384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     388:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     38c:	01 96       	adiw	r24, 0x01	; 1
	if (read_tank_water_level_counter >= READ_TANK_WATER_LEVEL_PERIOD)
     38e:	83 30       	cpi	r24, 0x03	; 3
     390:	91 05       	cpc	r25, r1
     392:	28 f4       	brcc	.+10     	; 0x39e <__vector_7+0xa0>
	{
		read_humidity_counter = 0;
		read_humidity_level(SENSOR_1);
		read_humidity_level(SENSOR_2);
	}
	read_tank_water_level_counter ++;
     394:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     398:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     39c:	19 c0       	rjmp	.+50     	; 0x3d0 <__vector_7+0xd2>
	if (read_tank_water_level_counter >= READ_TANK_WATER_LEVEL_PERIOD)
	{
		read_tank_water_level_counter = 0;
     39e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
     3a2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		read_buttons();
     3a6:	0e 94 27 01 	call	0x24e	; 0x24e <read_buttons>
		
		read_tank_water_level();
     3aa:	0e 94 39 08 	call	0x1072	; 0x1072 <read_tank_water_level>
		read_temperature();
     3ae:	0e 94 8e 00 	call	0x11c	; 0x11c <read_temperature>
		send_uart_data_tank_water_level();
     3b2:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <WATER_LEVEL>
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 46 07 	call	0xe8c	; 0xe8c <send_uart_8bits_data>
		send_uart_data_humidity_sensor_1();
     3bc:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <humidity_level_sensor_1>
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 46 07 	call	0xe8c	; 0xe8c <send_uart_8bits_data>
		send_uart_data_humidity_sensor_2();
     3c6:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <humidity_level_sensor_2>
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	0e 94 46 07 	call	0xe8c	; 0xe8c <send_uart_8bits_data>
	}
}
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <put_Char_LCD_Display>:
#define MAX_CHARS_PER_ROW 16


void put_Char_LCD_Display(int ch, int type)
{
	PORTC = (PORTC&0x0F)|(ch&0xF0);
     3f2:	25 b3       	in	r18, 0x15	; 21
     3f4:	38 2f       	mov	r19, r24
     3f6:	30 7f       	andi	r19, 0xF0	; 240
     3f8:	2f 70       	andi	r18, 0x0F	; 15
     3fa:	23 2b       	or	r18, r19
     3fc:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
     3fe:	25 b3       	in	r18, 0x15	; 21
     400:	61 70       	andi	r22, 0x01	; 1
     402:	2e 7f       	andi	r18, 0xFE	; 254
     404:	26 2b       	or	r18, r22
     406:	25 bb       	out	0x15, r18	; 21
	PORTC = PORTC|0x02;
     408:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     40a:	ef e3       	ldi	r30, 0x3F	; 63
     40c:	ff e1       	ldi	r31, 0x1F	; 31
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     414:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTC &= 0xFC;
     416:	25 b3       	in	r18, 0x15	; 21
     418:	2c 7f       	andi	r18, 0xFC	; 252
     41a:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0x0F)|((ch<<4)&0xF0);
     41c:	25 b3       	in	r18, 0x15	; 21
     41e:	82 95       	swap	r24
     420:	92 95       	swap	r25
     422:	90 7f       	andi	r25, 0xF0	; 240
     424:	98 27       	eor	r25, r24
     426:	80 7f       	andi	r24, 0xF0	; 240
     428:	98 27       	eor	r25, r24
     42a:	92 2f       	mov	r25, r18
     42c:	9f 70       	andi	r25, 0x0F	; 15
     42e:	89 2b       	or	r24, r25
     430:	85 bb       	out	0x15, r24	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
     432:	85 b3       	in	r24, 0x15	; 21
     434:	8e 7f       	andi	r24, 0xFE	; 254
     436:	68 2b       	or	r22, r24
     438:	65 bb       	out	0x15, r22	; 21
	PORTC = PORTC|0x02;
     43a:	a9 9a       	sbi	0x15, 1	; 21
     43c:	8f e3       	ldi	r24, 0x3F	; 63
     43e:	9f e1       	ldi	r25, 0x1F	; 31
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTC &= 0xFC;
     448:	85 b3       	in	r24, 0x15	; 21
     44a:	8c 7f       	andi	r24, 0xFC	; 252
     44c:	85 bb       	out	0x15, r24	; 21
     44e:	08 95       	ret

00000450 <init_custom_character_level>:
	init_custom_characters();
}

void init_custom_character_level()
{
	switch(WATER_LEVEL)
     450:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <WATER_LEVEL>
     454:	8e 2f       	mov	r24, r30
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	87 30       	cpi	r24, 0x07	; 7
     45a:	91 05       	cpc	r25, r1
     45c:	08 f0       	brcs	.+2      	; 0x460 <init_custom_character_level+0x10>
     45e:	86 c1       	rjmp	.+780    	; 0x76c <init_custom_character_level+0x31c>
     460:	fc 01       	movw	r30, r24
     462:	e6 5d       	subi	r30, 0xD6	; 214
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__tablejump2__>
	{
		case 0:
		{
			// tank water level 0
			put_Char_LCD_Display(80, 0);
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e5       	ldi	r24, 0x50	; 80
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	8f e1       	ldi	r24, 0x1F	; 31
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     4d6:	08 95       	ret
		}
		case 1:
		{
			// tank water level 1
			put_Char_LCD_Display(80, 0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e5       	ldi	r24, 0x50	; 80
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	8f e1       	ldi	r24, 0x1F	; 31
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	8f e1       	ldi	r24, 0x1F	; 31
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     544:	08 95       	ret
		}
		case 2:
		{
			// tank water level 2
			put_Char_LCD_Display(80, 0);
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	80 e5       	ldi	r24, 0x50	; 80
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	8f e1       	ldi	r24, 0x1F	; 31
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	8f e1       	ldi	r24, 0x1F	; 31
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	8f e1       	ldi	r24, 0x1F	; 31
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     5b2:	08 95       	ret
		}
		case 3:
		{
			// tank water level 3
			put_Char_LCD_Display(80, 0);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e5       	ldi	r24, 0x50	; 80
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	8f e1       	ldi	r24, 0x1F	; 31
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	8f e1       	ldi	r24, 0x1F	; 31
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8f e1       	ldi	r24, 0x1F	; 31
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	8f e1       	ldi	r24, 0x1F	; 31
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     620:	08 95       	ret
		}
		case 4:
		{
			// tank water level 4
			put_Char_LCD_Display(80, 0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e5       	ldi	r24, 0x50	; 80
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	8f e1       	ldi	r24, 0x1F	; 31
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	8f e1       	ldi	r24, 0x1F	; 31
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	8f e1       	ldi	r24, 0x1F	; 31
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	8f e1       	ldi	r24, 0x1F	; 31
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     68e:	08 95       	ret
		}
		case 5:
		{
			// tank water level 5
			put_Char_LCD_Display(80, 0);
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e5       	ldi	r24, 0x50	; 80
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	8f e1       	ldi	r24, 0x1F	; 31
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	8f e1       	ldi	r24, 0x1F	; 31
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	8f e1       	ldi	r24, 0x1F	; 31
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	8f e1       	ldi	r24, 0x1F	; 31
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	8f e1       	ldi	r24, 0x1F	; 31
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	8f e1       	ldi	r24, 0x1F	; 31
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     6fc:	08 95       	ret
		}
		case 6:
		{
			// tank water level 6
			put_Char_LCD_Display(80, 0);
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	80 e5       	ldi	r24, 0x50	; 80
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	8f e1       	ldi	r24, 0x1F	; 31
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8f e1       	ldi	r24, 0x1F	; 31
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	8f e1       	ldi	r24, 0x1F	; 31
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	8f e1       	ldi	r24, 0x1F	; 31
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	8f e1       	ldi	r24, 0x1F	; 31
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	8f e1       	ldi	r24, 0x1F	; 31
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	8f e1       	ldi	r24, 0x1F	; 31
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			break;
     76a:	08 95       	ret
		}
		default:
		{
			// tank water level 0
			put_Char_LCD_Display(80, 0);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	80 e5       	ldi	r24, 0x50	; 80
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b00000, 1);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_Char_LCD_Display(0b11111, 1);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	8f e1       	ldi	r24, 0x1F	; 31
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     7d8:	08 95       	ret

000007da <init_custom_characters>:
}

void init_custom_characters()
{
	// tank water level start character
	put_Char_LCD_Display(64, 0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	80 e4       	ldi	r24, 0x40	; 64
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00001, 1);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00011, 1);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b00111, 1);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	87 e0       	ldi	r24, 0x07	; 7
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b01101, 1);
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	8d e0       	ldi	r24, 0x0D	; 13
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11001, 1);
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	89 e1       	ldi	r24, 0x19	; 25
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	// tank water level end character
	put_Char_LCD_Display(72, 0);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	88 e4       	ldi	r24, 0x48	; 72
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e1       	ldi	r24, 0x10	; 16
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e1       	ldi	r24, 0x10	; 16
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e1       	ldi	r24, 0x10	; 16
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10000, 1);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e1       	ldi	r24, 0x10	; 16
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11000, 1);
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	88 e1       	ldi	r24, 0x18	; 24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b11100, 1);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	8c e1       	ldi	r24, 0x1C	; 28
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10110, 1);
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	86 e1       	ldi	r24, 0x16	; 22
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0b10011, 1);
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	83 e1       	ldi	r24, 0x13	; 19
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     8b2:	08 95       	ret

000008b4 <init_LCD_Display>:
	PORTC &= 0xFC;
}

void init_LCD_Display(void)
{
	DDRC = 0xFF;
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	84 bb       	out	0x14, r24	; 20
	put_Char_LCD_Display(0x03,0);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     8c4:	8f e5       	ldi	r24, 0x5F	; 95
     8c6:	9d e6       	ldi	r25, 0x6D	; 109
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <init_LCD_Display+0x14>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <init_LCD_Display+0x1a>
     8ce:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x03,0);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     8dc:	8f e5       	ldi	r24, 0x5F	; 95
     8de:	9d e6       	ldi	r25, 0x6D	; 109
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <init_LCD_Display+0x2c>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <init_LCD_Display+0x32>
     8e6:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x03,0);
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     8f4:	8f e5       	ldi	r24, 0x5F	; 95
     8f6:	9d e6       	ldi	r25, 0x6D	; 109
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <init_LCD_Display+0x44>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <init_LCD_Display+0x4a>
     8fe:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     90c:	8f e5       	ldi	r24, 0x5F	; 95
     90e:	9d e6       	ldi	r25, 0x6D	; 109
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <init_LCD_Display+0x5c>
     914:	00 c0       	rjmp	.+0      	; 0x916 <init_LCD_Display+0x62>
     916:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	8c e0       	ldi	r24, 0x0C	; 12
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     924:	8f e5       	ldi	r24, 0x5F	; 95
     926:	9d e6       	ldi	r25, 0x6D	; 109
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <init_LCD_Display+0x74>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <init_LCD_Display+0x7a>
     92e:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     93c:	8f e5       	ldi	r24, 0x5F	; 95
     93e:	9d e6       	ldi	r25, 0x6D	; 109
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <init_LCD_Display+0x8c>
     944:	00 c0       	rjmp	.+0      	; 0x946 <init_LCD_Display+0x92>
     946:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	80 e8       	ldi	r24, 0x80	; 128
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     954:	8f e5       	ldi	r24, 0x5F	; 95
     956:	9d e6       	ldi	r25, 0x6D	; 109
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <init_LCD_Display+0xa4>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <init_LCD_Display+0xaa>
     95e:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	init_custom_characters();
     96c:	0e 94 ed 03 	call	0x7da	; 0x7da <init_custom_characters>
     970:	08 95       	ret

00000972 <put_string>:
	put_Char_LCD_Display(0b10011, 1);
}

// display string
void put_string(const char *_string)
{
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	8c 01       	movw	r16, r24
     980:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
     982:	c0 e0       	ldi	r28, 0x00	; 0
     984:	d0 e0       	ldi	r29, 0x00	; 0
     986:	09 c0       	rjmp	.+18     	; 0x99a <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
     988:	f7 01       	movw	r30, r14
     98a:	81 91       	ld	r24, Z+
     98c:	7f 01       	movw	r14, r30
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
     998:	21 96       	adiw	r28, 0x01	; 1
     99a:	f8 01       	movw	r30, r16
     99c:	01 90       	ld	r0, Z+
     99e:	00 20       	and	r0, r0
     9a0:	e9 f7       	brne	.-6      	; 0x99c <put_string+0x2a>
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	e0 1b       	sub	r30, r16
     9a6:	f1 0b       	sbc	r31, r17
     9a8:	ce 17       	cp	r28, r30
     9aa:	df 07       	cpc	r29, r31
     9ac:	68 f3       	brcs	.-38     	; 0x988 <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <display_umidity_level_title>:

// displays humidity percentage title
void display_umidity_level_title()
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
	int index;
	
	put_Char_LCD_Display(0x01,0); // clear LCD
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 e8       	ldi	r24, 0x80	; 128
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(SENSOR_1_TITLE);
     9d8:	82 e6       	ldi	r24, 0x62	; 98
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     9e0:	c5 e0       	ldi	r28, 0x05	; 5
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e2       	ldi	r24, 0x20	; 32
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     9f0:	21 97       	sbiw	r28, 0x01	; 1
	
	put_Char_LCD_Display(0x01,0); // clear LCD
	
	put_Char_LCD_Display(0x80, 0);
	put_string(SENSOR_1_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
     9f2:	c1 f7       	brne	.-16     	; 0x9e4 <display_umidity_level_title+0x28>
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <display_umidity_level_title+0x4c>
	
	put_Char_LCD_Display(0xC0, 0);
	put_string(SENSOR_2_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     a02:	21 97       	sbiw	r28, 0x01	; 1
		put_Char_LCD_Display(' ', 1);
	}
	
	put_Char_LCD_Display(0xC0, 0);
	put_string(SENSOR_2_TITLE);
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
     a04:	c1 f7       	brne	.-16     	; 0x9f6 <display_umidity_level_title+0x3a>
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <display_umidity_level_title+0x66>
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_1_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
	}
	
	put_Char_LCD_Display(0xC0, 0);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 ec       	ldi	r24, 0xC0	; 192
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(SENSOR_2_TITLE);
     a14:	8d e6       	ldi	r24, 0x6D	; 109
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     a1c:	c5 e0       	ldi	r28, 0x05	; 5
     a1e:	d0 e0       	ldi	r29, 0x00	; 0
     a20:	ea cf       	rjmp	.-44     	; 0x9f6 <display_umidity_level_title+0x3a>
	for(index = 0; index<MAX_CHARS_PER_ROW-(strlen(SENSOR_2_TITLE)) - 1; index++)
	{
		put_Char_LCD_Display(' ', 1);
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <display_error_title>:

// displays error title
void display_error_title()
{	
	put_Char_LCD_Display(0x01,0); // clear LCD
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(ERROR_TITLE);
     a40:	88 e7       	ldi	r24, 0x78	; 120
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     a48:	08 95       	ret

00000a4a <display_temperature_title>:
}

// displays temperature title
void display_temperature_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(TEMPERATURE_TITLE);
     a62:	89 e8       	ldi	r24, 0x89	; 137
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	put_Char_LCD_Display(0xC0 + 4, 0);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	84 ec       	ldi	r24, 0xC4	; 196
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(0xDF, 1);
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	8f ed       	ldi	r24, 0xDF	; 223
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('C', 1);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	83 e4       	ldi	r24, 0x43	; 67
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     a8e:	08 95       	ret

00000a90 <display_battery_title>:
}

// displays battery level title
void display_battery_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(BATTERY_TITLE);
     aa8:	85 e9       	ldi	r24, 0x95	; 149
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     ab0:	08 95       	ret

00000ab2 <display_error>:
}

void display_error()
{
	put_Char_LCD_Display(0xC0, 0);
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 ec       	ldi	r24, 0xC0	; 192
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(ERROR);
     abe:	8d e3       	ldi	r24, 0x3D	; 61
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     ac6:	08 95       	ret

00000ac8 <display_tank_water_level_title>:
}

// display tank water level title
void display_tank_water_level_title()
{
	put_Char_LCD_Display(0x01,0); // clear LCD
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0); // go to row 0, column 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 e8       	ldi	r24, 0x80	; 128
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(TANK_WATER_LEVEL_TITLE);
     ae0:	83 ea       	ldi	r24, 0xA3	; 163
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     ae8:	08 95       	ret

00000aea <display_tank_water_level>:
}

void display_tank_water_level()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
	init_custom_character_level(WATER_LEVEL);
     aee:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <WATER_LEVEL>
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 28 02 	call	0x450	; 0x450 <init_custom_character_level>
	put_Char_LCD_Display(0xC0, 0);
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 ec       	ldi	r24, 0xC0	; 192
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_START, 1);
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     b10:	c8 e0       	ldi	r28, 0x08	; 8
     b12:	d0 e0       	ldi	r29, 0x00	; 0
	for(short i = 0; i < 8; i++)
	{
		put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_WATER_LEVEL, 1);
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
     b20:	21 97       	sbiw	r28, 0x01	; 1
void display_tank_water_level()
{
	init_custom_character_level(WATER_LEVEL);
	put_Char_LCD_Display(0xC0, 0);
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_START, 1);
	for(short i = 0; i < 8; i++)
     b22:	c1 f7       	brne	.-16     	; 0xb14 <display_tank_water_level+0x2a>
	{
		put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_WATER_LEVEL, 1);
	}
	put_Char_LCD_Display(SPECIAL_CHARACTER_TANK_LEVEL_END, 1);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	08 95       	ret

00000b36 <humidity_level_int_value_to_string>:

// self made itoa
const char * humidity_level_int_value_to_string(int value)
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	9c 01       	movw	r18, r24
	char digit_3 = '\0';
	char digit_4 = '\0';
	
	static char humidity_level[4];
	
	first_digit = (value/100)%10;
     b3c:	64 e6       	ldi	r22, 0x64	; 100
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     b44:	cb 01       	movw	r24, r22
     b46:	ca e0       	ldi	r28, 0x0A	; 10
     b48:	d0 e0       	ldi	r29, 0x00	; 0
     b4a:	be 01       	movw	r22, r28
     b4c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     b50:	fc 01       	movw	r30, r24
	second_digit = (value/10)%10;
     b52:	c9 01       	movw	r24, r18
     b54:	be 01       	movw	r22, r28
     b56:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     b5a:	38 2f       	mov	r19, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	be 01       	movw	r22, r28
     b60:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     b64:	28 2f       	mov	r18, r24
	third_digit = value%10;
	
	if(first_digit == 0)
     b66:	30 97       	sbiw	r30, 0x00	; 0
     b68:	69 f4       	brne	.+26     	; 0xb84 <humidity_level_int_value_to_string+0x4e>
	{
		if(second_digit == 0)
     b6a:	89 2b       	or	r24, r25
     b6c:	29 f4       	brne	.+10     	; 0xb78 <humidity_level_int_value_to_string+0x42>
		{
			digit_1 = third_digit + '0';
     b6e:	90 e3       	ldi	r25, 0x30	; 48
     b70:	93 0f       	add	r25, r19
	int second_digit;
	int third_digit;
	
	char digit_1 = '\0';
	char digit_2 = '\0';
	char digit_3 = '\0';
     b72:	30 e0       	ldi	r19, 0x00	; 0
	if(first_digit == 0)
	{
		if(second_digit == 0)
		{
			digit_1 = third_digit + '0';
			digit_2 = '\0';
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	0a c0       	rjmp	.+20     	; 0xb8c <humidity_level_int_value_to_string+0x56>
		}
		else
		{
			digit_1 = second_digit + '0';
     b78:	90 e3       	ldi	r25, 0x30	; 48
     b7a:	92 0f       	add	r25, r18
			digit_2 = third_digit + '0';
     b7c:	20 e3       	ldi	r18, 0x30	; 48
     b7e:	23 0f       	add	r18, r19
			digit_3 = '\0';
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <humidity_level_int_value_to_string+0x56>
		}
	}
	else
	{
		digit_1 = first_digit + '0';
     b84:	90 e3       	ldi	r25, 0x30	; 48
     b86:	9e 0f       	add	r25, r30
		digit_2 = second_digit + '0';
     b88:	20 5d       	subi	r18, 0xD0	; 208
		digit_3 = third_digit + '0';
     b8a:	30 5d       	subi	r19, 0xD0	; 208
		digit_4 = '\0';
	}
	
	humidity_level[0] = digit_1;
     b8c:	ee e1       	ldi	r30, 0x1E	; 30
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	90 83       	st	Z, r25
	humidity_level[1] = digit_2;
     b92:	21 83       	std	Z+1, r18	; 0x01
	humidity_level[2] = digit_3;
     b94:	32 83       	std	Z+2, r19	; 0x02
	humidity_level[3] = digit_4;
     b96:	13 82       	std	Z+3, r1	; 0x03
	
	return humidity_level;
}
     b98:	cf 01       	movw	r24, r30
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <display_umidity_level_values>:
void display_umidity_level_values()
{
	int sensor_1_display_offset = strlen(SENSOR_1_TITLE);
	int sensor_2_display_offset = strlen(SENSOR_2_TITLE);
	
	put_Char_LCD_Display(0x80 + sensor_1_display_offset, 0);
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	8a e8       	ldi	r24, 0x8A	; 138
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(humidity_level_sensor_1));
     bac:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <humidity_level_sensor_1>
     bb0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <humidity_level_sensor_1+0x1>
     bb4:	0e 94 9b 05 	call	0xb36	; 0xb36 <humidity_level_int_value_to_string>
     bb8:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
     bbc:	84 eb       	ldi	r24, 0xB4	; 180
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	put_string("  ");
     bc4:	86 eb       	ldi	r24, 0xB6	; 182
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	
	put_Char_LCD_Display(0xC0 + sensor_2_display_offset, 0);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	8a ec       	ldi	r24, 0xCA	; 202
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(humidity_level_sensor_2));
     bd8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <humidity_level_sensor_2>
     bdc:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <humidity_level_sensor_2+0x1>
     be0:	0e 94 9b 05 	call	0xb36	; 0xb36 <humidity_level_int_value_to_string>
     be4:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
     be8:	84 eb       	ldi	r24, 0xB4	; 180
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	put_string("  ");
     bf0:	86 eb       	ldi	r24, 0xB6	; 182
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     bf8:	08 95       	ret

00000bfa <display_temperature_values>:
}

void display_temperature_values()
{
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
	put_Char_LCD_Display(0xC0, 0);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 ec       	ldi	r24, 0xC0	; 192
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	//put_Char_LCD_Display((TEMPERATURE / 10000)%10 + '0', 1);
	put_Char_LCD_Display((TEMPERATURE / 1000)%10 + '0', 1);
     c0e:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <TEMPERATURE>
     c12:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <TEMPERATURE+0x1>
     c16:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <TEMPERATURE+0x2>
     c1a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <TEMPERATURE+0x3>
     c1e:	28 ee       	ldi	r18, 0xE8	; 232
     c20:	33 e0       	ldi	r19, 0x03	; 3
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     c2a:	0f 2e       	mov	r0, r31
     c2c:	fa e0       	ldi	r31, 0x0A	; 10
     c2e:	cf 2e       	mov	r12, r31
     c30:	d1 2c       	mov	r13, r1
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
     c36:	f0 2d       	mov	r31, r0
     c38:	ca 01       	movw	r24, r20
     c3a:	b9 01       	movw	r22, r18
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     c44:	cb 01       	movw	r24, r22
     c46:	c0 96       	adiw	r24, 0x30	; 48
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display((TEMPERATURE / 100)%10 + '0', 1);
     c50:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <TEMPERATURE>
     c54:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <TEMPERATURE+0x1>
     c58:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <TEMPERATURE+0x2>
     c5c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <TEMPERATURE+0x3>
     c60:	24 e6       	ldi	r18, 0x64	; 100
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     c6c:	ca 01       	movw	r24, r20
     c6e:	b9 01       	movw	r22, r18
     c70:	a7 01       	movw	r20, r14
     c72:	96 01       	movw	r18, r12
     c74:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     c78:	cb 01       	movw	r24, r22
     c7a:	c0 96       	adiw	r24, 0x30	; 48
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('.', 1);
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	8e e2       	ldi	r24, 0x2E	; 46
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display((TEMPERATURE / 10)%10 + '0', 1);
     c90:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <TEMPERATURE>
     c94:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <TEMPERATURE+0x1>
     c98:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <TEMPERATURE+0x2>
     c9c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <TEMPERATURE+0x3>
     ca0:	a7 01       	movw	r20, r14
     ca2:	96 01       	movw	r18, r12
     ca4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     ca8:	ca 01       	movw	r24, r20
     caa:	b9 01       	movw	r22, r18
     cac:	a7 01       	movw	r20, r14
     cae:	96 01       	movw	r18, r12
     cb0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodsi4>
     cb4:	cb 01       	movw	r24, r22
     cb6:	c0 96       	adiw	r24, 0x30	; 48
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	//put_Char_LCD_Display(TEMPERATURE % 10 + '0', 1);
}
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <display_clock_title>:

void display_clock_title()
{	
	put_Char_LCD_Display(0x01,0);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(CLOCK_DATE_TITLE);
     ce2:	89 eb       	ldi	r24, 0xB9	; 185
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 ec       	ldi	r24, 0xC0	; 192
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(CLOCK_TIME_TITLE);
     cf6:	8e eb       	ldi	r24, 0xBE	; 190
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     cfe:	08 95       	ret

00000d00 <display_initializing_message>:
}

void display_initializing_message()
{
	put_Char_LCD_Display(0x01,0);
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	80 e8       	ldi	r24, 0x80	; 128
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string("Initializing...");
     d18:	83 ec       	ldi	r24, 0xC3	; 195
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     d20:	08 95       	ret

00000d22 <display_clock_values>:
}

void display_clock_values()
{
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
	int clock_date_display_offset = strlen(CLOCK_DATE_TITLE);
	int clock_time_display_offset = strlen(CLOCK_TIME_TITLE) + 1;
	
	put_Char_LCD_Display(0x80 + clock_date_display_offset, 0);
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	84 e8       	ldi	r24, 0x84	; 132
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_string(" 01 MAY 2017");
     d36:	83 ed       	ldi	r24, 0xD3	; 211
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
	
	put_Char_LCD_Display(0xC0 + clock_time_display_offset, 0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
     d4a:	c2 e3       	ldi	r28, 0x32	; 50
     d4c:	d1 e0       	ldi	r29, 0x01	; 1
     d4e:	88 81       	ld	r24, Y
     d50:	99 81       	ldd	r25, Y+1	; 0x01
     d52:	0a e0       	ldi	r16, 0x0A	; 10
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	b8 01       	movw	r22, r16
     d58:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     d5c:	cb 01       	movw	r24, r22
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	c0 96       	adiw	r24, 0x30	; 48
     d64:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
     d68:	88 81       	ld	r24, Y
     d6a:	99 81       	ldd	r25, Y+1	; 0x01
     d6c:	b8 01       	movw	r22, r16
     d6e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	c0 96       	adiw	r24, 0x30	; 48
     d78:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8a e3       	ldi	r24, 0x3A	; 58
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	b8 01       	movw	r22, r16
     d8e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     d92:	cb 01       	movw	r24, r22
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	c0 96       	adiw	r24, 0x30	; 48
     d9a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	b8 01       	movw	r22, r16
     da4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	c0 96       	adiw	r24, 0x30	; 48
     dae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	8a e3       	ldi	r24, 0x3A	; 58
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	9d 81       	ldd	r25, Y+5	; 0x05
     dc2:	b8 01       	movw	r22, r16
     dc4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     dc8:	cb 01       	movw	r24, r22
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	c0 96       	adiw	r24, 0x30	; 48
     dd0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	b8 01       	movw	r22, r16
     dda:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__divmodhi4>
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	c0 96       	adiw	r24, 0x30	; 48
     de4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <display_values>:

void display_values()
{
	switch(MENU)
     df2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MENU>
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	61 f0       	breq	.+24     	; 0xe12 <display_values+0x20>
     dfa:	28 f4       	brcc	.+10     	; 0xe06 <display_values+0x14>
     dfc:	88 23       	and	r24, r24
     dfe:	e9 f0       	breq	.+58     	; 0xe3a <display_values+0x48>
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	c1 f0       	breq	.+48     	; 0xe34 <display_values+0x42>
     e04:	20 c0       	rjmp	.+64     	; 0xe46 <display_values+0x54>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	51 f0       	breq	.+20     	; 0xe1e <display_values+0x2c>
     e0a:	d0 f0       	brcs	.+52     	; 0xe40 <display_values+0x4e>
     e0c:	85 30       	cpi	r24, 0x05	; 5
     e0e:	21 f0       	breq	.+8      	; 0xe18 <display_values+0x26>
     e10:	1a c0       	rjmp	.+52     	; 0xe46 <display_values+0x54>
	{
		case CLOCK_MENU:
		{
			display_clock_values();
     e12:	0e 94 91 06 	call	0xd22	; 0xd22 <display_clock_values>
			break;
     e16:	08 95       	ret
		}
		case TEMPERATURE_MENU:
		{
			display_temperature_values();
     e18:	0e 94 fd 05 	call	0xbfa	; 0xbfa <display_temperature_values>
			break;
     e1c:	08 95       	ret
		}
		case BATTERY_LEVEL_MENU:
		{
			put_Char_LCD_Display(0xC0, 0);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	80 ec       	ldi	r24, 0xC0	; 192
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_string("battery");
     e2a:	80 ee       	ldi	r24, 0xE0	; 224
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
			break;
     e32:	08 95       	ret
		}
		case SENSOR_VALUES_MENU:
		{
			display_umidity_level_values();
     e34:	0e 94 d0 05 	call	0xba0	; 0xba0 <display_umidity_level_values>
			break;
     e38:	08 95       	ret
		}
		case ERROR_MENU:
		{
			display_error();
     e3a:	0e 94 59 05 	call	0xab2	; 0xab2 <display_error>
			break;
     e3e:	08 95       	ret
		}
		case TANK_WATER_LEVEL_MENU:
		{
			display_tank_water_level();
     e40:	0e 94 75 05 	call	0xaea	; 0xaea <display_tank_water_level>
			break;
     e44:	08 95       	ret
		}
		default:
		{
			put_Char_LCD_Display(0xC0, 0);
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 ec       	ldi	r24, 0xC0	; 192
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <put_Char_LCD_Display>
			put_string("fatal error");
     e52:	88 ee       	ldi	r24, 0xE8	; 232
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 b9 04 	call	0x972	; 0x972 <put_string>
     e5a:	08 95       	ret

00000e5c <init_UART>:

unsigned char received_command;

void init_UART(void)
{
	UCSRB = (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
     e5c:	88 e1       	ldi	r24, 0x18	; 24
     e5e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
     e60:	86 e8       	ldi	r24, 0x86	; 134
     e62:	80 bd       	out	0x20, r24	; 32

	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
     e64:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
     e66:	87 e6       	ldi	r24, 0x67	; 103
     e68:	89 b9       	out	0x09, r24	; 9

	UCSRB |= (1 << RXCIE); // Enable the USART Recieve Complete interrupt (USART_RXC)
     e6a:	57 9a       	sbi	0x0a, 7	; 10
     e6c:	08 95       	ret

00000e6e <__vector_13>:
}

ISR(USART_RXC_vect)
{
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	8f 93       	push	r24
	received_command = UDR; // Fetch the received byte value into the variable "ByteReceived"
     e7a:	8c b1       	in	r24, 0x0c	; 12
     e7c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <received_command>
	//UDR = received_command; // Echo back the received byte back to the computer
}
     e80:	8f 91       	pop	r24
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <send_uart_8bits_data>:

void send_uart_8bits_data(unsigned char ID, unsigned char data)
{
	// mark start of transmission
	UDR = 0;
     e8c:	1c b8       	out	0x0c, r1	; 12
     e8e:	ef ed       	ldi	r30, 0xDF	; 223
     e90:	fe e2       	ldi	r31, 0x2E	; 46
     e92:	31 97       	sbiw	r30, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <send_uart_8bits_data+0x6>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <send_uart_8bits_data+0xc>
     e98:	00 00       	nop
	_delay_ms(UART_DELAY);
	UDR = 0;
     e9a:	1c b8       	out	0x0c, r1	; 12
     e9c:	ef ed       	ldi	r30, 0xDF	; 223
     e9e:	fe e2       	ldi	r31, 0x2E	; 46
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <send_uart_8bits_data+0x14>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <send_uart_8bits_data+0x1a>
     ea6:	00 00       	nop
	_delay_ms(UART_DELAY);
	
	UDR = ID;
     ea8:	8c b9       	out	0x0c, r24	; 12
     eaa:	8f ed       	ldi	r24, 0xDF	; 223
     eac:	9e e2       	ldi	r25, 0x2E	; 46
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <send_uart_8bits_data+0x22>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <send_uart_8bits_data+0x28>
     eb4:	00 00       	nop
	_delay_ms(UART_DELAY);
	UDR = data;
     eb6:	6c b9       	out	0x0c, r22	; 12
     eb8:	ef ed       	ldi	r30, 0xDF	; 223
     eba:	fe e2       	ldi	r31, 0x2E	; 46
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <send_uart_8bits_data+0x30>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <send_uart_8bits_data+0x36>
     ec2:	00 00       	nop
     ec4:	08 95       	ret

00000ec6 <init_uC>:
	init_globals();
}

void init_uC(void)
{
	DDRB |= (1 << 0);
     ec6:	b8 9a       	sbi	0x17, 0	; 23
     ec8:	08 95       	ret

00000eca <init_globals>:
}

void init_globals()
{
	MENUs[0] = ERROR_MENU;
     eca:	e2 e2       	ldi	r30, 0x22	; 34
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	10 82       	st	Z, r1
	MENUs[1] = SENSOR_VALUES_MENU;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	81 83       	std	Z+1, r24	; 0x01
	MENUs[2] = CLOCK_MENU;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	82 83       	std	Z+2, r24	; 0x02
	MENUs[3] = TANK_WATER_LEVEL_MENU;
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	83 83       	std	Z+3, r24	; 0x03
	MENUs[4] = BATTERY_LEVEL_MENU;
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	84 83       	std	Z+4, r24	; 0x04
	MENUs[5] = TEMPERATURE_MENU;
     ee0:	85 e0       	ldi	r24, 0x05	; 5
     ee2:	85 83       	std	Z+5, r24	; 0x05
	MENUs[6] = UNDEFINED_MENU;
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	86 83       	std	Z+6, r24	; 0x06
	MENUs[7] = UNDEFINED_MENU;
     ee8:	87 83       	std	Z+7, r24	; 0x07
	MENUs[8] = UNDEFINED_MENU;
     eea:	80 87       	std	Z+8, r24	; 0x08
	MENUs[9] = UNDEFINED_MENU;
     eec:	81 87       	std	Z+9, r24	; 0x09
	
	strcpy(ERROR, ERROR_NO_ERROR);
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	e4 ef       	ldi	r30, 0xF4	; 244
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ad e3       	ldi	r26, 0x3D	; 61
     ef6:	b1 e0       	ldi	r27, 0x01	; 1
     ef8:	01 90       	ld	r0, Z+
     efa:	0d 92       	st	X+, r0
     efc:	8a 95       	dec	r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <init_globals+0x2e>
	
	humidity_level_sensor_1 = 0;
     f00:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <humidity_level_sensor_1+0x1>
     f04:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <humidity_level_sensor_1>
	humidity_level_sensor_2 = 0;
     f08:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <humidity_level_sensor_2+0x1>
     f0c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <humidity_level_sensor_2>
	WATER_LEVEL = 0;
     f10:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <WATER_LEVEL>
	TEMPERATURE = 27;
     f14:	8b e1       	ldi	r24, 0x1B	; 27
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	a0 e0       	ldi	r26, 0x00	; 0
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <TEMPERATURE>
     f20:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <TEMPERATURE+0x1>
     f24:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <TEMPERATURE+0x2>
     f28:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <TEMPERATURE+0x3>
     f2c:	08 95       	ret

00000f2e <general_init>:
	}
}

void general_init()
{
	init_uC();
     f2e:	0e 94 63 07 	call	0xec6	; 0xec6 <init_uC>
	init_globals();
     f32:	0e 94 65 07 	call	0xeca	; 0xeca <init_globals>
     f36:	08 95       	ret

00000f38 <main>:
void init_globals();
void init_uC(void);

int main(void)
{
	general_init();
     f38:	0e 94 97 07 	call	0xf2e	; 0xf2e <general_init>
	
	init_UART();
     f3c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <init_UART>
	init_interrupt_200ms();
     f40:	0e 94 72 01 	call	0x2e4	; 0x2e4 <init_interrupt_200ms>
	ADC_Init();
     f44:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_Init>
	init_LCD_Display();
     f48:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <init_LCD_Display>
	init_ipx_water_level_sensor();
     f4c:	0e 94 32 08 	call	0x1064	; 0x1064 <init_ipx_water_level_sensor>
	init_buttons();
     f50:	0e 94 1a 01 	call	0x234	; 0x234 <init_buttons>
	
	
	
	display_initializing_message();
     f54:	0e 94 80 06 	call	0xd00	; 0xd00 <display_initializing_message>
     f58:	2f ef       	ldi	r18, 0xFF	; 255
     f5a:	83 ed       	ldi	r24, 0xD3	; 211
     f5c:	90 e3       	ldi	r25, 0x30	; 48
     f5e:	21 50       	subi	r18, 0x01	; 1
     f60:	80 40       	sbci	r24, 0x00	; 0
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	e1 f7       	brne	.-8      	; 0xf5e <main+0x26>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <main+0x30>
     f68:	00 00       	nop
	_delay_ms(1000);
	change_menu(TEMPERATURE_MENU);
     f6a:	85 e0       	ldi	r24, 0x05	; 5
     f6c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <change_menu>
	sei();
     f70:	78 94       	sei
	
    while (1) 
    {
	}
     f72:	ff cf       	rjmp	.-2      	; 0xf72 <main+0x3a>

00000f74 <set_menu_title>:
	_delay_ms(15);
}

void set_menu_title(char menu)
{
	switch(menu)
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	c1 f0       	breq	.+48     	; 0xfa8 <set_menu_title+0x34>
     f78:	28 f4       	brcc	.+10     	; 0xf84 <set_menu_title+0x10>
     f7a:	88 23       	and	r24, r24
     f7c:	49 f0       	breq	.+18     	; 0xf90 <set_menu_title+0x1c>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	81 f0       	breq	.+32     	; 0xfa2 <set_menu_title+0x2e>
     f82:	18 c0       	rjmp	.+48     	; 0xfb4 <set_menu_title+0x40>
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	51 f0       	breq	.+20     	; 0xf9c <set_menu_title+0x28>
     f88:	90 f0       	brcs	.+36     	; 0xfae <set_menu_title+0x3a>
     f8a:	85 30       	cpi	r24, 0x05	; 5
     f8c:	21 f0       	breq	.+8      	; 0xf96 <set_menu_title+0x22>
     f8e:	12 c0       	rjmp	.+36     	; 0xfb4 <set_menu_title+0x40>
	{
		case ERROR_MENU:
		{
			display_error_title();
     f90:	0e 94 14 05 	call	0xa28	; 0xa28 <display_error_title>
			break;
     f94:	08 95       	ret
		}
		case TEMPERATURE_MENU:
		{
			display_temperature_title();
     f96:	0e 94 25 05 	call	0xa4a	; 0xa4a <display_temperature_title>
			break;
     f9a:	08 95       	ret
		}
		case BATTERY_LEVEL_MENU:
		{
			display_battery_title();
     f9c:	0e 94 48 05 	call	0xa90	; 0xa90 <display_battery_title>
			break;
     fa0:	08 95       	ret
		}
		case SENSOR_VALUES_MENU:
		{
			display_umidity_level_title();
     fa2:	0e 94 de 04 	call	0x9bc	; 0x9bc <display_umidity_level_title>
			break;
     fa6:	08 95       	ret
		}
		case CLOCK_MENU:
		{
			display_clock_title();
     fa8:	0e 94 65 06 	call	0xcca	; 0xcca <display_clock_title>
			break;
     fac:	08 95       	ret
		}
		case TANK_WATER_LEVEL_MENU:
		{
			display_tank_water_level_title();
     fae:	0e 94 64 05 	call	0xac8	; 0xac8 <display_tank_water_level_title>
			break;
     fb2:	08 95       	ret
		}
		default:
		{
			strcpy(ERROR, ERROR_WRONG_MENU_TITLE);
     fb4:	81 e1       	ldi	r24, 0x11	; 17
     fb6:	ee ef       	ldi	r30, 0xFE	; 254
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ad e3       	ldi	r26, 0x3D	; 61
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	01 90       	ld	r0, Z+
     fc0:	0d 92       	st	X+, r0
     fc2:	8a 95       	dec	r24
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <set_menu_title+0x4a>
			display_error_title();
     fc6:	0e 94 14 05 	call	0xa28	; 0xa28 <display_error_title>
     fca:	08 95       	ret

00000fcc <change_menu>:
	}
}

void change_menu(char menu)
{
	if(menu == MENU)
     fcc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <MENU>
     fd0:	89 17       	cp	r24, r25
     fd2:	51 f1       	breq	.+84     	; 0x1028 <change_menu+0x5c>
	
	short int i;
	char menu_ok = FALSE;
	for(i = 0;i < 10; i++)
	{
		if (menu == MENUs[i])
     fd4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <MENUs>
     fd8:	98 17       	cp	r25, r24
     fda:	39 f0       	breq	.+14     	; 0xfea <change_menu+0x1e>
     fdc:	e3 e2       	ldi	r30, 0x23	; 35
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	2c e2       	ldi	r18, 0x2C	; 44
     fe2:	31 e0       	ldi	r19, 0x01	; 1
     fe4:	91 91       	ld	r25, Z+
     fe6:	98 13       	cpse	r25, r24
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <change_menu+0x28>
		{
			menu_ok = TRUE;
			MENU = MENUs[i];
     fea:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <MENU>
			break;
		}
	}
	if(menu_ok)
	{
		set_menu_title(MENU);
     fee:	0e 94 ba 07 	call	0xf74	; 0xf74 <set_menu_title>
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <change_menu+0x30>
		return;
	}
	
	short int i;
	char menu_ok = FALSE;
	for(i = 0;i < 10; i++)
     ff4:	e2 17       	cp	r30, r18
     ff6:	f3 07       	cpc	r31, r19
     ff8:	a9 f7       	brne	.-22     	; 0xfe4 <change_menu+0x18>
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <change_menu+0x3e>
     ffc:	8f e5       	ldi	r24, 0x5F	; 95
     ffe:	9a ee       	ldi	r25, 0xEA	; 234
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <change_menu+0x34>
    1004:	00 c0       	rjmp	.+0      	; 0x1006 <change_menu+0x3a>
    1006:	00 00       	nop
    1008:	08 95       	ret
	{
		set_menu_title(MENU);
	}
	else
	{
		strcpy(ERROR, ERROR_WRONG_MENU);
    100a:	8b e0       	ldi	r24, 0x0B	; 11
    100c:	ef e0       	ldi	r30, 0x0F	; 15
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	ad e3       	ldi	r26, 0x3D	; 61
    1012:	b1 e0       	ldi	r27, 0x01	; 1
    1014:	01 90       	ld	r0, Z+
    1016:	0d 92       	st	X+, r0
    1018:	8a 95       	dec	r24
    101a:	e1 f7       	brne	.-8      	; 0x1014 <change_menu+0x48>
		MENU = ERROR_MENU;
    101c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <MENU>
		set_menu_title(MENU);
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 ba 07 	call	0xf74	; 0xf74 <set_menu_title>
    1026:	ea cf       	rjmp	.-44     	; 0xffc <change_menu+0x30>
    1028:	08 95       	ret

0000102a <next_menu>:
#include "IPX_LCD_Display.h"
#include "Menu.h"

void next_menu()
{
	switch(MENU)
    102a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <MENU>
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	69 f0       	breq	.+26     	; 0x104c <next_menu+0x22>
    1032:	18 f4       	brcc	.+6      	; 0x103a <next_menu+0x10>
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	31 f0       	breq	.+12     	; 0x1044 <next_menu+0x1a>
    1038:	08 95       	ret
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	59 f0       	breq	.+22     	; 0x1054 <next_menu+0x2a>
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	69 f0       	breq	.+26     	; 0x105c <next_menu+0x32>
    1042:	08 95       	ret
	{
		case SENSOR_VALUES_MENU:
		{
			change_menu(CLOCK_MENU);
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0e 94 e6 07 	call	0xfcc	; 0xfcc <change_menu>
			break;
    104a:	08 95       	ret
		}
		
		case CLOCK_MENU:
		{
			change_menu(TANK_WATER_LEVEL_MENU);
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <change_menu>
			break;
    1052:	08 95       	ret
		}
		
		case TANK_WATER_LEVEL_MENU:
		{
			change_menu(BATTERY_LEVEL_MENU);
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	0e 94 e6 07 	call	0xfcc	; 0xfcc <change_menu>
			break;
    105a:	08 95       	ret
		}

		case BATTERY_LEVEL_MENU:
		{
			change_menu(SENSOR_VALUES_MENU);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <change_menu>
    1062:	08 95       	ret

00001064 <init_ipx_water_level_sensor>:


void init_ipx_water_level_sensor()
{
	// set pins PB2-PB7 as input pins
	WATER_LEVEL_SENSOR_DDR &= ~((1 << WATER_SENSOR_LEVEL_1) | (1 << WATER_SENSOR_LEVEL_2) | (1 << WATER_SENSOR_LEVEL_3) | (1 << WATER_SENSOR_LEVEL_4) | (1 << WATER_SENSOR_LEVEL_5) | (1 << WATER_SENSOR_LEVEL_6));
    1064:	87 b3       	in	r24, 0x17	; 23
    1066:	83 70       	andi	r24, 0x03	; 3
    1068:	87 bb       	out	0x17, r24	; 23
	// activate pull up resistor
	WATER_LEVEL_SENSOR_PORT |= (1 << WATER_SENSOR_LEVEL_1) | (1 << WATER_SENSOR_LEVEL_2) | (1 << WATER_SENSOR_LEVEL_3) | (1 << WATER_SENSOR_LEVEL_4) | (1 << WATER_SENSOR_LEVEL_5) | (1 << WATER_SENSOR_LEVEL_6);
    106a:	88 b3       	in	r24, 0x18	; 24
    106c:	8c 6f       	ori	r24, 0xFC	; 252
    106e:	88 bb       	out	0x18, r24	; 24
    1070:	08 95       	ret

00001072 <read_tank_water_level>:

void read_tank_water_level()
{
	unsigned char level = 1;
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_6) & 1;
	if(level == 0)
    1072:	b2 99       	sbic	0x16, 2	; 22
    1074:	04 c0       	rjmp	.+8      	; 0x107e <read_tank_water_level+0xc>
	{
		WATER_LEVEL = 6;
    1076:	86 e0       	ldi	r24, 0x06	; 6
    1078:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    107c:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_5) & 1;
	if(level == 0)
    107e:	b3 99       	sbic	0x16, 3	; 22
    1080:	04 c0       	rjmp	.+8      	; 0x108a <read_tank_water_level+0x18>
	{
		WATER_LEVEL = 5;
    1082:	85 e0       	ldi	r24, 0x05	; 5
    1084:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    1088:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_4) & 1;
	if(level == 0)
    108a:	b4 99       	sbic	0x16, 4	; 22
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <read_tank_water_level+0x24>
	{
		WATER_LEVEL = 4;
    108e:	84 e0       	ldi	r24, 0x04	; 4
    1090:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    1094:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_3) & 1;
	if(level == 0)
    1096:	b5 99       	sbic	0x16, 5	; 22
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <read_tank_water_level+0x30>
	{
		WATER_LEVEL = 3;
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    10a0:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_2) & 1;
	if(level == 0)
    10a2:	b6 99       	sbic	0x16, 6	; 22
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <read_tank_water_level+0x3c>
	{
		WATER_LEVEL = 2;
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    10ac:	08 95       	ret
	}
	level = (WATER_LEVEL_SENSOR_PIN >> WATER_SENSOR_LEVEL_1) & 1;
	if(level == 0)
    10ae:	b7 99       	sbic	0x16, 7	; 22
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <read_tank_water_level+0x48>
	{
		WATER_LEVEL = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <WATER_LEVEL>
		return;
    10b8:	08 95       	ret
	}
	WATER_LEVEL = 0;
    10ba:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <WATER_LEVEL>
    10be:	08 95       	ret

000010c0 <__divsf3>:
    10c0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__divsf3x>
    10c4:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>
    10c8:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscB>
    10cc:	58 f0       	brcs	.+22     	; 0x10e4 <__divsf3+0x24>
    10ce:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_pscA>
    10d2:	40 f0       	brcs	.+16     	; 0x10e4 <__divsf3+0x24>
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <__divsf3+0x20>
    10d6:	5f 3f       	cpi	r21, 0xFF	; 255
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <__divsf3+0x24>
    10da:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    10de:	51 11       	cpse	r21, r1
    10e0:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    10e4:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>

000010e8 <__divsf3x>:
    10e8:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_split3>
    10ec:	68 f3       	brcs	.-38     	; 0x10c8 <__divsf3+0x8>

000010ee <__divsf3_pse>:
    10ee:	99 23       	and	r25, r25
    10f0:	b1 f3       	breq	.-20     	; 0x10de <__divsf3+0x1e>
    10f2:	55 23       	and	r21, r21
    10f4:	91 f3       	breq	.-28     	; 0x10da <__divsf3+0x1a>
    10f6:	95 1b       	sub	r25, r21
    10f8:	55 0b       	sbc	r21, r21
    10fa:	bb 27       	eor	r27, r27
    10fc:	aa 27       	eor	r26, r26
    10fe:	62 17       	cp	r22, r18
    1100:	73 07       	cpc	r23, r19
    1102:	84 07       	cpc	r24, r20
    1104:	38 f0       	brcs	.+14     	; 0x1114 <__divsf3_pse+0x26>
    1106:	9f 5f       	subi	r25, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	44 1f       	adc	r20, r20
    1110:	aa 1f       	adc	r26, r26
    1112:	a9 f3       	breq	.-22     	; 0x10fe <__divsf3_pse+0x10>
    1114:	35 d0       	rcall	.+106    	; 0x1180 <__divsf3_pse+0x92>
    1116:	0e 2e       	mov	r0, r30
    1118:	3a f0       	brmi	.+14     	; 0x1128 <__divsf3_pse+0x3a>
    111a:	e0 e8       	ldi	r30, 0x80	; 128
    111c:	32 d0       	rcall	.+100    	; 0x1182 <__divsf3_pse+0x94>
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	e6 95       	lsr	r30
    1124:	00 1c       	adc	r0, r0
    1126:	ca f7       	brpl	.-14     	; 0x111a <__divsf3_pse+0x2c>
    1128:	2b d0       	rcall	.+86     	; 0x1180 <__divsf3_pse+0x92>
    112a:	fe 2f       	mov	r31, r30
    112c:	29 d0       	rcall	.+82     	; 0x1180 <__divsf3_pse+0x92>
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	88 1f       	adc	r24, r24
    1134:	bb 1f       	adc	r27, r27
    1136:	26 17       	cp	r18, r22
    1138:	37 07       	cpc	r19, r23
    113a:	48 07       	cpc	r20, r24
    113c:	ab 07       	cpc	r26, r27
    113e:	b0 e8       	ldi	r27, 0x80	; 128
    1140:	09 f0       	breq	.+2      	; 0x1144 <__divsf3_pse+0x56>
    1142:	bb 0b       	sbc	r27, r27
    1144:	80 2d       	mov	r24, r0
    1146:	bf 01       	movw	r22, r30
    1148:	ff 27       	eor	r31, r31
    114a:	93 58       	subi	r25, 0x83	; 131
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
    114e:	3a f0       	brmi	.+14     	; 0x115e <__divsf3_pse+0x70>
    1150:	9e 3f       	cpi	r25, 0xFE	; 254
    1152:	51 05       	cpc	r21, r1
    1154:	78 f0       	brcs	.+30     	; 0x1174 <__divsf3_pse+0x86>
    1156:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    115a:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    115e:	5f 3f       	cpi	r21, 0xFF	; 255
    1160:	e4 f3       	brlt	.-8      	; 0x115a <__divsf3_pse+0x6c>
    1162:	98 3e       	cpi	r25, 0xE8	; 232
    1164:	d4 f3       	brlt	.-12     	; 0x115a <__divsf3_pse+0x6c>
    1166:	86 95       	lsr	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b7 95       	ror	r27
    116e:	f7 95       	ror	r31
    1170:	9f 5f       	subi	r25, 0xFF	; 255
    1172:	c9 f7       	brne	.-14     	; 0x1166 <__divsf3_pse+0x78>
    1174:	88 0f       	add	r24, r24
    1176:	91 1d       	adc	r25, r1
    1178:	96 95       	lsr	r25
    117a:	87 95       	ror	r24
    117c:	97 f9       	bld	r25, 7
    117e:	08 95       	ret
    1180:	e1 e0       	ldi	r30, 0x01	; 1
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	88 1f       	adc	r24, r24
    1188:	bb 1f       	adc	r27, r27
    118a:	62 17       	cp	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	ba 07       	cpc	r27, r26
    1192:	20 f0       	brcs	.+8      	; 0x119c <__divsf3_pse+0xae>
    1194:	62 1b       	sub	r22, r18
    1196:	73 0b       	sbc	r23, r19
    1198:	84 0b       	sbc	r24, r20
    119a:	ba 0b       	sbc	r27, r26
    119c:	ee 1f       	adc	r30, r30
    119e:	88 f7       	brcc	.-30     	; 0x1182 <__divsf3_pse+0x94>
    11a0:	e0 95       	com	r30
    11a2:	08 95       	ret

000011a4 <__fixsfsi>:
    11a4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__fixunssfsi>
    11a8:	68 94       	set
    11aa:	b1 11       	cpse	r27, r1
    11ac:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    11b0:	08 95       	ret

000011b2 <__fixunssfsi>:
    11b2:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_splitA>
    11b6:	88 f0       	brcs	.+34     	; 0x11da <__fixunssfsi+0x28>
    11b8:	9f 57       	subi	r25, 0x7F	; 127
    11ba:	98 f0       	brcs	.+38     	; 0x11e2 <__fixunssfsi+0x30>
    11bc:	b9 2f       	mov	r27, r25
    11be:	99 27       	eor	r25, r25
    11c0:	b7 51       	subi	r27, 0x17	; 23
    11c2:	b0 f0       	brcs	.+44     	; 0x11f0 <__fixunssfsi+0x3e>
    11c4:	e1 f0       	breq	.+56     	; 0x11fe <__fixunssfsi+0x4c>
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	1a f0       	brmi	.+6      	; 0x11d6 <__fixunssfsi+0x24>
    11d0:	ba 95       	dec	r27
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__fixunssfsi+0x14>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <__fixunssfsi+0x4c>
    11d6:	b1 30       	cpi	r27, 0x01	; 1
    11d8:	91 f0       	breq	.+36     	; 0x11fe <__fixunssfsi+0x4c>
    11da:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_zero>
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
    11e6:	67 2f       	mov	r22, r23
    11e8:	78 2f       	mov	r23, r24
    11ea:	88 27       	eor	r24, r24
    11ec:	b8 5f       	subi	r27, 0xF8	; 248
    11ee:	39 f0       	breq	.+14     	; 0x11fe <__fixunssfsi+0x4c>
    11f0:	b9 3f       	cpi	r27, 0xF9	; 249
    11f2:	cc f3       	brlt	.-14     	; 0x11e6 <__fixunssfsi+0x34>
    11f4:	86 95       	lsr	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b3 95       	inc	r27
    11fc:	d9 f7       	brne	.-10     	; 0x11f4 <__fixunssfsi+0x42>
    11fe:	3e f4       	brtc	.+14     	; 0x120e <__fixunssfsi+0x5c>
    1200:	90 95       	com	r25
    1202:	80 95       	com	r24
    1204:	70 95       	com	r23
    1206:	61 95       	neg	r22
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	8f 4f       	sbci	r24, 0xFF	; 255
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <__floatunsisf>:
    1210:	e8 94       	clt
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <__floatsisf+0x12>

00001214 <__floatsisf>:
    1214:	97 fb       	bst	r25, 7
    1216:	3e f4       	brtc	.+14     	; 0x1226 <__floatsisf+0x12>
    1218:	90 95       	com	r25
    121a:	80 95       	com	r24
    121c:	70 95       	com	r23
    121e:	61 95       	neg	r22
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	8f 4f       	sbci	r24, 0xFF	; 255
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	99 23       	and	r25, r25
    1228:	a9 f0       	breq	.+42     	; 0x1254 <__floatsisf+0x40>
    122a:	f9 2f       	mov	r31, r25
    122c:	96 e9       	ldi	r25, 0x96	; 150
    122e:	bb 27       	eor	r27, r27
    1230:	93 95       	inc	r25
    1232:	f6 95       	lsr	r31
    1234:	87 95       	ror	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f1 11       	cpse	r31, r1
    123e:	f8 cf       	rjmp	.-16     	; 0x1230 <__floatsisf+0x1c>
    1240:	fa f4       	brpl	.+62     	; 0x1280 <__floatsisf+0x6c>
    1242:	bb 0f       	add	r27, r27
    1244:	11 f4       	brne	.+4      	; 0x124a <__floatsisf+0x36>
    1246:	60 ff       	sbrs	r22, 0
    1248:	1b c0       	rjmp	.+54     	; 0x1280 <__floatsisf+0x6c>
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	8f 4f       	sbci	r24, 0xFF	; 255
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	16 c0       	rjmp	.+44     	; 0x1280 <__floatsisf+0x6c>
    1254:	88 23       	and	r24, r24
    1256:	11 f0       	breq	.+4      	; 0x125c <__floatsisf+0x48>
    1258:	96 e9       	ldi	r25, 0x96	; 150
    125a:	11 c0       	rjmp	.+34     	; 0x127e <__floatsisf+0x6a>
    125c:	77 23       	and	r23, r23
    125e:	21 f0       	breq	.+8      	; 0x1268 <__floatsisf+0x54>
    1260:	9e e8       	ldi	r25, 0x8E	; 142
    1262:	87 2f       	mov	r24, r23
    1264:	76 2f       	mov	r23, r22
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <__floatsisf+0x5e>
    1268:	66 23       	and	r22, r22
    126a:	71 f0       	breq	.+28     	; 0x1288 <__floatsisf+0x74>
    126c:	96 e8       	ldi	r25, 0x86	; 134
    126e:	86 2f       	mov	r24, r22
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	2a f0       	brmi	.+10     	; 0x1280 <__floatsisf+0x6c>
    1276:	9a 95       	dec	r25
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	da f7       	brpl	.-10     	; 0x1276 <__floatsisf+0x62>
    1280:	88 0f       	add	r24, r24
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	97 f9       	bld	r25, 7
    1288:	08 95       	ret

0000128a <__fp_inf>:
    128a:	97 f9       	bld	r25, 7
    128c:	9f 67       	ori	r25, 0x7F	; 127
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	08 95       	ret

00001296 <__fp_nan>:
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	80 ec       	ldi	r24, 0xC0	; 192
    129a:	08 95       	ret

0000129c <__fp_pscA>:
    129c:	00 24       	eor	r0, r0
    129e:	0a 94       	dec	r0
    12a0:	16 16       	cp	r1, r22
    12a2:	17 06       	cpc	r1, r23
    12a4:	18 06       	cpc	r1, r24
    12a6:	09 06       	cpc	r0, r25
    12a8:	08 95       	ret

000012aa <__fp_pscB>:
    12aa:	00 24       	eor	r0, r0
    12ac:	0a 94       	dec	r0
    12ae:	12 16       	cp	r1, r18
    12b0:	13 06       	cpc	r1, r19
    12b2:	14 06       	cpc	r1, r20
    12b4:	05 06       	cpc	r0, r21
    12b6:	08 95       	ret

000012b8 <__fp_round>:
    12b8:	09 2e       	mov	r0, r25
    12ba:	03 94       	inc	r0
    12bc:	00 0c       	add	r0, r0
    12be:	11 f4       	brne	.+4      	; 0x12c4 <__fp_round+0xc>
    12c0:	88 23       	and	r24, r24
    12c2:	52 f0       	brmi	.+20     	; 0x12d8 <__fp_round+0x20>
    12c4:	bb 0f       	add	r27, r27
    12c6:	40 f4       	brcc	.+16     	; 0x12d8 <__fp_round+0x20>
    12c8:	bf 2b       	or	r27, r31
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <__fp_round+0x18>
    12cc:	60 ff       	sbrs	r22, 0
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <__fp_round+0x20>
    12d0:	6f 5f       	subi	r22, 0xFF	; 255
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__fp_split3>:
    12da:	57 fd       	sbrc	r21, 7
    12dc:	90 58       	subi	r25, 0x80	; 128
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	59 f0       	breq	.+22     	; 0x12fa <__fp_splitA+0x10>
    12e4:	5f 3f       	cpi	r21, 0xFF	; 255
    12e6:	71 f0       	breq	.+28     	; 0x1304 <__fp_splitA+0x1a>
    12e8:	47 95       	ror	r20

000012ea <__fp_splitA>:
    12ea:	88 0f       	add	r24, r24
    12ec:	97 fb       	bst	r25, 7
    12ee:	99 1f       	adc	r25, r25
    12f0:	61 f0       	breq	.+24     	; 0x130a <__fp_splitA+0x20>
    12f2:	9f 3f       	cpi	r25, 0xFF	; 255
    12f4:	79 f0       	breq	.+30     	; 0x1314 <__fp_splitA+0x2a>
    12f6:	87 95       	ror	r24
    12f8:	08 95       	ret
    12fa:	12 16       	cp	r1, r18
    12fc:	13 06       	cpc	r1, r19
    12fe:	14 06       	cpc	r1, r20
    1300:	55 1f       	adc	r21, r21
    1302:	f2 cf       	rjmp	.-28     	; 0x12e8 <__fp_split3+0xe>
    1304:	46 95       	lsr	r20
    1306:	f1 df       	rcall	.-30     	; 0x12ea <__fp_splitA>
    1308:	08 c0       	rjmp	.+16     	; 0x131a <__fp_splitA+0x30>
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	18 06       	cpc	r1, r24
    1310:	99 1f       	adc	r25, r25
    1312:	f1 cf       	rjmp	.-30     	; 0x12f6 <__fp_splitA+0xc>
    1314:	86 95       	lsr	r24
    1316:	71 05       	cpc	r23, r1
    1318:	61 05       	cpc	r22, r1
    131a:	08 94       	sec
    131c:	08 95       	ret

0000131e <__fp_zero>:
    131e:	e8 94       	clt

00001320 <__fp_szero>:
    1320:	bb 27       	eor	r27, r27
    1322:	66 27       	eor	r22, r22
    1324:	77 27       	eor	r23, r23
    1326:	cb 01       	movw	r24, r22
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret
    132c:	16 f0       	brts	.+4      	; 0x1332 <__fp_szero+0x12>
    132e:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__fp_mpack>
    1332:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>
    1336:	68 94       	set
    1338:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>

0000133c <log>:
    133c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_splitA>
    1340:	a8 f3       	brcs	.-22     	; 0x132c <__fp_szero+0xc>
    1342:	99 23       	and	r25, r25
    1344:	c1 f3       	breq	.-16     	; 0x1336 <__fp_szero+0x16>
    1346:	ae f3       	brts	.-22     	; 0x1332 <__fp_szero+0x12>
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	1f 93       	push	r17
    134e:	0f 93       	push	r16
    1350:	ff 92       	push	r15
    1352:	c9 2f       	mov	r28, r25
    1354:	dd 27       	eor	r29, r29
    1356:	88 23       	and	r24, r24
    1358:	2a f0       	brmi	.+10     	; 0x1364 <log+0x28>
    135a:	21 97       	sbiw	r28, 0x01	; 1
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	da f7       	brpl	.-10     	; 0x135a <log+0x1e>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f eb       	ldi	r21, 0xBF	; 191
    136c:	9f e3       	ldi	r25, 0x3F	; 63
    136e:	88 39       	cpi	r24, 0x98	; 152
    1370:	20 f0       	brcs	.+8      	; 0x137a <log+0x3e>
    1372:	80 3e       	cpi	r24, 0xE0	; 224
    1374:	38 f0       	brcs	.+14     	; 0x1384 <log+0x48>
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__addsf3>
    137e:	e2 e6       	ldi	r30, 0x62	; 98
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	04 c0       	rjmp	.+8      	; 0x138c <log+0x50>
    1384:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__addsf3>
    1388:	ef e8       	ldi	r30, 0x8F	; 143
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fp_powser>
    1390:	8b 01       	movw	r16, r22
    1392:	be 01       	movw	r22, r28
    1394:	ec 01       	movw	r28, r24
    1396:	fb 2e       	mov	r15, r27
    1398:	6f 57       	subi	r22, 0x7F	; 127
    139a:	71 09       	sbc	r23, r1
    139c:	75 95       	asr	r23
    139e:	77 1f       	adc	r23, r23
    13a0:	88 0b       	sbc	r24, r24
    13a2:	99 0b       	sbc	r25, r25
    13a4:	0e 94 0a 09 	call	0x1214	; 0x1214 <__floatsisf>
    13a8:	28 e1       	ldi	r18, 0x18	; 24
    13aa:	32 e7       	ldi	r19, 0x72	; 114
    13ac:	41 e3       	ldi	r20, 0x31	; 49
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3x>
    13b4:	af 2d       	mov	r26, r15
    13b6:	98 01       	movw	r18, r16
    13b8:	ae 01       	movw	r20, r28
    13ba:	ff 90       	pop	r15
    13bc:	0f 91       	pop	r16
    13be:	1f 91       	pop	r17
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__addsf3x>
    13c8:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>

000013cc <__mulsf3>:
    13cc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3x>
    13d0:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>
    13d4:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_pscA>
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <__mulsf3+0x1c>
    13da:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscB>
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__mulsf3+0x1c>
    13e0:	95 23       	and	r25, r21
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <__mulsf3+0x1c>
    13e4:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    13e8:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>
    13ec:	11 24       	eor	r1, r1
    13ee:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>

000013f2 <__mulsf3x>:
    13f2:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_split3>
    13f6:	70 f3       	brcs	.-36     	; 0x13d4 <__mulsf3+0x8>

000013f8 <__mulsf3_pse>:
    13f8:	95 9f       	mul	r25, r21
    13fa:	c1 f3       	breq	.-16     	; 0x13ec <__mulsf3+0x20>
    13fc:	95 0f       	add	r25, r21
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	55 1f       	adc	r21, r21
    1402:	62 9f       	mul	r22, r18
    1404:	f0 01       	movw	r30, r0
    1406:	72 9f       	mul	r23, r18
    1408:	bb 27       	eor	r27, r27
    140a:	f0 0d       	add	r31, r0
    140c:	b1 1d       	adc	r27, r1
    140e:	63 9f       	mul	r22, r19
    1410:	aa 27       	eor	r26, r26
    1412:	f0 0d       	add	r31, r0
    1414:	b1 1d       	adc	r27, r1
    1416:	aa 1f       	adc	r26, r26
    1418:	64 9f       	mul	r22, r20
    141a:	66 27       	eor	r22, r22
    141c:	b0 0d       	add	r27, r0
    141e:	a1 1d       	adc	r26, r1
    1420:	66 1f       	adc	r22, r22
    1422:	82 9f       	mul	r24, r18
    1424:	22 27       	eor	r18, r18
    1426:	b0 0d       	add	r27, r0
    1428:	a1 1d       	adc	r26, r1
    142a:	62 1f       	adc	r22, r18
    142c:	73 9f       	mul	r23, r19
    142e:	b0 0d       	add	r27, r0
    1430:	a1 1d       	adc	r26, r1
    1432:	62 1f       	adc	r22, r18
    1434:	83 9f       	mul	r24, r19
    1436:	a0 0d       	add	r26, r0
    1438:	61 1d       	adc	r22, r1
    143a:	22 1f       	adc	r18, r18
    143c:	74 9f       	mul	r23, r20
    143e:	33 27       	eor	r19, r19
    1440:	a0 0d       	add	r26, r0
    1442:	61 1d       	adc	r22, r1
    1444:	23 1f       	adc	r18, r19
    1446:	84 9f       	mul	r24, r20
    1448:	60 0d       	add	r22, r0
    144a:	21 1d       	adc	r18, r1
    144c:	82 2f       	mov	r24, r18
    144e:	76 2f       	mov	r23, r22
    1450:	6a 2f       	mov	r22, r26
    1452:	11 24       	eor	r1, r1
    1454:	9f 57       	subi	r25, 0x7F	; 127
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	9a f0       	brmi	.+38     	; 0x1480 <__mulsf3_pse+0x88>
    145a:	f1 f0       	breq	.+60     	; 0x1498 <__mulsf3_pse+0xa0>
    145c:	88 23       	and	r24, r24
    145e:	4a f0       	brmi	.+18     	; 0x1472 <__mulsf3_pse+0x7a>
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	bb 1f       	adc	r27, r27
    1466:	66 1f       	adc	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	a9 f7       	brne	.-22     	; 0x145c <__mulsf3_pse+0x64>
    1472:	9e 3f       	cpi	r25, 0xFE	; 254
    1474:	51 05       	cpc	r21, r1
    1476:	80 f0       	brcs	.+32     	; 0x1498 <__mulsf3_pse+0xa0>
    1478:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    147c:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    1480:	5f 3f       	cpi	r21, 0xFF	; 255
    1482:	e4 f3       	brlt	.-8      	; 0x147c <__mulsf3_pse+0x84>
    1484:	98 3e       	cpi	r25, 0xE8	; 232
    1486:	d4 f3       	brlt	.-12     	; 0x147c <__mulsf3_pse+0x84>
    1488:	86 95       	lsr	r24
    148a:	77 95       	ror	r23
    148c:	67 95       	ror	r22
    148e:	b7 95       	ror	r27
    1490:	f7 95       	ror	r31
    1492:	e7 95       	ror	r30
    1494:	9f 5f       	subi	r25, 0xFF	; 255
    1496:	c1 f7       	brne	.-16     	; 0x1488 <__mulsf3_pse+0x90>
    1498:	fe 2b       	or	r31, r30
    149a:	88 0f       	add	r24, r24
    149c:	91 1d       	adc	r25, r1
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__subsf3>:
    14a6:	50 58       	subi	r21, 0x80	; 128

000014a8 <__addsf3>:
    14a8:	bb 27       	eor	r27, r27
    14aa:	aa 27       	eor	r26, r26
    14ac:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__addsf3x>
    14b0:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>
    14b4:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_pscA>
    14b8:	38 f0       	brcs	.+14     	; 0x14c8 <__addsf3+0x20>
    14ba:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscB>
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__addsf3+0x20>
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <__addsf3+0x28>
    14c2:	9f 3f       	cpi	r25, 0xFF	; 255
    14c4:	19 f4       	brne	.+6      	; 0x14cc <__addsf3+0x24>
    14c6:	26 f4       	brtc	.+8      	; 0x14d0 <__addsf3+0x28>
    14c8:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>
    14cc:	0e f4       	brtc	.+2      	; 0x14d0 <__addsf3+0x28>
    14ce:	e0 95       	com	r30
    14d0:	e7 fb       	bst	r30, 7
    14d2:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>

000014d6 <__addsf3x>:
    14d6:	e9 2f       	mov	r30, r25
    14d8:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_split3>
    14dc:	58 f3       	brcs	.-42     	; 0x14b4 <__addsf3+0xc>
    14de:	ba 17       	cp	r27, r26
    14e0:	62 07       	cpc	r22, r18
    14e2:	73 07       	cpc	r23, r19
    14e4:	84 07       	cpc	r24, r20
    14e6:	95 07       	cpc	r25, r21
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__addsf3x+0x1c>
    14ea:	79 f4       	brne	.+30     	; 0x150a <__addsf3x+0x34>
    14ec:	a6 f5       	brtc	.+104    	; 0x1556 <__addsf3x+0x80>
    14ee:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
    14f2:	0e f4       	brtc	.+2      	; 0x14f6 <__addsf3x+0x20>
    14f4:	e0 95       	com	r30
    14f6:	0b 2e       	mov	r0, r27
    14f8:	ba 2f       	mov	r27, r26
    14fa:	a0 2d       	mov	r26, r0
    14fc:	0b 01       	movw	r0, r22
    14fe:	b9 01       	movw	r22, r18
    1500:	90 01       	movw	r18, r0
    1502:	0c 01       	movw	r0, r24
    1504:	ca 01       	movw	r24, r20
    1506:	a0 01       	movw	r20, r0
    1508:	11 24       	eor	r1, r1
    150a:	ff 27       	eor	r31, r31
    150c:	59 1b       	sub	r21, r25
    150e:	99 f0       	breq	.+38     	; 0x1536 <__addsf3x+0x60>
    1510:	59 3f       	cpi	r21, 0xF9	; 249
    1512:	50 f4       	brcc	.+20     	; 0x1528 <__addsf3x+0x52>
    1514:	50 3e       	cpi	r21, 0xE0	; 224
    1516:	68 f1       	brcs	.+90     	; 0x1572 <__addsf3x+0x9c>
    1518:	1a 16       	cp	r1, r26
    151a:	f0 40       	sbci	r31, 0x00	; 0
    151c:	a2 2f       	mov	r26, r18
    151e:	23 2f       	mov	r18, r19
    1520:	34 2f       	mov	r19, r20
    1522:	44 27       	eor	r20, r20
    1524:	58 5f       	subi	r21, 0xF8	; 248
    1526:	f3 cf       	rjmp	.-26     	; 0x150e <__addsf3x+0x38>
    1528:	46 95       	lsr	r20
    152a:	37 95       	ror	r19
    152c:	27 95       	ror	r18
    152e:	a7 95       	ror	r26
    1530:	f0 40       	sbci	r31, 0x00	; 0
    1532:	53 95       	inc	r21
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__addsf3x+0x52>
    1536:	7e f4       	brtc	.+30     	; 0x1556 <__addsf3x+0x80>
    1538:	1f 16       	cp	r1, r31
    153a:	ba 0b       	sbc	r27, r26
    153c:	62 0b       	sbc	r22, r18
    153e:	73 0b       	sbc	r23, r19
    1540:	84 0b       	sbc	r24, r20
    1542:	ba f0       	brmi	.+46     	; 0x1572 <__addsf3x+0x9c>
    1544:	91 50       	subi	r25, 0x01	; 1
    1546:	a1 f0       	breq	.+40     	; 0x1570 <__addsf3x+0x9a>
    1548:	ff 0f       	add	r31, r31
    154a:	bb 1f       	adc	r27, r27
    154c:	66 1f       	adc	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	c2 f7       	brpl	.-16     	; 0x1544 <__addsf3x+0x6e>
    1554:	0e c0       	rjmp	.+28     	; 0x1572 <__addsf3x+0x9c>
    1556:	ba 0f       	add	r27, r26
    1558:	62 1f       	adc	r22, r18
    155a:	73 1f       	adc	r23, r19
    155c:	84 1f       	adc	r24, r20
    155e:	48 f4       	brcc	.+18     	; 0x1572 <__addsf3x+0x9c>
    1560:	87 95       	ror	r24
    1562:	77 95       	ror	r23
    1564:	67 95       	ror	r22
    1566:	b7 95       	ror	r27
    1568:	f7 95       	ror	r31
    156a:	9e 3f       	cpi	r25, 0xFE	; 254
    156c:	08 f0       	brcs	.+2      	; 0x1570 <__addsf3x+0x9a>
    156e:	b0 cf       	rjmp	.-160    	; 0x14d0 <__addsf3+0x28>
    1570:	93 95       	inc	r25
    1572:	88 0f       	add	r24, r24
    1574:	08 f0       	brcs	.+2      	; 0x1578 <__addsf3x+0xa2>
    1576:	99 27       	eor	r25, r25
    1578:	ee 0f       	add	r30, r30
    157a:	97 95       	ror	r25
    157c:	87 95       	ror	r24
    157e:	08 95       	ret

00001580 <__fp_mpack>:
    1580:	9f 3f       	cpi	r25, 0xFF	; 255
    1582:	31 f0       	breq	.+12     	; 0x1590 <__fp_mpack_finite+0xc>

00001584 <__fp_mpack_finite>:
    1584:	91 50       	subi	r25, 0x01	; 1
    1586:	20 f4       	brcc	.+8      	; 0x1590 <__fp_mpack_finite+0xc>
    1588:	87 95       	ror	r24
    158a:	77 95       	ror	r23
    158c:	67 95       	ror	r22
    158e:	b7 95       	ror	r27
    1590:	88 0f       	add	r24, r24
    1592:	91 1d       	adc	r25, r1
    1594:	96 95       	lsr	r25
    1596:	87 95       	ror	r24
    1598:	97 f9       	bld	r25, 7
    159a:	08 95       	ret

0000159c <__fp_powser>:
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	1f 93       	push	r17
    15a2:	0f 93       	push	r16
    15a4:	ff 92       	push	r15
    15a6:	ef 92       	push	r14
    15a8:	df 92       	push	r13
    15aa:	7b 01       	movw	r14, r22
    15ac:	8c 01       	movw	r16, r24
    15ae:	68 94       	set
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <__fp_powser+0x22>
    15b2:	da 2e       	mov	r13, r26
    15b4:	ef 01       	movw	r28, r30
    15b6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3x>
    15ba:	fe 01       	movw	r30, r28
    15bc:	e8 94       	clt
    15be:	a5 91       	lpm	r26, Z+
    15c0:	25 91       	lpm	r18, Z+
    15c2:	35 91       	lpm	r19, Z+
    15c4:	45 91       	lpm	r20, Z+
    15c6:	55 91       	lpm	r21, Z+
    15c8:	a6 f3       	brts	.-24     	; 0x15b2 <__fp_powser+0x16>
    15ca:	ef 01       	movw	r28, r30
    15cc:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__addsf3x>
    15d0:	fe 01       	movw	r30, r28
    15d2:	97 01       	movw	r18, r14
    15d4:	a8 01       	movw	r20, r16
    15d6:	da 94       	dec	r13
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <__fp_powser+0x18>
    15da:	df 90       	pop	r13
    15dc:	ef 90       	pop	r14
    15de:	ff 90       	pop	r15
    15e0:	0f 91       	pop	r16
    15e2:	1f 91       	pop	r17
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <__divmodhi4>:
    15ea:	97 fb       	bst	r25, 7
    15ec:	07 2e       	mov	r0, r23
    15ee:	16 f4       	brtc	.+4      	; 0x15f4 <__divmodhi4+0xa>
    15f0:	00 94       	com	r0
    15f2:	07 d0       	rcall	.+14     	; 0x1602 <__divmodhi4_neg1>
    15f4:	77 fd       	sbrc	r23, 7
    15f6:	09 d0       	rcall	.+18     	; 0x160a <__divmodhi4_neg2>
    15f8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__udivmodhi4>
    15fc:	07 fc       	sbrc	r0, 7
    15fe:	05 d0       	rcall	.+10     	; 0x160a <__divmodhi4_neg2>
    1600:	3e f4       	brtc	.+14     	; 0x1610 <__divmodhi4_exit>

00001602 <__divmodhi4_neg1>:
    1602:	90 95       	com	r25
    1604:	81 95       	neg	r24
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	08 95       	ret

0000160a <__divmodhi4_neg2>:
    160a:	70 95       	com	r23
    160c:	61 95       	neg	r22
    160e:	7f 4f       	sbci	r23, 0xFF	; 255

00001610 <__divmodhi4_exit>:
    1610:	08 95       	ret

00001612 <__udivmodsi4>:
    1612:	a1 e2       	ldi	r26, 0x21	; 33
    1614:	1a 2e       	mov	r1, r26
    1616:	aa 1b       	sub	r26, r26
    1618:	bb 1b       	sub	r27, r27
    161a:	fd 01       	movw	r30, r26
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <__udivmodsi4_ep>

0000161e <__udivmodsi4_loop>:
    161e:	aa 1f       	adc	r26, r26
    1620:	bb 1f       	adc	r27, r27
    1622:	ee 1f       	adc	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	a2 17       	cp	r26, r18
    1628:	b3 07       	cpc	r27, r19
    162a:	e4 07       	cpc	r30, r20
    162c:	f5 07       	cpc	r31, r21
    162e:	20 f0       	brcs	.+8      	; 0x1638 <__udivmodsi4_ep>
    1630:	a2 1b       	sub	r26, r18
    1632:	b3 0b       	sbc	r27, r19
    1634:	e4 0b       	sbc	r30, r20
    1636:	f5 0b       	sbc	r31, r21

00001638 <__udivmodsi4_ep>:
    1638:	66 1f       	adc	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	88 1f       	adc	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	1a 94       	dec	r1
    1642:	69 f7       	brne	.-38     	; 0x161e <__udivmodsi4_loop>
    1644:	60 95       	com	r22
    1646:	70 95       	com	r23
    1648:	80 95       	com	r24
    164a:	90 95       	com	r25
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	bd 01       	movw	r22, r26
    1652:	cf 01       	movw	r24, r30
    1654:	08 95       	ret

00001656 <__divmodsi4>:
    1656:	05 2e       	mov	r0, r21
    1658:	97 fb       	bst	r25, 7
    165a:	1e f4       	brtc	.+6      	; 0x1662 <__divmodsi4+0xc>
    165c:	00 94       	com	r0
    165e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__negsi2>
    1662:	57 fd       	sbrc	r21, 7
    1664:	07 d0       	rcall	.+14     	; 0x1674 <__divmodsi4_neg2>
    1666:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
    166a:	07 fc       	sbrc	r0, 7
    166c:	03 d0       	rcall	.+6      	; 0x1674 <__divmodsi4_neg2>
    166e:	4e f4       	brtc	.+18     	; 0x1682 <__divmodsi4_exit>
    1670:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__negsi2>

00001674 <__divmodsi4_neg2>:
    1674:	50 95       	com	r21
    1676:	40 95       	com	r20
    1678:	30 95       	com	r19
    167a:	21 95       	neg	r18
    167c:	3f 4f       	sbci	r19, 0xFF	; 255
    167e:	4f 4f       	sbci	r20, 0xFF	; 255
    1680:	5f 4f       	sbci	r21, 0xFF	; 255

00001682 <__divmodsi4_exit>:
    1682:	08 95       	ret

00001684 <__negsi2>:
    1684:	90 95       	com	r25
    1686:	80 95       	com	r24
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	8f 4f       	sbci	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	08 95       	ret

00001694 <__tablejump2__>:
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	05 90       	lpm	r0, Z+
    169a:	f4 91       	lpm	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	09 94       	ijmp

000016a0 <__umulhisi3>:
    16a0:	a2 9f       	mul	r26, r18
    16a2:	b0 01       	movw	r22, r0
    16a4:	b3 9f       	mul	r27, r19
    16a6:	c0 01       	movw	r24, r0
    16a8:	a3 9f       	mul	r26, r19
    16aa:	70 0d       	add	r23, r0
    16ac:	81 1d       	adc	r24, r1
    16ae:	11 24       	eor	r1, r1
    16b0:	91 1d       	adc	r25, r1
    16b2:	b2 9f       	mul	r27, r18
    16b4:	70 0d       	add	r23, r0
    16b6:	81 1d       	adc	r24, r1
    16b8:	11 24       	eor	r1, r1
    16ba:	91 1d       	adc	r25, r1
    16bc:	08 95       	ret

000016be <__muluhisi3>:
    16be:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__umulhisi3>
    16c2:	a5 9f       	mul	r26, r21
    16c4:	90 0d       	add	r25, r0
    16c6:	b4 9f       	mul	r27, r20
    16c8:	90 0d       	add	r25, r0
    16ca:	a4 9f       	mul	r26, r20
    16cc:	80 0d       	add	r24, r0
    16ce:	91 1d       	adc	r25, r1
    16d0:	11 24       	eor	r1, r1
    16d2:	08 95       	ret

000016d4 <__udivmodhi4>:
    16d4:	aa 1b       	sub	r26, r26
    16d6:	bb 1b       	sub	r27, r27
    16d8:	51 e1       	ldi	r21, 0x11	; 17
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <__udivmodhi4_ep>

000016dc <__udivmodhi4_loop>:
    16dc:	aa 1f       	adc	r26, r26
    16de:	bb 1f       	adc	r27, r27
    16e0:	a6 17       	cp	r26, r22
    16e2:	b7 07       	cpc	r27, r23
    16e4:	10 f0       	brcs	.+4      	; 0x16ea <__udivmodhi4_ep>
    16e6:	a6 1b       	sub	r26, r22
    16e8:	b7 0b       	sbc	r27, r23

000016ea <__udivmodhi4_ep>:
    16ea:	88 1f       	adc	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	5a 95       	dec	r21
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__udivmodhi4_loop>
    16f2:	80 95       	com	r24
    16f4:	90 95       	com	r25
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	08 95       	ret

000016fc <_exit>:
    16fc:	f8 94       	cli

000016fe <__stop_program>:
    16fe:	ff cf       	rjmp	.-2      	; 0x16fe <__stop_program>
