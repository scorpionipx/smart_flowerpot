
SmartFlowerpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000005ba  0000064e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000ac  008000ac  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001368  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000937  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f6  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000592  00000000  00000000  00003642  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  8a:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "driverAdc.h"

void ADC_Init(void)
{
		DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	    // AREF = AVcc
	    ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	    
	    // ADC Enable and prescaler of 128
	    // 16000000/128 = 125000
	    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_GetValue>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
uint16_t ADC_GetValue(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  a0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_GetValue+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
}
  b2:	08 95       	ret

000000b4 <read_humidity_level>:

void read_humidity_level(int sensor)
{
	switch(sensor)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	19 f0       	breq	.+6      	; 0xc0 <read_humidity_level+0xc>
  ba:	02 97       	sbiw	r24, 0x02	; 2
  bc:	a1 f0       	breq	.+40     	; 0xe6 <read_humidity_level+0x32>
  be:	08 95       	ret
	{
		case 1:
		{
			humidity_level_sensor_1 = (((uint32_t)ADC_GetValue(0) * 100) / 1023);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  c6:	9c 01       	movw	r18, r24
  c8:	a4 e6       	ldi	r26, 0x64	; 100
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	33 e0       	ldi	r19, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	0e 94 96 02 	call	0x52c	; 0x52c <__udivmodsi4>
  dc:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <humidity_level_sensor_1+0x1>
  e0:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <humidity_level_sensor_1>
			break;
  e4:	08 95       	ret
		}
		case 2:
		{
			humidity_level_sensor_2 = (((uint32_t)ADC_GetValue(1) * 100) / 1023);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  ec:	9c 01       	movw	r18, r24
  ee:	a4 e6       	ldi	r26, 0x64	; 100
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	33 e0       	ldi	r19, 0x03	; 3
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	0e 94 96 02 	call	0x52c	; 0x52c <__udivmodsi4>
 102:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <humidity_level_sensor_2+0x1>
 106:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <humidity_level_sensor_2>
 10a:	08 95       	ret

0000010c <init_interrupt_10ms>:

//10 ms timer
void init_interrupt_10ms(void)
{
	/* clear timer on compare mode , output normal port , 256 prescaler */
	TCCR0 = (1u << WGM01) | (1u << CS02) | (1u << CS00);
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	83 bf       	out	0x33, r24	; 51
	/* reset counter */
	TCNT0=0x00;
 110:	12 be       	out	0x32, r1	; 50
	
	/* 10 ms interrupt */
	OCR0 = 156;
 112:	8c e9       	ldi	r24, 0x9C	; 156
 114:	8c bf       	out	0x3c, r24	; 60
	
	/* enable compare A interrupt */
	TIMSK = (1u << OCIE0);
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	89 bf       	out	0x39, r24	; 57
 11a:	08 95       	ret

0000011c <__vector_10>:
	
}

// 10ms ISR
ISR(TIMER0_COMP_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	TIFR |= (1u << OCF0); /* clear output compare interrupt flag */
 12a:	88 b7       	in	r24, 0x38	; 56
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	88 bf       	out	0x38, r24	; 56
	interruptCnt++;
 130:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 134:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <__data_end+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__data_end+0x1>
 13e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <init_interrupt_200ms>:

// 200 ms timer
void init_interrupt_200ms()
{
	// set up timer with prescaler = 64 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
 150:	8e b5       	in	r24, 0x2e	; 46
 152:	8b 60       	ori	r24, 0x0B	; 11
 154:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
 156:	1d bc       	out	0x2d, r1	; 45
 158:	1c bc       	out	0x2c, r1	; 44
	
	// initialize compare value
	OCR1A = 49999;
 15a:	8f e4       	ldi	r24, 0x4F	; 79
 15c:	93 ec       	ldi	r25, 0xC3	; 195
 15e:	9b bd       	out	0x2b, r25	; 43
 160:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
 162:	89 b7       	in	r24, 0x39	; 57
 164:	80 61       	ori	r24, 0x10	; 16
 166:	89 bf       	out	0x39, r24	; 57
 168:	08 95       	ret

0000016a <__vector_7>:
}

// 200ms ISR
ISR (TIMER1_COMPA_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	// toggle led here
	PORTB ^= (1 << 0);
 18c:	98 b3       	in	r25, 0x18	; 24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	89 27       	eor	r24, r25
 192:	88 bb       	out	0x18, r24	; 24
	display_umidity_level_values(humidity_level_sensor_1, humidity_level_sensor_2);
 194:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <humidity_level_sensor_2>
 198:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <humidity_level_sensor_2+0x1>
 19c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <humidity_level_sensor_1>
 1a0:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <humidity_level_sensor_1+0x1>
 1a4:	0e 94 1a 02 	call	0x434	; 0x434 <display_umidity_level_values>
	read_humidity_counter ++;
 1a8:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <read_humidity_counter>
 1ac:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <read_humidity_counter+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
 1b2:	85 30       	cpi	r24, 0x05	; 5
 1b4:	91 05       	cpc	r25, r1
 1b6:	28 f4       	brcc	.+10     	; 0x1c2 <__vector_7+0x58>
ISR (TIMER1_COMPA_vect)
{
	// toggle led here
	PORTB ^= (1 << 0);
	display_umidity_level_values(humidity_level_sensor_1, humidity_level_sensor_2);
	read_humidity_counter ++;
 1b8:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <read_humidity_counter+0x1>
 1bc:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <read_humidity_counter>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <__vector_7+0x70>
	if (read_humidity_counter >= READ_SENSORS_VALUES_PERIOD)
	{
		read_humidity_counter = 0;
 1c2:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <read_humidity_counter+0x1>
 1c6:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <read_humidity_counter>
		read_humidity_level(SENSOR_1);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
		read_humidity_level(SENSOR_2);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <put_Char_LCD_Display>:
	
	put_Char_LCD_Display(0x80, 0);
	put_string(CLOCK_DATE_TITLE);
	
	put_Char_LCD_Display(0xC0, 0);
	put_string(CLOCK_TIME_TITLE);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	38 2f       	mov	r19, r24
 200:	30 7f       	andi	r19, 0xF0	; 240
 202:	2f 70       	andi	r18, 0x0F	; 15
 204:	23 2b       	or	r18, r19
 206:	25 bb       	out	0x15, r18	; 21
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	61 70       	andi	r22, 0x01	; 1
 20c:	2e 7f       	andi	r18, 0xFE	; 254
 20e:	26 2b       	or	r18, r22
 210:	25 bb       	out	0x15, r18	; 21
 212:	a9 9a       	sbi	0x15, 1	; 21
 214:	ef e1       	ldi	r30, 0x1F	; 31
 216:	fe e4       	ldi	r31, 0x4E	; 78
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <put_Char_LCD_Display+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <put_Char_LCD_Display+0x22>
 21e:	00 00       	nop
 220:	25 b3       	in	r18, 0x15	; 21
 222:	2c 7f       	andi	r18, 0xFC	; 252
 224:	25 bb       	out	0x15, r18	; 21
 226:	25 b3       	in	r18, 0x15	; 21
 228:	82 95       	swap	r24
 22a:	92 95       	swap	r25
 22c:	90 7f       	andi	r25, 0xF0	; 240
 22e:	98 27       	eor	r25, r24
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	98 27       	eor	r25, r24
 234:	92 2f       	mov	r25, r18
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	89 2b       	or	r24, r25
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	68 2b       	or	r22, r24
 242:	65 bb       	out	0x15, r22	; 21
 244:	a9 9a       	sbi	0x15, 1	; 21
 246:	8f e1       	ldi	r24, 0x1F	; 31
 248:	9e e4       	ldi	r25, 0x4E	; 78
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <put_Char_LCD_Display+0x4e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <put_Char_LCD_Display+0x54>
 250:	00 00       	nop
 252:	85 b3       	in	r24, 0x15	; 21
 254:	8c 7f       	andi	r24, 0xFC	; 252
 256:	85 bb       	out	0x15, r24	; 21
 258:	08 95       	ret

0000025a <init_LCD_Display>:
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	84 bb       	out	0x14, r24	; 20
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	9e e4       	ldi	r25, 0x4E	; 78
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <init_LCD_Display+0x14>
 272:	00 c0       	rjmp	.+0      	; 0x274 <init_LCD_Display+0x1a>
 274:	00 00       	nop
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	9e e4       	ldi	r25, 0x4E	; 78
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <init_LCD_Display+0x2c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <init_LCD_Display+0x32>
 28c:	00 00       	nop
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <init_LCD_Display+0x44>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <init_LCD_Display+0x4a>
 2a4:	00 00       	nop
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 2b2:	8f e1       	ldi	r24, 0x1F	; 31
 2b4:	9e e4       	ldi	r25, 0x4E	; 78
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <init_LCD_Display+0x5c>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <init_LCD_Display+0x62>
 2bc:	00 00       	nop
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 2ca:	8f e1       	ldi	r24, 0x1F	; 31
 2cc:	9e e4       	ldi	r25, 0x4E	; 78
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <init_LCD_Display+0x74>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <init_LCD_Display+0x7a>
 2d4:	00 00       	nop
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	9e e4       	ldi	r25, 0x4E	; 78
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <init_LCD_Display+0x8c>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <init_LCD_Display+0x92>
 2ec:	00 00       	nop
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 2fa:	8f e1       	ldi	r24, 0x1F	; 31
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <init_LCD_Display+0xa4>
 302:	00 c0       	rjmp	.+0      	; 0x304 <init_LCD_Display+0xaa>
 304:	00 00       	nop
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 312:	08 95       	ret

00000314 <put_string>:
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	8c 01       	movw	r16, r24
 322:	7c 01       	movw	r14, r24
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	09 c0       	rjmp	.+18     	; 0x33c <put_string+0x28>
 32a:	f7 01       	movw	r30, r14
 32c:	81 91       	ld	r24, Z+
 32e:	7f 01       	movw	r14, r30
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	f8 01       	movw	r30, r16
 33e:	01 90       	ld	r0, Z+
 340:	00 20       	and	r0, r0
 342:	e9 f7       	brne	.-6      	; 0x33e <put_string+0x2a>
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	e0 1b       	sub	r30, r16
 348:	f1 0b       	sbc	r31, r17
 34a:	ce 17       	cp	r28, r30
 34c:	df 07       	cpc	r29, r31
 34e:	68 f3       	brcs	.-38     	; 0x32a <put_string+0x16>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	08 95       	ret

0000035e <display_umidity_level_title>:
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 37a:	80 e6       	ldi	r24, 0x60	; 96
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 382:	c5 e0       	ldi	r28, 0x05	; 5
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 e2       	ldi	r24, 0x20	; 32
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 392:	21 97       	sbiw	r28, 0x01	; 1
 394:	c1 f7       	brne	.-16     	; 0x386 <display_umidity_level_title+0x28>
 396:	09 c0       	rjmp	.+18     	; 0x3aa <display_umidity_level_title+0x4c>
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	80 e2       	ldi	r24, 0x20	; 32
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 3a4:	21 97       	sbiw	r28, 0x01	; 1
 3a6:	c1 f7       	brne	.-16     	; 0x398 <display_umidity_level_title+0x3a>
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <display_umidity_level_title+0x66>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 ec       	ldi	r24, 0xC0	; 192
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 3b6:	8b e6       	ldi	r24, 0x6B	; 107
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 3be:	c5 e0       	ldi	r28, 0x05	; 5
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	ea cf       	rjmp	.-44     	; 0x398 <display_umidity_level_title+0x3a>
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <humidity_level_int_value_to_string>:
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	9c 01       	movw	r18, r24
 3d0:	64 e6       	ldi	r22, 0x64	; 100
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 82 02 	call	0x504	; 0x504 <__divmodhi4>
 3d8:	cb 01       	movw	r24, r22
 3da:	ca e0       	ldi	r28, 0x0A	; 10
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
 3de:	be 01       	movw	r22, r28
 3e0:	0e 94 82 02 	call	0x504	; 0x504 <__divmodhi4>
 3e4:	fc 01       	movw	r30, r24
 3e6:	c9 01       	movw	r24, r18
 3e8:	be 01       	movw	r22, r28
 3ea:	0e 94 82 02 	call	0x504	; 0x504 <__divmodhi4>
 3ee:	38 2f       	mov	r19, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	be 01       	movw	r22, r28
 3f4:	0e 94 82 02 	call	0x504	; 0x504 <__divmodhi4>
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 97       	sbiw	r30, 0x00	; 0
 3fc:	69 f4       	brne	.+26     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fe:	89 2b       	or	r24, r25
 400:	29 f4       	brne	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	90 e3       	ldi	r25, 0x30	; 48
 404:	93 0f       	add	r25, r19
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	0a c0       	rjmp	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40c:	90 e3       	ldi	r25, 0x30	; 48
 40e:	92 0f       	add	r25, r18
 410:	20 e3       	ldi	r18, 0x30	; 48
 412:	23 0f       	add	r18, r19
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	90 e3       	ldi	r25, 0x30	; 48
 41a:	9e 0f       	add	r25, r30
 41c:	20 5d       	subi	r18, 0xD0	; 208
 41e:	30 5d       	subi	r19, 0xD0	; 208
 420:	e0 eb       	ldi	r30, 0xB0	; 176
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	90 83       	st	Z, r25
 426:	21 83       	std	Z+1, r18	; 0x01
 428:	32 83       	std	Z+2, r19	; 0x02
 42a:	13 82       	std	Z+3, r1	; 0x03
 42c:	cf 01       	movw	r24, r30
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <display_umidity_level_values>:
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	8c 01       	movw	r16, r24
 43e:	eb 01       	movw	r28, r22
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	8a e8       	ldi	r24, 0x8A	; 138
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 44c:	c8 01       	movw	r24, r16
 44e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <humidity_level_int_value_to_string>
 452:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 456:	86 e7       	ldi	r24, 0x76	; 118
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 45e:	88 e7       	ldi	r24, 0x78	; 120
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	8a ec       	ldi	r24, 0xCA	; 202
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
 472:	ce 01       	movw	r24, r28
 474:	0e 94 e5 01 	call	0x3ca	; 0x3ca <humidity_level_int_value_to_string>
 478:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 47c:	86 e7       	ldi	r24, 0x76	; 118
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 484:	88 e7       	ldi	r24, 0x78	; 120
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	08 95       	ret

00000496 <display_initializing_message>:
}

void display_initializing_message()
{
	put_Char_LCD_Display(0x01,0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <put_Char_LCD_Display>
	put_string("Initializing...");
 4ae:	85 e8       	ldi	r24, 0x85	; 133
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 8a 01 	call	0x314	; 0x314 <put_string>
 4b6:	08 95       	ret

000004b8 <init_globals>:
    }
}

void init_globals()
{
	MENU = CLOCK_MENU;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <MENU>
	
	humidity_level_sensor_1 = 0;
 4be:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <humidity_level_sensor_1+0x1>
 4c2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <humidity_level_sensor_1>
	humidity_level_sensor_2 = 0;
 4c6:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <humidity_level_sensor_2+0x1>
 4ca:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <humidity_level_sensor_2>
 4ce:	08 95       	ret

000004d0 <main>:

void init_globals();

int main(void)
{
	init_globals();
 4d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <init_globals>
	
	DDRB |= (1 << 0);
 4d4:	b8 9a       	sbi	0x17, 0	; 23
	
	init_interrupt_10ms();
 4d6:	0e 94 86 00 	call	0x10c	; 0x10c <init_interrupt_10ms>
	init_interrupt_200ms();
 4da:	0e 94 a8 00 	call	0x150	; 0x150 <init_interrupt_200ms>
	ADC_Init();
 4de:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	init_LCD_Display();
 4e2:	0e 94 2d 01 	call	0x25a	; 0x25a <init_LCD_Display>
	
	display_initializing_message();
 4e6:	0e 94 4b 02 	call	0x496	; 0x496 <display_initializing_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	83 ed       	ldi	r24, 0xD3	; 211
 4ee:	90 e3       	ldi	r25, 0x30	; 48
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0x20>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x2a>
 4fa:	00 00       	nop
	_delay_ms(1000);
	display_umidity_level_title();
 4fc:	0e 94 af 01 	call	0x35e	; 0x35e <display_umidity_level_title>
	sei();
 500:	78 94       	sei
	
    while (1) 
    {
    }
 502:	ff cf       	rjmp	.-2      	; 0x502 <main+0x32>

00000504 <__divmodhi4>:
 504:	97 fb       	bst	r25, 7
 506:	07 2e       	mov	r0, r23
 508:	16 f4       	brtc	.+4      	; 0x50e <__divmodhi4+0xa>
 50a:	00 94       	com	r0
 50c:	07 d0       	rcall	.+14     	; 0x51c <__divmodhi4_neg1>
 50e:	77 fd       	sbrc	r23, 7
 510:	09 d0       	rcall	.+18     	; 0x524 <__divmodhi4_neg2>
 512:	0e 94 c7 02 	call	0x58e	; 0x58e <__udivmodhi4>
 516:	07 fc       	sbrc	r0, 7
 518:	05 d0       	rcall	.+10     	; 0x524 <__divmodhi4_neg2>
 51a:	3e f4       	brtc	.+14     	; 0x52a <__divmodhi4_exit>

0000051c <__divmodhi4_neg1>:
 51c:	90 95       	com	r25
 51e:	81 95       	neg	r24
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	08 95       	ret

00000524 <__divmodhi4_neg2>:
 524:	70 95       	com	r23
 526:	61 95       	neg	r22
 528:	7f 4f       	sbci	r23, 0xFF	; 255

0000052a <__divmodhi4_exit>:
 52a:	08 95       	ret

0000052c <__udivmodsi4>:
 52c:	a1 e2       	ldi	r26, 0x21	; 33
 52e:	1a 2e       	mov	r1, r26
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	fd 01       	movw	r30, r26
 536:	0d c0       	rjmp	.+26     	; 0x552 <__udivmodsi4_ep>

00000538 <__udivmodsi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	ee 1f       	adc	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	a2 17       	cp	r26, r18
 542:	b3 07       	cpc	r27, r19
 544:	e4 07       	cpc	r30, r20
 546:	f5 07       	cpc	r31, r21
 548:	20 f0       	brcs	.+8      	; 0x552 <__udivmodsi4_ep>
 54a:	a2 1b       	sub	r26, r18
 54c:	b3 0b       	sbc	r27, r19
 54e:	e4 0b       	sbc	r30, r20
 550:	f5 0b       	sbc	r31, r21

00000552 <__udivmodsi4_ep>:
 552:	66 1f       	adc	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	1a 94       	dec	r1
 55c:	69 f7       	brne	.-38     	; 0x538 <__udivmodsi4_loop>
 55e:	60 95       	com	r22
 560:	70 95       	com	r23
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	9b 01       	movw	r18, r22
 568:	ac 01       	movw	r20, r24
 56a:	bd 01       	movw	r22, r26
 56c:	cf 01       	movw	r24, r30
 56e:	08 95       	ret

00000570 <__umulhisi3>:
 570:	a2 9f       	mul	r26, r18
 572:	b0 01       	movw	r22, r0
 574:	b3 9f       	mul	r27, r19
 576:	c0 01       	movw	r24, r0
 578:	a3 9f       	mul	r26, r19
 57a:	70 0d       	add	r23, r0
 57c:	81 1d       	adc	r24, r1
 57e:	11 24       	eor	r1, r1
 580:	91 1d       	adc	r25, r1
 582:	b2 9f       	mul	r27, r18
 584:	70 0d       	add	r23, r0
 586:	81 1d       	adc	r24, r1
 588:	11 24       	eor	r1, r1
 58a:	91 1d       	adc	r25, r1
 58c:	08 95       	ret

0000058e <__udivmodhi4>:
 58e:	aa 1b       	sub	r26, r26
 590:	bb 1b       	sub	r27, r27
 592:	51 e1       	ldi	r21, 0x11	; 17
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <__udivmodhi4_ep>

00000596 <__udivmodhi4_loop>:
 596:	aa 1f       	adc	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	a6 17       	cp	r26, r22
 59c:	b7 07       	cpc	r27, r23
 59e:	10 f0       	brcs	.+4      	; 0x5a4 <__udivmodhi4_ep>
 5a0:	a6 1b       	sub	r26, r22
 5a2:	b7 0b       	sbc	r27, r23

000005a4 <__udivmodhi4_ep>:
 5a4:	88 1f       	adc	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	5a 95       	dec	r21
 5aa:	a9 f7       	brne	.-22     	; 0x596 <__udivmodhi4_loop>
 5ac:	80 95       	com	r24
 5ae:	90 95       	com	r25
 5b0:	bc 01       	movw	r22, r24
 5b2:	cd 01       	movw	r24, r26
 5b4:	08 95       	ret

000005b6 <_exit>:
 5b6:	f8 94       	cli

000005b8 <__stop_program>:
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <__stop_program>
