
SmartFlowerpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800078  00800078  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb5  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000741  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000482  00000000  00000000  00002d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000321a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  8a:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "driverAdc.h"

void ADC_Init(void)
{
		DDRA = 0x00;
  92:	1a ba       	out	0x1a, r1	; 26
	    // AREF = AVcc
	    ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	    
	    // ADC Enable and prescaler of 128
	    // 16000000/128 = 125000
	    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_GetValue>:
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  9e:	97 b1       	in	r25, 0x07	; 7
uint16_t ADC_GetValue(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  a0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  a8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  aa:	36 99       	sbic	0x06, 6	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_GetValue+0xc>
	
	return (ADC);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	95 b1       	in	r25, 0x05	; 5
}
  b2:	08 95       	ret

000000b4 <read_humidity_level>:

void read_humidity_level(int sensor)
{
	switch(sensor)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	19 f0       	breq	.+6      	; 0xc0 <read_humidity_level+0xc>
  ba:	02 97       	sbiw	r24, 0x02	; 2
  bc:	99 f0       	breq	.+38     	; 0xe4 <read_humidity_level+0x30>
  be:	08 95       	ret
	{
		case 1:
		{
			humidity_level_sensor_1 = (((uint32_t)ADC_GetValue(0) * 100) / 1023);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  c6:	9c 01       	movw	r18, r24
  c8:	a4 e6       	ldi	r26, 0x64	; 100
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__umulhisi3>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	33 e0       	ldi	r19, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	0e 94 3c 02 	call	0x478	; 0x478 <__udivmodsi4>
  dc:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <humidity_level_sensor_1+0x1>
  e0:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <humidity_level_sensor_1>
		}
		case 2:
		{
			humidity_level_sensor_2 = (((uint32_t)ADC_GetValue(1) * 100) / 1023);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_GetValue>
  ea:	9c 01       	movw	r18, r24
  ec:	a4 e6       	ldi	r26, 0x64	; 100
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__umulhisi3>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	33 e0       	ldi	r19, 0x03	; 3
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	0e 94 3c 02 	call	0x478	; 0x478 <__udivmodsi4>
 100:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <humidity_level_sensor_2+0x1>
 104:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <humidity_level_sensor_2>
 108:	08 95       	ret

0000010a <init_Interrupt>:
unsigned int display_refresh_counter = 0;
unsigned int read_humidity_counter = 0;

void init_Interrupt(void)
{
	TCCR0 = 0x0b;
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 10e:	12 be       	out	0x32, r1	; 50
	OCR0 = 125;
 110:	8d e7       	ldi	r24, 0x7D	; 125
 112:	8c bf       	out	0x3c, r24	; 60
	TIMSK = TIMSK | 0X02;
 114:	89 b7       	in	r24, 0x39	; 57
 116:	82 60       	ori	r24, 0x02	; 2
 118:	89 bf       	out	0x39, r24	; 57
	TIFR = 0X02;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	88 bf       	out	0x38, r24	; 56
 11e:	08 95       	ret

00000120 <__vector_10>:
}


ISR(TIMER0_COMP_vect) /*RUNS EVERY 1MS*/
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	display_refresh_counter ++;
 142:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <display_refresh_counter>
 146:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <display_refresh_counter+0x1>
 14a:	01 96       	adiw	r24, 0x01	; 1
	if (display_refresh_counter >= DISPLAY_REFRESH_RATE)
 14c:	88 3e       	cpi	r24, 0xE8	; 232
 14e:	23 e0       	ldi	r18, 0x03	; 3
 150:	92 07       	cpc	r25, r18
 152:	28 f4       	brcc	.+10     	; 0x15e <__vector_10+0x3e>
}


ISR(TIMER0_COMP_vect) /*RUNS EVERY 1MS*/
{
	display_refresh_counter ++;
 154:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <display_refresh_counter+0x1>
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <display_refresh_counter>
 15c:	0e c0       	rjmp	.+28     	; 0x17a <__vector_10+0x5a>
	if (display_refresh_counter >= DISPLAY_REFRESH_RATE)
	{
		display_refresh_counter = 0;
 15e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <display_refresh_counter+0x1>
 162:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <display_refresh_counter>
		display_umidity_level_values(humidity_level_sensor_1, humidity_level_sensor_2);
 166:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <humidity_level_sensor_2>
 16a:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <humidity_level_sensor_2+0x1>
 16e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <humidity_level_sensor_1>
 172:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <humidity_level_sensor_1+0x1>
 176:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_umidity_level_values>
	}
	read_humidity_counter ++;
 17a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 17e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 188:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
	if(read_humidity_counter >= SENSORS_READ_INTERVAL)
 18c:	88 3e       	cpi	r24, 0xE8	; 232
 18e:	93 40       	sbci	r25, 0x03	; 3
 190:	40 f0       	brcs	.+16     	; 0x1a2 <__vector_10+0x82>
	{
		read_humidity_level(SENSOR_1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
		read_humidity_level(SENSOR_2);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_humidity_level>
	}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <put_Char_LCD_Display>:
#include <string.h>


void put_Char_LCD_Display(int ch, int type)
{
	PORTC = (PORTC&0x0F)|(ch&0xF0);
 1c4:	25 b3       	in	r18, 0x15	; 21
 1c6:	38 2f       	mov	r19, r24
 1c8:	30 7f       	andi	r19, 0xF0	; 240
 1ca:	2f 70       	andi	r18, 0x0F	; 15
 1cc:	23 2b       	or	r18, r19
 1ce:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	61 70       	andi	r22, 0x01	; 1
 1d4:	2e 7f       	andi	r18, 0xFE	; 254
 1d6:	26 2b       	or	r18, r22
 1d8:	25 bb       	out	0x15, r18	; 21
	PORTC = PORTC|0x02;
 1da:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	ef e1       	ldi	r30, 0x1F	; 31
 1de:	fe e4       	ldi	r31, 0x4E	; 78
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <put_Char_LCD_Display+0x1c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <put_Char_LCD_Display+0x22>
 1e6:	00 00       	nop
	_delay_ms(5);
	PORTC &= 0xFC;
 1e8:	25 b3       	in	r18, 0x15	; 21
 1ea:	2c 7f       	andi	r18, 0xFC	; 252
 1ec:	25 bb       	out	0x15, r18	; 21
	PORTC = (PORTC&0x0F)|((ch<<4)&0xF0);
 1ee:	25 b3       	in	r18, 0x15	; 21
 1f0:	82 95       	swap	r24
 1f2:	92 95       	swap	r25
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	98 27       	eor	r25, r24
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	98 27       	eor	r25, r24
 1fc:	92 2f       	mov	r25, r18
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	89 2b       	or	r24, r25
 202:	85 bb       	out	0x15, r24	; 21
	PORTC = (PORTC&0xFE)|(type&0x01);
 204:	85 b3       	in	r24, 0x15	; 21
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	68 2b       	or	r22, r24
 20a:	65 bb       	out	0x15, r22	; 21
	PORTC = PORTC|0x02;
 20c:	a9 9a       	sbi	0x15, 1	; 21
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <put_Char_LCD_Display+0x4e>
 216:	00 c0       	rjmp	.+0      	; 0x218 <put_Char_LCD_Display+0x54>
 218:	00 00       	nop
	_delay_ms(5);
	PORTC &= 0xFC;
 21a:	85 b3       	in	r24, 0x15	; 21
 21c:	8c 7f       	andi	r24, 0xFC	; 252
 21e:	85 bb       	out	0x15, r24	; 21
 220:	08 95       	ret

00000222 <init_LCD_Display>:
}

void init_LCD_Display(void)
{
	DDRC = 0xFF;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	84 bb       	out	0x14, r24	; 20
	put_Char_LCD_Display(0x03,0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 232:	8f e1       	ldi	r24, 0x1F	; 31
 234:	9e e4       	ldi	r25, 0x4E	; 78
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <init_LCD_Display+0x14>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <init_LCD_Display+0x1a>
 23c:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x03,0);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 24a:	8f e1       	ldi	r24, 0x1F	; 31
 24c:	9e e4       	ldi	r25, 0x4E	; 78
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <init_LCD_Display+0x2c>
 252:	00 c0       	rjmp	.+0      	; 0x254 <init_LCD_Display+0x32>
 254:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x03,0);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 262:	8f e1       	ldi	r24, 0x1F	; 31
 264:	9e e4       	ldi	r25, 0x4E	; 78
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <init_LCD_Display+0x44>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <init_LCD_Display+0x4a>
 26c:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x02,0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 27a:	8f e1       	ldi	r24, 0x1F	; 31
 27c:	9e e4       	ldi	r25, 0x4E	; 78
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <init_LCD_Display+0x5c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <init_LCD_Display+0x62>
 284:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x0C,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	8c e0       	ldi	r24, 0x0C	; 12
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <init_LCD_Display+0x74>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <init_LCD_Display+0x7a>
 29c:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x01,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	9e e4       	ldi	r25, 0x4E	; 78
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <init_LCD_Display+0x8c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <init_LCD_Display+0x92>
 2b4:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x80,0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <init_LCD_Display+0xa4>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <init_LCD_Display+0xaa>
 2cc:	00 00       	nop
	_delay_ms(5);
	put_Char_LCD_Display(0x01,0);//clear display
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
 2da:	08 95       	ret

000002dc <put_string>:
}

void put_string(const char *_string)
{
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	8c 01       	movw	r16, r24
 2ea:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	09 c0       	rjmp	.+18     	; 0x304 <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
 2f2:	f7 01       	movw	r30, r14
 2f4:	81 91       	ld	r24, Z+
 2f6:	7f 01       	movw	r14, r30
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
}

void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 302:	21 96       	adiw	r28, 0x01	; 1
 304:	f8 01       	movw	r30, r16
 306:	01 90       	ld	r0, Z+
 308:	00 20       	and	r0, r0
 30a:	e9 f7       	brne	.-6      	; 0x306 <put_string+0x2a>
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	e0 1b       	sub	r30, r16
 310:	f1 0b       	sbc	r31, r17
 312:	ce 17       	cp	r28, r30
 314:	df 07       	cpc	r29, r31
 316:	68 f3       	brcs	.-38     	; 0x2f2 <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	08 95       	ret

00000326 <display_umidity_level_title>:

// displays humidity percentage title
void display_umidity_level_title()
{
	put_Char_LCD_Display(0x80, 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e8       	ldi	r24, 0x80	; 128
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
	put_string(SENSOR_1_TITLE);
 332:	80 e6       	ldi	r24, 0x60	; 96
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
	put_Char_LCD_Display(0xC0, 0);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 ec       	ldi	r24, 0xC0	; 192
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
	put_string(SENSOR_2_TITLE);
 346:	8b e6       	ldi	r24, 0x6B	; 107
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
 34e:	08 95       	ret

00000350 <humidity_level_int_value_to_string>:
}

const char * humidity_level_int_value_to_string(int value)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	9c 01       	movw	r18, r24
	char digit_3 = '\0';
	char digit_4 = '\0';
	
	static char humidity_level[4];
	
	first_digit = (value/100)%10;
 356:	64 e6       	ldi	r22, 0x64	; 100
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 35e:	cb 01       	movw	r24, r22
 360:	ca e0       	ldi	r28, 0x0A	; 10
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	be 01       	movw	r22, r28
 366:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 36a:	fc 01       	movw	r30, r24
	second_digit = (value/10)%10;
 36c:	c9 01       	movw	r24, r18
 36e:	be 01       	movw	r22, r28
 370:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 374:	38 2f       	mov	r19, r24
 376:	cb 01       	movw	r24, r22
 378:	be 01       	movw	r22, r28
 37a:	0e 94 28 02 	call	0x450	; 0x450 <__divmodhi4>
 37e:	28 2f       	mov	r18, r24
	third_digit = value%10;
	
	if(first_digit == 0)
 380:	30 97       	sbiw	r30, 0x00	; 0
 382:	69 f4       	brne	.+26     	; 0x39e <humidity_level_int_value_to_string+0x4e>
	{
		if(second_digit == 0)
 384:	89 2b       	or	r24, r25
 386:	29 f4       	brne	.+10     	; 0x392 <humidity_level_int_value_to_string+0x42>
		{
			digit_1 = third_digit + '0';
 388:	90 e3       	ldi	r25, 0x30	; 48
 38a:	93 0f       	add	r25, r19
	int second_digit;
	int third_digit;
	
	char digit_1 = '\0';
	char digit_2 = '\0';
	char digit_3 = '\0';
 38c:	30 e0       	ldi	r19, 0x00	; 0
	if(first_digit == 0)
	{
		if(second_digit == 0)
		{
			digit_1 = third_digit + '0';
			digit_2 = '\0';
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	0a c0       	rjmp	.+20     	; 0x3a6 <humidity_level_int_value_to_string+0x56>
		}
		else
		{
			digit_1 = second_digit + '0';
 392:	90 e3       	ldi	r25, 0x30	; 48
 394:	92 0f       	add	r25, r18
			digit_2 = third_digit + '0';
 396:	20 e3       	ldi	r18, 0x30	; 48
 398:	23 0f       	add	r18, r19
			digit_3 = '\0';
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <humidity_level_int_value_to_string+0x56>
		}
	}
	else
	{
		digit_1 = first_digit + '0';
 39e:	90 e3       	ldi	r25, 0x30	; 48
 3a0:	9e 0f       	add	r25, r30
		digit_2 = second_digit + '0';
 3a2:	20 5d       	subi	r18, 0xD0	; 208
		digit_3 = third_digit + '0';
 3a4:	30 5d       	subi	r19, 0xD0	; 208
		digit_4 = '\0';
	}
	
	humidity_level[0] = digit_1;
 3a6:	ec e7       	ldi	r30, 0x7C	; 124
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	90 83       	st	Z, r25
	humidity_level[1] = digit_2;
 3ac:	21 83       	std	Z+1, r18	; 0x01
	humidity_level[2] = digit_3;
 3ae:	32 83       	std	Z+2, r19	; 0x02
	humidity_level[3] = digit_4;
 3b0:	13 82       	std	Z+3, r1	; 0x03
	
	return humidity_level;
}
 3b2:	cf 01       	movw	r24, r30
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <display_umidity_level_values>:

// displays humidity percentage level read from every sensor
void display_umidity_level_values(int umidity_level_sensor_1, int umidity_level_sensor_2)
{
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	8c 01       	movw	r16, r24
 3c4:	eb 01       	movw	r28, r22
	int sensor_1_display_offset = strlen(SENSOR_1_TITLE);
	int sensor_2_display_offset = strlen(SENSOR_2_TITLE);
	
	put_Char_LCD_Display(0x80 + sensor_1_display_offset, 0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	8a e8       	ldi	r24, 0x8A	; 138
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(umidity_level_sensor_1));
 3d2:	c8 01       	movw	r24, r16
 3d4:	0e 94 a8 01 	call	0x350	; 0x350 <humidity_level_int_value_to_string>
 3d8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
 3dc:	86 e7       	ldi	r24, 0x76	; 118
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
	put_Char_LCD_Display(0xC0 + sensor_2_display_offset, 0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	8a ec       	ldi	r24, 0xCA	; 202
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
	put_string(humidity_level_int_value_to_string(umidity_level_sensor_2));
 3f0:	ce 01       	movw	r24, r28
 3f2:	0e 94 a8 01 	call	0x350	; 0x350 <humidity_level_int_value_to_string>
 3f6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
	put_string(HUMIDITY_LEVEL_UNIT);
 3fa:	86 e7       	ldi	r24, 0x76	; 118
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <put_string>
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <main>:
#include "IPX_Interrupt.h"


int main(void)
{
	humidity_level_sensor_1 = 0;
 40c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <humidity_level_sensor_1+0x1>
 410:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <humidity_level_sensor_1>
	humidity_level_sensor_2 = 0;
 414:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <humidity_level_sensor_2+0x1>
 418:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <humidity_level_sensor_2>
	
	sei();
 41c:	78 94       	sei
	init_Interrupt();
 41e:	0e 94 85 00 	call	0x10a	; 0x10a <init_Interrupt>
	ADC_Init();
 422:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	init_LCD_Display();
 426:	0e 94 11 01 	call	0x222	; 0x222 <init_LCD_Display>
	put_Char_LCD_Display(0xC0, 0);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 ec       	ldi	r24, 0xC0	; 192
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <put_Char_LCD_Display>
	display_umidity_level_title();
 436:	0e 94 93 01 	call	0x326	; 0x326 <display_umidity_level_title>
	display_umidity_level_values(humidity_level_sensor_1, humidity_level_sensor_2);
 43a:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <humidity_level_sensor_2>
 43e:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <humidity_level_sensor_2+0x1>
 442:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <humidity_level_sensor_1>
 446:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <humidity_level_sensor_1+0x1>
 44a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <display_umidity_level_values>
	
    while (1) 
    {
    }
 44e:	ff cf       	rjmp	.-2      	; 0x44e <main+0x42>

00000450 <__divmodhi4>:
 450:	97 fb       	bst	r25, 7
 452:	07 2e       	mov	r0, r23
 454:	16 f4       	brtc	.+4      	; 0x45a <__divmodhi4+0xa>
 456:	00 94       	com	r0
 458:	07 d0       	rcall	.+14     	; 0x468 <__divmodhi4_neg1>
 45a:	77 fd       	sbrc	r23, 7
 45c:	09 d0       	rcall	.+18     	; 0x470 <__divmodhi4_neg2>
 45e:	0e 94 6d 02 	call	0x4da	; 0x4da <__udivmodhi4>
 462:	07 fc       	sbrc	r0, 7
 464:	05 d0       	rcall	.+10     	; 0x470 <__divmodhi4_neg2>
 466:	3e f4       	brtc	.+14     	; 0x476 <__divmodhi4_exit>

00000468 <__divmodhi4_neg1>:
 468:	90 95       	com	r25
 46a:	81 95       	neg	r24
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	08 95       	ret

00000470 <__divmodhi4_neg2>:
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255

00000476 <__divmodhi4_exit>:
 476:	08 95       	ret

00000478 <__udivmodsi4>:
 478:	a1 e2       	ldi	r26, 0x21	; 33
 47a:	1a 2e       	mov	r1, r26
 47c:	aa 1b       	sub	r26, r26
 47e:	bb 1b       	sub	r27, r27
 480:	fd 01       	movw	r30, r26
 482:	0d c0       	rjmp	.+26     	; 0x49e <__udivmodsi4_ep>

00000484 <__udivmodsi4_loop>:
 484:	aa 1f       	adc	r26, r26
 486:	bb 1f       	adc	r27, r27
 488:	ee 1f       	adc	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	a2 17       	cp	r26, r18
 48e:	b3 07       	cpc	r27, r19
 490:	e4 07       	cpc	r30, r20
 492:	f5 07       	cpc	r31, r21
 494:	20 f0       	brcs	.+8      	; 0x49e <__udivmodsi4_ep>
 496:	a2 1b       	sub	r26, r18
 498:	b3 0b       	sbc	r27, r19
 49a:	e4 0b       	sbc	r30, r20
 49c:	f5 0b       	sbc	r31, r21

0000049e <__udivmodsi4_ep>:
 49e:	66 1f       	adc	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	1a 94       	dec	r1
 4a8:	69 f7       	brne	.-38     	; 0x484 <__udivmodsi4_loop>
 4aa:	60 95       	com	r22
 4ac:	70 95       	com	r23
 4ae:	80 95       	com	r24
 4b0:	90 95       	com	r25
 4b2:	9b 01       	movw	r18, r22
 4b4:	ac 01       	movw	r20, r24
 4b6:	bd 01       	movw	r22, r26
 4b8:	cf 01       	movw	r24, r30
 4ba:	08 95       	ret

000004bc <__umulhisi3>:
 4bc:	a2 9f       	mul	r26, r18
 4be:	b0 01       	movw	r22, r0
 4c0:	b3 9f       	mul	r27, r19
 4c2:	c0 01       	movw	r24, r0
 4c4:	a3 9f       	mul	r26, r19
 4c6:	70 0d       	add	r23, r0
 4c8:	81 1d       	adc	r24, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	91 1d       	adc	r25, r1
 4ce:	b2 9f       	mul	r27, r18
 4d0:	70 0d       	add	r23, r0
 4d2:	81 1d       	adc	r24, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	91 1d       	adc	r25, r1
 4d8:	08 95       	ret

000004da <__udivmodhi4>:
 4da:	aa 1b       	sub	r26, r26
 4dc:	bb 1b       	sub	r27, r27
 4de:	51 e1       	ldi	r21, 0x11	; 17
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <__udivmodhi4_ep>

000004e2 <__udivmodhi4_loop>:
 4e2:	aa 1f       	adc	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	a6 17       	cp	r26, r22
 4e8:	b7 07       	cpc	r27, r23
 4ea:	10 f0       	brcs	.+4      	; 0x4f0 <__udivmodhi4_ep>
 4ec:	a6 1b       	sub	r26, r22
 4ee:	b7 0b       	sbc	r27, r23

000004f0 <__udivmodhi4_ep>:
 4f0:	88 1f       	adc	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	5a 95       	dec	r21
 4f6:	a9 f7       	brne	.-22     	; 0x4e2 <__udivmodhi4_loop>
 4f8:	80 95       	com	r24
 4fa:	90 95       	com	r25
 4fc:	bc 01       	movw	r22, r24
 4fe:	cd 01       	movw	r24, r26
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
